v2-acmtog-sample.pdf raycore: ray-trac hardwar architectur mobil devic jae-ho nah sejong univers univers north carolina chapel hill hyuck-joo kwon dong-seok kim sejong univers cheol-ho jeong siliconart jinhong park lg electron tack-don han yonsei univers dinesh manocha univers north carolina chapel hill woo-chan park sejong univers present raycore, mobil ray-trac hardwar architecture. raycor facilit high-qual render effects, reflection, refraction, shadows, mobil devic perform real-tim whit rai tracing. raycor consist major components: ray-trac unit (rtus) base unifi travers intersect pipelin tree-build unit (tbu) dynam scenes. overal raycor architectur offer consid- erabl benefit term die area, memori access, power consump- tion. evalu architectur base fpga asic evalua- tion demonstr perform differ benchmarks. accord results, architectur demonstr high perform unit area unit energy, make highli suitabl us mobil devices. categori subject descriptors: comput methodolog [comput graphics]: graphic system interfacesgraph processors; com- pute methodolog [comput graphics]: renderingrai trace gener terms: rai trace addit kei word phrases: ray-trac hardware, kd-tree, global illumin acm refer format: jae-ho nah, hyuck-joo kwon, dong-seok kim, cheol-ho jeong, jinhong park, tack-don han, dinesh manocha, woo-chan park. 2014. ray- core: ray-trac hardwar architectur mobil devices. acm trans. graph. 33, x, articl xxx (2014), 15 pages. doi: 1. introduct rai trace [whit 1980] classic global illumin algo- rithm photo-realist rendering. applic gener high-qual imag rai trace perform off-lin computa- tions. however, advanc semiconductor technology, recent research focus develop real-tim rai trace algorithm cpu [wald et al. 2001; reshetov et al. 2005; wald et al. 2007; djeu et al. 2011], gpu [aila lain 2009; parker et al. 2010; gribbl navero 2013], intel integr core (mic) architectur [benthin et al. 2012], dedic ray-trac hard- ware [schmittler et al. 2004; woop et al. 2005; nah et al. 2011; imgtec 2013]. however, techniqu design real-tim render desktop laptop systems. widespread us mobil devices, includ smart- phone tablets, consider gener photo-realist imag low power cost. moreover, shown rai trace gener high-qual render- ing power tradit multi-pass raster method [keller et al. 2013]. recent studi ray-trac mobil platform classifi types: opengl es- base softwar approach [nah et al. 2010] ray-trac hardwar architectur mobil platform [kim et al. 2012; spjut et al. 2012; lee et al. 2012; kim et al. 2013; lee et al. 2013]. approach promising, provid suffici perform real-tim rai trace [nah et al. 2010; kim et al. 2012; spjut et al. 2012; kim et al. 2013] base acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014. 2 j.-h. nah et al. fig. 1. sampl imag render raycore. scene compos 0.6 k64 k triangles, repres ray-trac featur support raycore, specular reflection, refraction, shadows. raycor architectur achiev real-tim kd-tree construct scenes. detail inform scene includ tabl iv. pure softwar simul [nah et al. 2010; spjut et al. 2012; lee et al. 2012]. paper, present raycore, dedic hardwar archi- tectur real-tim mobil rai tracing. raycor architectur base multipl instruction, multipl data (mimd)-bas ray-trac architectur [park et al. 2008], develop ray-trac hardwar architectur integr mobil applic processor (aps). mobil ap limi- tation compar desktop processors: smaller die areas, lower power resources, lower memori bandwidth. example, appl a7 processor die area 102 mm2, maximum power consumpt 2-3 w, 10.6 gb/ maximum memori bandwidth (dual-channel lpddr3 1333 mhz) [note- bookcheck 2013], compon (cpus, gpus, dsps, memori controller, on) integr singl chip. given constraint mobil devices, architectur design achiev high power area efficiency. main compon hardwar architectur include: high ray-trac perform limit hardwar re- sources: accord nvidia tegra 4 whitepap [nvidia 2013], power effici (perform watt) area effi- cienci (perform squar millimeter) import design criteria mobil processors. architectur includ ray-trac unit (rtu) combin unifi travers inter- section (t&i) pipelin mimd execut model meet power area effici goals. hardwar design simplifi control logic interfac unit, enabl high perform unit area unit energy; addition- ally, rtu design maintain ray-trac perform regardless rai coher scene characteristics. accord asic evaluation, rtu achiev 239 mrays/ us- ing area 18 mm2 1w power consumpt 28 nm process technology. ray-trac perform compar software-bas rai trace system run current gpu [aila lain 2009; gribbl navero 2013] intel mic architectur [benthin et al. 2012], power consump- tion die area raycor lower desktop platforms. interact ray-trac dynam scenes: unlik static scenes, requir high ray-trac performance, rai trace dynam scene requir high perform fast acceleration-structur updat [wald et al. 2009]. how- ever, resource-limit mobil hardware, run-tim cost acceleration-structur updat high. solv prob- lem, present hardwar architectur reli kd- tree construction. compact tree-build unit (tbu) die area 1.6 mm2 power area efficient; con- struct surface-area heurist (sah) kd-tree 64 k triangl 20 ms, compar perform previ- ou software-bas cpu/gpu sah kd-tree construct meth- od [shevtsov et al. 2007; hou et al. 2011]. effici latenc hide low off-chip memori accesses: reduc off-chip memori access import power effici high perform mobil devic [nvidia 2013]. reduc perform degrad off-chip mem- ori accesses, us novel latency-hid techniqu call loop chanc t&i units. techniqu combin featur architecture, includ effici memori system t&i unit tbu tex- ture mip-mapping, minim off-chip memori accesses. result, real-tim whit rai trace rtu kd- tree construct tbu requir 1.1 gb/ memori bandwidth benchmarks, respectively. valu maximum bandwidth mobil lpddr3 memori (12.8 gb/s) [wagner 2013]. acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014. raycore: ray-trac hardwar architectur mobil devic 3 2. relat work 2.1 hardware-acceler rai trace ray-trac hardwar architectur separ types: dedic architectures, design ground rai tracing, redesign version programm multi-cor architectur optim rai tracing. dedic ray-trac architectur propos decade. saarcor [schmittler et al. 2004] ray- trace hardwar architectur rai gener shade unit, kd-tree travers unit, ray-triangl intersect unit. architectur extend rpu [woop et al. 2005] programm shade d-rpu [woop et al. 2006a] base bkd-tree [woop et al. 2006b]. streamrai architectur [ra- mani et al. 2009] includ filter engin incoher rai rai engine. t&i engin [nah et al. 2011] introduc con- cepts: order depth-first layout, three-phas intersection-test unit, rai accumul buffer latenc hiding. nah et al. [2013] recent creat hybrid architectur extend t&i engin dynam scene cpu dedi- cate hardware. hybrid architectur base asynchron bound volum hierarchi (bvh) construct [wald et al. 2008]; bvh refit procedur perform hardwar unit bvh rebuilt cpu. recently, doyl et al. [2013] bvh construct hardwar unit rai trace dynam scenes. caustic series2 [imgtec 2013] commerci ray-trac ac- celer board high-qual render desktop pcs. recent research focus redesign programm multi-cor architectures. copernicu [govindaraju et al. 2008] tile-bas parallel ray-trac run 128 pro- grammabl cores. mahesri et al. [2008] propos many-cor archi- tectur visual computing, includ rai tracing. trax [spjut et al. 2009] mimd thread multiprocessor (tms) [kopta et al. 2010] built mimd processor core incoher rai tracing. aila karra [2010] propos new hardwar architec- ture base nvidia fermi gpu order reduc memori traffic treelet-bas approach stack-top cach architec- ture. kopta et al. [2013] improv trax architectur power effici treelet-bas approach reconfigur pipelines. 2.2 mobil rai trace mobil ray-trac hardwar softwar architectur re- ceiv consider attention. mobirt [nah et al. 2010] soft- ware rai tracer opengl es. mrtp [kim et al. 2012] reconfigur processor support mimd architectur singl instruction, multipl thread (simt) models. kim et al. [2013] present reconfigur simt processor improv mrtp architecture. spjut et al. [2012] extend mimd tm mobil environ measur perform cycle- accur simulation. sgrt [lee et al. 2012; lee et al. 2013] com- bine t&i engin [nah et al. 2011] samsung reconfig- urabl processor (srps) high perform flexibility. 2.3 kd-tree construct algorithm rai trace dynam scene especi challenging, dynam scene requir fast tree construct real-tim rendering. well-known sah kd-tree construct o(nlogn) complex [wald havran 2006]. research tri improv tree-construct time design approxim sah tree-construct al- gorithm. hunt et al. [2006] present scan (a.k.a. binning) ap- proach sah approximation. shevtsov et al. [2007] present parallel kd-tree construct algorithm multi-cor cpus. method combin object median top-level nodes, bin sah construct mid-level nodes, exact sah construct bottom-level nodes. zhou et al. [2008] gpu kd-tree construct method top-level spatial median bottom-level sah construction. hou et al. [2011] improv zhou et al. work partial depth-first approach larg models. karra [2012] improv space-fil curv tree construct method propos lauterbach et al. [2009] better scalabl gpus. hand, maintain kd-tree quality, re- searcher tri parallel exact sah kd-tree construc- tion. choi et al. [2010] present parallel algorithm multi-cor cpu (nest in-place). wu et al. [2011] gpu-bas algorithm parallel sah kd-tree construct split clipping. finally, research investig scene-graph hierar- chi tree construction. gkdtree [kang et al. 2013] scene- graph-bas multi-level hierarchi parallel partial up- date dynam subtrees. razor [djeu et al. 2011] present par- allel lazy-upd method scene-graph hierarchies. 3. raycor hardwar architectur section, overal architectur design criteria. figur 2 illustr compon raycor architecture. raycor unit consist tree-build unit (tbu) ray-trac unit (rtus). tbu perform sah kd-tree construct dynam scenes, rtu perform rai tracing. design decis section 3.1, rtu architectur section 3.23.7, tbu architectur section 3.8, rai trace api section 3.9. primit work memori (internal) stack memori applic api scene manag static scene (primitive) dynam scene (primitive) textur imag color buffer textur imag dynam static geometri data rtu (rai trace unit) tbu (tree build unit) bu interfac unit result buffer color result buffer textur cach cach fig. 2. ray-trac architecture. current version, type acceler structur (as) kd-tree. 3.1 design decis section, underli goal drove design choic raycor architecture, includ high acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014. 4 j.-h. nah et al. perform unit area unit energy, good support dy- namic scenes, effici memori systems. fixed-funct unit vs programm units: modern gpu architectur base standard api (opengl directx) consist programm shader unit fixed-funct special-purpos unit (for rasterization, textur mapping, tessella- tion, etc.). case mobil ray-trac hardwar architectures, however, similar standard api known. therefore, previou architectur differ design fulli pro- grammabl [spjut et al. 2012; kim et al. 2013] partial pro- grammabl [kim et al. 2012; lee et al. 2013] architectures. contrast prior architectures, chose fully-hardwir approach overal raycor architectur follow reasons. first, fully-hardwir approach benefici term power area efficiency. accord borkar chien [2011], hardwir unit provid 50-500 time greater energi effi- cienci general-purpos regist organ cases. additionally, instruct fetch-and-decod logic instruct cach programm increas requir area. thus, feel fix pipelin better suit mobil devic limit die area power resources. second, modern mobil ap includ programm gpus. ultim goal design architectur support programm shade real-tim rai tracing, feel achiev combin programm gpu ap fixed- function pipelines. mimd vs simd: singl instruction, multipl data (simd) ar- chitectur wide modern cpu gpus. high simd efficiency, data-level parallel exploited. multi- ple rai data map simd unit (packet trace [wald et al. 2001]), simd effici decreas rai coher low. high rai recurs depth stochast rai trace de- creas rai coherence, addit stream compact reorder method [ramani et al. 2009; aila karra 2010; nah et al. 2012] need increas simd efficiency. contrast, mimd architectur exploit thread-level parallelism, robust respect rai coher [mahesri et al. 2008; spjut et al. 2009; nah et al. 2011] ray-packet-bas simd architec- tures. therefore, us mimd-styl architectur raycore. drawback mimd architectur requir hardwar resourc simd architectures. control flow logic core replic mimd pipelin [mahesri et al. 2008]. words, mimd pipelin independ front-end (instruct fetch-and- decod logic, instruct cache, etc.). however, drawback issu architectur fixed-funct hardwar architectur perform instruct fetch de- coding. unifi t&i unit vs separ t&i units: ray-trac architectur [schmittler et al. 2004; woop et al. 2006a; nah et al. 2011; lee et al. 2013] separ hardwar unit travers intersect tests. example, saarcor [schmittler et al. 2004] consist 4-wai simd travers unit process rai intersect unit process singl ray. 4:1 ratio origin expect workloads; approx- imat time travers oper intersect test operations. however, assumpt true workload travers intersect test chang accord scene properties, tree construct method, rai type (primari rays, secondari rays, shadow rays, etc.). case creat load imbal problem, similar caus separ shader architectur tradit graph- ic hardwar (vertex pixel shaders) [tamasi 2008]. order overcom load imbal problem, propos unifi t&i pipelin (section 3.4). architectur perform travers in- tersect oper singl pipeline. multi-thread method: modern gpu architectur support hardwar multi-thread achiev massiv parallelism. current gpu multi-thread system us larg regist file latenc hiding; accord kopta et al. [2010], regist area stream multiprocessor (sm) nvidia gpu larger comput area sm. minim addit cost hardwar multi-threading, present novel multi-thread tech- niqu call loop chanc hardwar ar- chitectur (section 3.5). techniqu prevent pipelin stall reus exist input/output buffer regist pipeline, requir fewer memori resourc hardwar multi- thread gpus. acceler structur (as): us acceler structur enabl fast rai trace reduc number ray-primit intersect tests. kd-tree bvh wide acceler structur rai trace [wald et al. 2009]. simd instruct used, kd-tree gener faster single-rai travers bvh earli termin [pharr humphrei 2010; nah manocha 2014]. addition, kd-tree exhibit better cach effici bvh size kd- tree node (8 bytes). time kd-tree node bvh node store cach block size bvh node typic 32 bytes. reasons, us kd-tree raycore. drawback kd-tree longer tree build time bvhs. kd-tree data structur base spatial splits, kd- tree usual order magnitud node bvh [ize hansen 2011]. thus, sah kd-tree proportion longer build time sah bvh scene [pharr humphrei 2010]. order address issue, present ded- icat kd-tree construct hardwar architectur (section 3.7). render effects: main purpos propos architec- ture produc real-tim whit rai trace [whit 1980] mobil devices. therefore, architectur support whit effects, includ specular reflection, refraction, hard shadows. architectur acceler interact distribu- tion rai trace [cook et al. 1984]. support feature, ray- gener unit architectur (section 3.3) support sudoku- base sampl techniqu [boulo et al. 2006]. additionally, shade unit (section 3.6) support quadtre displac map [tev et al. 2008] provid detail geometri mobil 3d appli- cations. primit type: raycor current support triangl ge- ometr primitives. strategi improv perform simplifi design, elimin branch support differ primit type [wald et al. 2001]. therefore, type primit convert triangl rendering, rasterization-bas gpus. reduc requir oper ray-triangl intersect test, chose wald pre-computation-bas intersect algorithm [wald 2004]. 3.2 ray-trac unit figur 3 depict overal block diagram rtu. data path includ unit handl setup processing, rai generation, travers intersect (t&i), hit point calculation, shading. architectur shown figur contain t&i pipelin t&i unit. memori compos cach buffers. t&i cach configur two-level hierarchies; acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014. raycore: ray-trac hardwar architectur mobil devic 5 textur imag frame buffer geometri data acceler structur flag flag flag flag flag secondari rai stack ray-index map tabl color buffer regist flag regist list cach -materi cach node/triaccel cach stack memori regist regist regist t&i l2 cach shade buffer materi memori triangl info. cach textur cach height cach regist fig. 3. overal architectur ray-trac unit. level-on (l1) cach (node/triaccel list caches) share t&i level-two (l2) cache. extern memori configur data, geometri data (includ triangl information), textur images, frame buffer. initially, setup-process unit (section 3.3) pass rai in- format ray-gener unit (section 3.3). rai infor- mation correspond primari rai gener setup, secondari rai gener shade unit (section 3.6). rai generated, t&i unit (section 3.4-3.5) per- form node travers ray-triangl intersect test comput hit point. hit point generated, posit (x, y, z) hit point calcul hit-point calcul unit (section 3.6). shade unit perform phong illumin textur mapping. rai gener addit secondari rays, rai inform transfer setup-process unit. transfer rai inform indic propag rai given pixel, final color valu pixel store color buffer. 3.3 setup process rai gener setup-process unit initi inform gener primari rays. inform consist rai type (primari ray) rai index calcul screen coordinates. number in-flight rai rtu (227) total pixel sizes, us reduc regist bit width rai indic (8 bits) instead bit width screen coordinates. setup-process unit multiplex select initi primari rai secondari rai defin shade unit. primari rai continu gener regard statu output buffer shade unit, deadlock occur circular wait rai shade unit rai rai gener unit. prevent this, priorit secondari rai primari rays. ray-gener unit gener rai rai inform setup-process unit, store secondari rai dedi- cate stack, perform shadow rai culling, store final color valu color buffer. gener rai ray-gener unit suppli t&i pipelines. detail procedur gener type rai de- scribe follows. first, primari rai gener morton order (a.k.a. z-curve) [morton 1966] improv cach efficiency, shown [aila lain 2009]. support order, us simpl 6-bit counter 4-bit posit shift 64 pix- els. defin origin 6-bit block number i5i4i3i2i1i0, morton-ord coordin valu (x, y) (i5i3i1, i4i2i0). second, number secondari rai pixel vari accord- ing rai depth sampl size. reflect rai re- fraction rai gener concurrently, sent follow pipelin stage execut store secondari rai stack. 16 entri stack order fulli sup- port reflect refractions. prevent stack overflow, restrict maximum rai recurs depth 15. third, shadow rai inform light sourc trans- fer ray-gener unit shade unit. effect shadow-rai tracing, backfac cull method [suf- fern 2007], reject shadow rai gener backsid triangle, adopted. culling, compar hit trian- gle surfac normal posit light source. ambient occlus (ao) rai except case cull method affect posit light sources. ray-gener unit support textur shadows. finally, sampl rai gener support distribut rai trace super-sampl anti-alias (ssaa). current imple- mentat support ao diffus inter-reflect var- iou effect produc distribut rays. ao rai diffus inter-reflect rai distribut accord pre-defin su- doku sequenc [boulo et al. 2006] hemisphere. sudoku sampl tile approach prevent tempor scintillation. ssaa, raycor support regular grid sampl (22) edge- base adapt sampling. 3.4 unifi travers intersect (t&i) pipelin section, unifi t&i pipeline. goal architectur solv load imbal problem pre- viou separ t&i pipelines, describ section 3.1. architecture, singl pipelin perform nest loop travers intersect oper maintain hardwar utilization. more- over, unifi pipelin suitabl support acceler- ation structures. current implement support kd-trees, bvh bound interv hierarchi (a.k.a. bkd-tree skd- trees) [wachter keller 2006; woop et al. 2006b; havran et al. 2006] easili support ray-box intersect test mode shown figur 5. unified-pipelin approach increas hard- ware area support multipl modes, greatli simplifi control logic interfac unit compens in- creas hardwar area. mimd architectur requir input output buffer t&i pipeline, greatli acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014. 6 j.-h. nah et al. pipelin regist t&i pipelin input list cach access p1 node/triaccel cach access fmul4 fcomp3 fadd2 stack write fcomp2 fmul14stack read fcomp2 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 p19 p20 fadd2 tfadd fadd3 fdiv fmul3 fmul3 tfadd2 fadd fcomp2 p0 p21 pn t&i pipelin output dmux mux fig. 4. t&i pipelin block diagram. numer valu attach end function unit signifi number implement func- tional units. increas hardwar area; commun be- tween t&i pipelin necessary, given pipelin dedic travers singl uniqu ray. figur 4 show block diagram unifi t&i pipeline. two- cycl latenc need l1 cach access, floating-point ad- dition (fadd), floating-point divis (fdiv), floating-point addit operand (tfadd). one-cycl latenc requir floating-point multipl (fmul) floating-point compar- ison (fcomp). pipelin stage connect intern data path, shape data (a kd-tree node triangle), rai data, intermedi result transfer pipelin stage pipelin stage delay. width intern data path vari accord particular stage pipeline. unifi triaccel cach triaccel data structur wald in- tersect test algorithm [wald 2004] node cach reduc requir sram size. unlik unifi node/triaccel cache, us independ list cach exploit sequenti access pat- terns. figur 5 illustr oper mode t&i pipeline: ray-box intersect test, node traversal, ray-triangl intersec- p4 p5 p10 p9 p7 p12 p11 ray-box intersect test mode ray-triangl intersect test mode travers mode p3 p2 p1 p14 p13 p15 p16 p17 p18 p19 p8 p6 fdiv (0)fadd(0-1) fmul(0-1) fcomp (0-3) stack write stack read node cach access tfadd (0)fadd (0-1) fmul (0-2) fcomp (0-2) fcomp (0-1) fcomp (0-1) fcomp (0) fadd (0-2) fmul (0-2) fadd (0-2) fmul (0-3) fadd (0-1) fmul (0-3) tfadd (0-1) fadd (0) fcomp (0-1) triaccel cach access list cach access fmul (0-1) fmul (0) fadd (0-1) fig. 5. oper mode t&i pipeline. number parenthes signifi number function unit shown figur 4. tion test. illustr hardwar resourc pipelin util mode. mode calcul initi t distanc ray; perform step test intersect rai bound box surround entir scene. t distanc distanc rai origin rai normal direction. second mode activ case inner node determin child node intersect ray. intersect found, return near-sid node. child node need traversed, child node far split plane store stack memori front-to- travers order. child node intersect ray, node data read stack recurs execut node. increas t&i pipelin utilization, kd-tree travers step concurr process pipeline; possibl current node locat cach block. us kd-tree layout [pharr humphrei 2010], left child node adjac parent node, store cach block. case, travers node parallel. parent node child node visited, output child travers result; parent node visited, output parent result. mode activ leaf node find trian- gle intersect ray. mode, triangl list informa- tion read list cach triangl index. pre-comput triaccel data [wald 2004] transfer cpu retriev node/triaccel cache, intersect test perform given rai nearest hit point (for non- shadow rays) hit point (for shadow ao rays). final intersect triangl computed, triangl inform sent stage; otherwise, flow return travers stage travers continues. shadow rai intersect test continu rai strike opaqu triangle. support transpar shadows, check triangl hit shadow rai transparent. case, perform multipl accumul oper calcu- late transpar rate. accumul alpha valu store addit -materi cach (figur 3) simpler shading. acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014. raycore: ray-trac hardwar architectur mobil devic 7 3.5 memori t&i unit memori access t&i unit account ma- joriti memori access overal rai tracing, memori t&i unit need design efficiency. reduc number extern memori accesses, t&i pipelin t&i unit equip l1 cache; pipelin share com- mon l2 cache. two-level hierarch model increas efficiency, cach miss penalti high cach miss result pipelin stall. thus, includ latency-hid techniqu address issue. raycor memori design simpl multi- threading, offer eas hardwar implement effici hide memori latency. achiev goals, de- vise effect loop chanc scheme l1 l2 cach (figur 6). principl scheme simple; cach miss trigger idl set rai thread miss remain pipelin stages; rai thread set activ mode loop re-access cache. words, cach miss act prefetch data loop. case l1 cache, bypass l1 cach miss, rai thread pass subsequ pipelin stage stalling. iter- ation, cach request gener rai thread return pipelin (p21) figur 4. cach miss occur again, process repeated. miss- handl process, cach control access l2 cach extern memori fetch data. l2 cach oper follows. l1 cach miss occurs, request l2 cach access output l1 addr fifo l2 cache. request result l2 cach hit, address data request return l1 addr/data fifo. request result cach miss, request l1 addr fifo goe l2 addr fifo discard l1 addr fifo. so, l2 cach access l1 addr fifo immedi performed. propos scheme us exist intern memori (in- put/output buffer pipelin registers) and, ad- dition memori space, avoid certain buffering. therefore, techniqu actual area-effici gpu-styl multi-thread larg regist file de- scribe section 3.1. addr data addr addr/ data t&i pipelin l1 cach l1 addr/ data fifo l1 addr fifo addr l2 cach l2 addr fifo l2 addr/ data fifo mem ctl addr addr addr/ data data data fig. 6. memori loop chanc scheme. 3.6 hit-point calcul shade hit-point calcul unit comput intersect point be- tween rai triangle, express parametr p(t) = o+ t~d, o rai origin ~d rai normal direction. shade unit perform comput relat phong illu- minat textur map inform store materi memori triangle-inform cache. calcu- late color ad previou color shade buffer; final color determin accumul color valu rai gener given pixel. anti-alias enabled, color valu multipl subpixel averag box filter. final color value, information, eventu sent loop setup process unit, color written frame buffer. shade buffer store rai in- format secondari rai generation, rai inform transfer setup-process unit. textur map support mip-map bilinear filter scheme. similar previou rasteriza- tion method. includ typic textur cach architectur [hakura gupta 1997]. bilinear filtering, texel data concurr fetch interpolated. effect mip-mapping, emploi mip-map level select method rai length pre-calcul valu [park et al. 2011]. compar rai differential-bas methods, select method reduc com- putat resourc need calcul mipmap level. adopt- ing method, achiev textur alias higher textur cach hit rates: 96%. increas texture- cach hit rate tile represent textur data. texture-map unit support textur shadows. order address issu simpl geometr prim- itiv mobil 3d graphics, shade unit support quadtre displac map [tev et al. 2008]. improv tev et al. method start-level decision, multi-level descend- ing, select ascend algorithms. displac map hardwar unit consist view calcul unit, fully-pipelin quadtre travers unit height cache, address calcula- tion unit. complet descript propos algorithm architectur scope paper, given an- paper [kwon et al. 2014]. 3.7 tree-build unit dynam scene dynam scenes, acceler structur updat frame [wald et al. 2009]. therefore, perform acceler structur updat important. section, present new tree-build hardwar architectur achiev follow goals: fast kd-tree construct tree-qual degradation, minim off-chip memori accesses, exploita- tion burst memori access. figur 7 illustr propos tree-build hardwar archi- tecture. instead exact sah calcul node [wald havran 2006], divid tree-construct procedur step achiev fast construct good tree quality: bin- ning [shevtsov et al. 2007; djeu et al. 2011] sorting. work memori rtu(ray-trac unit) work memori primit bin primit bin primit arbit geometri (primitive) bin primit dynam static asa result buffer result buffer fig. 7. propos tree-build architecture. acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014. 8 j.-h. nah et al. strategi base experiment result razor [djeu et al. 2011]; qualiti degrad bin percent, bin achiev 3-7 faster tree construct speed com- pare exact sah kd-tree construction. architectur us bin high-level tree construct sort low-level tree construction. tree-build unit (tbu) consist binning- base tree-build pipelin (tbp) high-level node multi- ple sorting-bas tbp low-level nodes. primit sort sorting-bas tbps, merge-sort hardwar unit [sil- iconart 2013]. minim off-chip memori access, sorting-bas tbp us intern sram sorting, split plane selection, ge- ometri classification. approach better caches, sort base random access patterns. maintain tree data work memory, data transfer binning-bas tbp sorting-bas tbp soon small (in words, work set size size work memori sorting-bas tbp (51.3 kb).). reorder node data effici burst transfer ddr mem- ory. tree data consist node data geometri list data. list data store array, burst-memori access list data simple. contrast, burst-memori access difficulti gener- at node data location. 8-byte compact kd-tree layout [pharr humphrei 2010], node data store depth-first order remov pointer left child node. depth-first layout natur single-thread tree construction, difficult parallel kd-tree construct order predetermined. therefore, write node data extern memori reordering, effici us burst-memori access written node order intern memori depth-first order. solv problem, realloc node construct sequenc depth-first layout. reorder process, node store intern memori depth-first layout, far possible. af- ter that, gener node data transfer extern memori effici burst-memori access. effect handl dynam scenes, combin two-tre approach [bikker 2007] two-level approach [wald et al. 2003]. classifi object scene static dynamic. static tree static object built cpu. high tree quality, static tree construct sah split clip [wald havran 2006]. contrast, dynam object tree, dynam subtre rebuilt frame tbus; top-level dynam tree construct dynam subtrees. t&i unit, top-level dynam tree travers travers static tree. partial-upd strategi us reduc tree-construct workload greater scene static [bikker 2007; kang et al. 2013]. currently, triaccel data [wald 2004] calcul cpu transfer rtus. accord havel herout [2010], precompt throughput wald triaccel data 31m trian- gles/ singl thread intel core 2 duo e8200 (2.66 ghz). therefore, precomput bottleneck bench- marks. 3.8 rai trace api raycor provid opengl es 1.1-like api extens sepa- rate static dynam objects. static object retain sub- sequent frame dynam object transfer tree builder vertex arrai reconstruct dynam subtre frame. extens function rai tracing, pro- grammer easili add ray-trac effect opengl es- base applications. programm shade required, program- mer abl us exist gpu. case, interfac t&i unit programm shaders, similar sgrt [lee et al. 2013], appli raycore. regard s/w programming, opengl es api medium connect raycor mobil gpu core ap. 4. hardwar implement section, specif hardwar implement raycor architecture. introduc fpga prototype. asic evalu analyz power con- sumption raycor architecture. 4.1 fpga prototyp figur 8 show dynalith system inext-v6 board, con- tain xilinx virtex-6 lx550 fpga chips, 2 gb ddr3 dram, 8 mb sram. tft lcd board 800480 screen resolut attach inext-v6 board. connect host control pci express interface. implement propos ray-trac architectur built fpga chip inext-v6 boards. oper speed 84 mhz, 64-bit bu frequenc access extern memory. host (cpu) send data dram fpga chip pci express interfac bu function model (bfm) integr fpga. implement rtu fpga board measur rai trace performance. setting, rtu implement uniqu fpga chip, rtu fpga pro- totype. fpga #0 act master load distribution, send block pixel coordin idl rtu units; dynam alloc block 88 pixel rtu. detail task schedul follows. rtu complet execut alloc 88 pixels, 88 pixel address immedi request fpga #0. avail- abl current 1616 pixels, return fpga #0. otherwise, fpga #0 request 1616 pixel address pixel coordin gener 88 pixel address 1616 pixel returned. final color valu gener rtu store sram frame buffer fpga #1 sram control fpga #1. implement tbu fpga board measur kd-tree construct performance. tbu consist binning-bas tbp sorting-bas tbps. implemen- tation, singl fpga chip (fpga #0) tbu. tabl show list hardwar resourc unit. us 24-bit floating-point format (1 sign bit, 7 expon bits, 16 fraction bits) reduc regist requirements. us table- base approach squar root unit. reduc error caus fig. 8. inext-v6 board. acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014. raycore: ray-trac hardwar architectur mobil devic 9 tabl i. hardwar complex unit fpga chip. 2-input 3-input compar multipli divid squar exp. adder adder root unit ray-trac unit (rtu) rai gener 3 2 6 1 2 1 travers 41 4 60 69 4 intersect hit-point 17 6 9 27 (18-bit) 6 2 1 calcul 8 (8-bit) shade total 61 12 71 110 11 4 2 tree-build unit (tbu) 1 bin tbp 14 1 92 12 1 0 0 4 sort tbp 132 4 0 84 0 0 0 total 146 5 92 96 1 0 0 access data squar root table, adjac valu linearli interpolated. shade unit us 88 multipli- er textur filtering. 24-bit precis higher possibl visual arti- fact (e.g., holes) 32-bit precision, appli follow- ing solut hardwar architecture. first, design arithmet unit hardwar architecture, reduc pre- cision error far possible. second, appli geometri trans- format geometri data reduc precis error ray- triangl intersect tests. combin approaches, benchmark signific visual artifact prototype. total requir sram size rtu 507.1 kb. size l1 node/triaccel cache, l1 list cache, l2 t&i cache, triangle-inform cache, textur cache, height cach displac map 124.38 kb, 90.38 kb, 124.88 kb, 50.81 kb, 16.44 kb, 4.23 kb, respectively. set associativ- iti l1 l2 cach eight, respectively. total size intern buffer 94.48 kb. intern buffer consist ray-index map table, secondari rai stack, color buffer, travers stacks, -materi memory, t&i input/output buffers, global scene inform buffer materi light data. size travers stack 36 kb stack support maxi- mum tree depth 32. differ rai exist pipelin reg- ister input/output buffers, rai concurr pro- cessed. maxim number in-flight rai rtu 227. total requir sram size tbu 218.62 kb. binning-bas tbp 13.42 kb work memory, sorting-bas tbp 51.3 kb work memory. 4.2 asic evalu asic evaluation, tsmc 28 nm high- performance, low-pow (hpl) process [tsmc 2012] synop- sy design compil [synopsi 2013]. raycor unit syn- thesiz 650 mhz voltag 0.9 v; set tar- frequenc 500 mhz margin. total area rtu 3 mm2. therefore, rtu alloc 18 mm2; similar area current mobil gpu (e.g., powervr sgx543 mp2) mobil ray-trac hardwar architectur [kim et al. 2013; spjut et al. 2012]. also, tbu occupi 1.6 mm2. intern power consumpt tbu rtus, in- clude controllers, l2 cach axi bu interface, ap- proxim 1 w. low power consumpt possibl follow reasons. first, design raycor architectur us- ing fix pipelin specif high perform low power consumption. accord hame et al. [2010], instruct fetch-and-decod logic occupi 45% total power consumpt processor; raycor need instruct fetch-and-decod logic instruct caches. second, pipelin control logic greatli simplifi unifi t&i architec- ture. third, larg regist file larg caches, consum lot power, reduc architecture; loop chanc techniqu minim requir regist multi- threading, effici memori achiev high cach hit rate small l1/l2 caches. fourth, latest 28 nm hpl process [tsmc 2012] deliv 2 gate densiti 40nm process, reduc standbi oper power 40%. sum up, raycor low power consumpt come care design us recent innov fabri- cation technology. 5. experi result section, rai trace perform kd- tree construct perform fpga prototypes, respec- tively. compar raycor asic version ray- trace kd-tree construct approaches. 5.1 ray-trac perform fpga prototyp section includ perform evalu result ray- trace unit (rtu). numer result evalu measur directli fpga prototype. kd-tree construct sah [wald havran 2006]. us differ scene setup benchmark testing. first, effect whit ray-trac effects, design new scenes, shown figur 9: kitchen (296 k triangles), room move light (240 k triangles), live room (360 k triangles). kitchen live room scene move camera static light sources. contrast, room move light scene static camera, static light source, dynam light source. measur rai coher- ence, set rai recurs depth 0 10. case, coher rai low; rai differ type (pri- mary, shadow, reflection, refract rays) differ depth process simultan t&i pipeline. note reflec- tion refract rai spawn materi hit point reflect refractive. screen resolut benchmark 800480 1600960. second benchmark structur order analyz perform differ rai types, similar [aila lain 2009]. benchmark, scene select (figur 10): confer (282 k triangles) sibenik (80 k triangles). benchmark, set rai type primari rai (the coher type), ao ray, diffus inter-reflect rai (the coher- ent type). light sourc all. primari rai diffus inter-reflect rai cast shadow rai light source, ao rai cast shadow rai treat shadow ray. 32 sampl pixel ao diffus inter-reflect rays. ao rai termin cut-off valu 5.0 maximum t distance. tabl ii iii perform result second benchmarks, respectively. tabl includ number rays, cach hit rates, memori traffic, frame second (fps), mrays/s. believ mrays/ import met- ric estim overal perform ray-trac acceler number rai scene vari accord scene setup. current raycor fpga implement achiev 1826 acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014. 10 j.-h. nah et al. fig. 9. static test scene whit rai trace : kitchen, room move light, live room. scene render interact frame rate fpga prototype. tabl ii. fpga perform result whit rai tracing. rtu 84 mhz experiment. abbreviations: nt - node triaccel, ti - triangl information, tex. - texture. scene (depth) # cach hit rate (%) memori fp mrays/ rai (l1 nt, l1 list, traffic (mb/s) (m) l2 t&i, ti, tex.) (non-tex. / tex.) 800480 resolut kitchen (0) 1.1 99 / 99 / 57 / 98 / 96 50 / 25 21.3 24.5 kitchen (10) 1.8 99 / 99 / 54 / 96 / 95 88 / 31 14.5 26.2 move light (0) 1.1 99 / 99 / 62 / 96 / 96 85 / 26 20.8 23.7 move light (10) 1.8 99 / 99 / 61 / 96 / 95 89 / 33 13.6 25.5 live room (0) 1.1 99 / 99 / 63 / 98 / 92 45 / 56 20.8 24.0 live room (10) 1.6 99 / 99 / 62 / 98 / 93 47 / 48 15.4 25.2 1600960 resolut kitchen (0) 4.6 99 / 99 / 58 / 99 / 96 16 / 30 5.4 24.9 kitchen (10) 7.3 99 / 99 / 56 / 98 / 95 34 / 36 3.7 26.8 move light (0) 4.5 99 / 99 / 64 / 98 / 96 25 / 33 5.3 23.9 move light (10) 7.4 99 / 99 / 63 / 98 / 94 26 / 43 3.4 25.9 live room (0) 4.6 99 / 99 / 64 / 99 / 91 14 / 64 5.2 24.3 live room (10) 6.6 99 / 99 / 62 / 99 / 92 15 / 58 3.8 25.5 tabl iii. fpga perform result distribut rai tracing. fpga implement tabl ii. abbreviations: pri - primari rays, ao - ambient occlusion, dif - diffus inter-reflection. scene (rai type) # cach hit rate (%) memori fp mrays/ rai (l1 nt, l1 list, traffic (mb/s) (m) l2 t&i, ti, tex.) (non-tex. / tex.) 800480 resolut confer (pri) 0.7 99 / 99 / 65 / 99 / - 62 / 0 27.5 21.1 confer (ao) 13.0 98 / 99 / 78 / 99 / - 43 / 0 1.7 23.3 confer (dif) 24.2 91 / 98 / 66 / 96 / - 468 / 0 0.7 18.9 sibenik (pri) 0.7 99 / 99 / 73 / 97 / - 30 / 0 27.9 21.4 sibenik (ao) 13.0 99 / 99 / 85 / 97 / - 26 / 0 1.8 23.6 sibenik (dif) 25.2 89 / 99 / 75 / 87 / - 605 / 0 0.7 18.0 1600960 resolut confer (pri) 3.0 99 / 99 / 64 / 99 / - 20 / 0 7.0 21.7 confer (ao) 52.2 99 / 99 / 82 / 99 / - 24 / 0 0.4 23.4 confer (dif) 97.9 92 / 99 / 73 / 97 / - 420 / 0 0.2 20.4 sibenik (pri) 3.0 99 / 99 / 73 / 99 / - 8 / 0 7.0 21.7 sibenik (ao) 52.2 99 / 99 / 90 / 99 / - 8 / 0 0.4 23.6 sibenik (dif) 100.9 90 / 99 / 78 / 90 / - 527 / 0 0.2 20.4 mrays/s. measur memori traffic bandwidth ob- serv 8605 mb/s. scene includ textures, memori traf- fic increas textur fetching. case diffus inter- reflect rays, memori traffic increas lower rai coher fig. 10. sampl imag static test scenes: confer (cour- tesi anat grynberg greg ward) sibenik (courtesi marko dabrovic). imag render ambient occlusion. fig. 11. captur imag render displac map (left) displac map (right). imag [kwon et al. 2014]. rai types. however, perform degrad caus lower rai coher large, believ mimd- style unifi t&i architectur robust perform regardless rai types. frame rate high resolut (1600960) approxi- mate 4 lower low resolut (800480) 4 increas number rays. however, ray-trac per- formanc (mrays/s) slightli higher higher screen resolu- tion increas cach hit rates. high resolut decreas memori traffic non-textur data increas rai co- herenc [wald et al. 2001], slightli increas memori traf- fic textur data higher resolut requir finer textur level [park et al. 2011]. taken together, though, high resolut decreas memori traffic, lower memori traffic non-textur data increas memori traffic textur data high resolut (tabl ii). reasons, higher screen resolut slightli increas ray-trac perfor- mance, consider decreas overal memori traffic. result suggest addit power consumpt off- chip memori access decreas screen resolut increases. measur result quadtre displac map bart kitchen scene [lext et al. 2001] (figur 11). mod- acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014. raycore: ray-trac hardwar architectur mobil devic 11 ifi floor textur map 512512 height map. displac map mode enabled, raycor fpga ver- sion achiev perform 1820 mrays/s, approxim 30% increas memori traffic access height map. result indic architectur render quadtre displace- ment map real-tim rate small overhead. finally, compar perform fpga prototyp state-of-the-art mobil ray-trac hardwar architectur [lee et al. 2013]. whit rai tracing, sgrt [lee et al. 2013] demon- strate 1.3-2.1 fp 45 mhz virtex-6 lx760 chips, raycor achiev 13-15 fp 84 mhz virtex-6 lx550 chips. assum clock frequenc number fpga chips, sgrt achiev 4-7 fps. therefore, believ fpga prototyp effici current sgrt prototype. 5.2 kd-tree construct perform fpga prototyp section, perform kd-tree build unit scene shown figur 1. scene design mobil 3d graphics, triangl count scene 0.6 k64 k. kd-tree construct scratch. leaf node best split node costli split [wald havran 2006] number triangl leaf node less. accord result tabl iv, kd-tree build time fpga prototyp grow approxim linearli primit count. longest time 117.9 ms transpar shadow scene 64 k triangl (the imag figur 1). further- more, memori traffic scene low: 36 mb/frame (the transpar shadow scene). result mean asic version tbu 500 mhz updat bench- mark shown figur 1 frame rate 50 fp more, with- high memori bandwidth requirements. therefore, real-tim rai tabl iv. kd-tree construct perform tbu scene figur 1. singl tbu 84 mhz experiment. scene number kd-tree build memori traffic triangl time (ms) (mb/frame) glass room 608 1.6 0.1 gloss 3552 3.6 0.9 light attenu 6128 10.1 2.8 self illumin 6140 9.0 2.3 chess 6604 9.2 2.9 veget 6912 11.2 2.8 jewel 8770 11.7 2.9 orgel 9103 20.3 5.8 landscap 12023 17.7 4.7 watch 12552 19.5 5.4 cup 12916 25.6 7.7 shade normal 15142 24.2 6.6 opac materi 15142 26.5 6.9 bulb 16056 27.5 8.1 desk lamp 17154 27.5 8.6 water ui 17833 28.6 10.0 christma tree 19174 37.1 10.7 chair 24014 40.9 13.0 fractal flower 42651 77.6 23.6 transpar shadow 63842 117.9 36.1 trace dynam scene mobil devic facilit tree build hardware. 5.3 perform evalu raycor asic version comparison approach us metric d-rpu [woop et al. 2006a] evalu perform architecture. expect perform rtu 500 mhz time faster fpga imple- mentat differ clock frequenc (84 mhz 500 mhz) number rtu (4 6). additionally, ex- pect perform tbu 500 mhz time faster fpga implement clock frequency. rai trace embarrassingli parallel, scalabl suffici memori bandwidth. rtu tbu (with 30 fps) requir 1.1 gb/ memori bandwidth whit rai trace static scene shown figur 9 kd-tree construct benchmark shown figur 1, respectively. thus, antici- pate scalabl perform rtu tbu. ray-trac perform rtus: metric, expect raycor asic version achiev 239 mrays/ (the kitchen scene) rtus. perform mean scene figur 9 render 56 fp hd 720p resolution. aforementioned, predict memori traffic de- grade overal perform benchmark scene whit- ted rai trace ao. cases, expect raycor asic version requir 1.1 gb/ rai tracing; valu obtain multipli highest valu section 5.1 nine. dual lpddr3-1333 modern ap provid memori band- width 12.8 gb/s, suffici rtus. case diffus inter-reflection, forecast faster memori system requir prevent memori bottlenecks. tabl v compar hardwar implement ap- proach term ray-trac performance. architectur achiev far better perform state-of-the-art mobil ray- trace hardwar architectures; fact, raycor perform par state-of-the-art rai tracer desktop platforms, de- spite requir smaller die area lower power consump- tion. note document power consumpt desktop plat- form thermal design power (tdp), tdp similar ac- tual maximum power consumpt graphic card [hagedoorn 2012]. however, raycor intern power consumpt list tabl v includ power consum off-chip memory. estim raycor power consumpt off-chip memori accesses, begin maximum power consumpt dual- channel lpddr3, 320 mw [wagner 2013]. previous mentioned, rtu requir 8% maximum band- width dual lpddr3 (12.8 gb/s) whit rai tracing. off-chip memori bandwidth requir lower previou desktop-bas hardwar architectures; off-chip mem- ori bandwidth requir rai raycore, d-rpu [woop et al. 2006a], rpu [woop et al. 2005] confer scene node/triangl data fetch 3 bytes, 64 bytes, 92 bytes, respectively. therefore, estim off-chip memori ac- cess raycor significantli increas total power consumption. raycor implement desktop platforms, us larger area, higher clock frequency, higher memori bandwidth, addit power resourc desktop offer achiev higher performance. nvidia state-of-the-art gtx 680 gpu (a singl chip version gtx 690) area 294 mm2, clock frequenc 1ghz, memori bandwidth 192 gb/s, tdp acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014. 12 j.-h. nah et al. tabl v. comparison ray-trac platform confer scene primari rays. desktop platform desktop ray-trac h/w mobil ray-trac h/w nvidia gtx690 intel mic d-rpu asic caustic r2100 reconf. simt raycor asic [gribbl navero 2013] [benthin et al. 2012] [woop et al. 2006a] [imgtec 2013] [kim et al. 2013] (ours) perform (mrays/s) 500 210 128 50* 4** 193 process (nm) 28 45 90 90 90 28 number core 1536 2 32 8 - 4 6 clock (mhz) 915 1200 400 - 50-400 500 area (mm2) 294 2 - 186 - 16 18 (rtu) + 1.6 (tbu) power consumpt (w) 300 (tdp) - - 30 (max) 1 * incoherent-rai perform common scene ** bunni model (69 k triangles) tabl vi. comparison sah-bas kd-tree construct approaches. cpu approach gpu approach dedic h/w [shevtsov et al. 2007] [choi et al. 2010] [hou et al. 2011] [wu et al. 2011] raycor asic (ours) scene (triangl count) bunni (69k) bunni (69k) robot (71k) bunni (69k) transpar shadow (64k) time construct kd-tree (ms) 27 50 38 59 20 kd-tree build method object median + exact sah spatial median + exact sah binned/exact sah binned/exact sah exact sah platform intel core2 duo 2 intel xeon x7550 4 nvidia geforc gtx280 tree-build unit (tbu) number core 4 32 (8 4) 240 1 bin + 4 sort clock (mhz) 3000 2000 648 (core) / 1476 (shader) 500 process (nm) 65 45 55 28 area (mm2) 143 2 684 4 576 1.6 (tbu only) power consumpt (w) 65 (tdp) 2 130 (tdp) 4 236 (tdp) 1 (total) 195w, 28 nm process technology. environ- ment, raycor desktop version us 17 larger area, 2 faster clock frequency, 22 higher memori bandwidth. thus, predict raycor desktop version exhibit higher perform current mobil version. kd-tree construct perform tbu: tabl vi com- pare tree-build hardwar kd-tree construct approaches. select benchmark scene similar triangl count (64 k71 k). tree construct time cpu/gpu ap- proach 2759 ms high comput power (e.g., 432 core cpu 240-core gpus); approach achiev 20 ms fewer comput resourc (one bin unit sort unit 1.6mm2 die size). bin sah kd-tree con- struction gener provid higher tree qualiti object/spati median kd-tree construction, hybrid approach (bin sah + exact sah) provid higher tree qualiti hybrid approach us object/spati median [shevtsov et al. 2007; zhou et al. 2008; hou et al. 2011]. additionally, architectur particularli advantag term memori traffic (up 36 mb/frame). result indic tbu use- ful rai trace dynam scene resource- energy-limit mobil hardware. next, compar kd-tree-bas tbu bvh-base approaches. recently, bvh construct algorithm introduc us cpu [gu et al. 2013], gpu [lauter- bach et al. 2009; karra 2012; karra aila 2013], dedic hardwar [doyl et al. 2013] algorithm achiev fast bvh build time (a milliseconds). however, difficult directli compar kd-tree build method bvh build meth- od kd-tree node bvh, describ section 3.1. preliminari comparison hardwar archi- tectur bvh-base methods, approach advantag cpu/gpu-bas method perform unit area unit en- ergy; cpu/gpu method us 32 cpu core [gu et al. 2013] many-cor gpu 2688 core [karra aila 2013] achiev high tree-build performance. additionally, tbu compar bvh build hardwar [doyl et al. 2013]; bvh build unit [doyl et al. 2013] requir 1 ms build bvh toaster scene (11 k triangles), asic vesion tbu requir 3 ms build kd-tree landscap scene (12 k triangles). estim area bvh build unit [doyl et al. 2013] 31.88 mm2 65 nm process technology; area tbu 1.6 mm2 28 nm process technology. consid process technolog differ (65 nm vs 28 nm), kd-tree build architectur competit bvh build architectur [doyl et al. 2013] perform unit area. 6. conclusions, limitations, futur work limit futur work: current version raycor limit like resolv future. first, mainli focus mobil rai trace pa- per. however, think raycor high- qualiti off-lin rendering. futur studies, like inves- tigat possibl wai acceler render techniques, bidirect path trace [veach guiba 1994] microp- olygon rai trace [djeu et al. 2011]. second, current version raycor consist fix pipelines. support shade effects, motion blur, defocu blur, procedur texturing, like directli combin raycor commod programm shader gpu. third, raycor includ effici memori sys- tem, incoher rai trace requir high memori traffic. reduc requir off-chip memori bandwidth, consid addi- tional ray-sort unit approach [moon et al. 2010; nah et al. 2012] increas rai coherence. acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014. raycore: ray-trac hardwar architectur mobil devic 13 fourth, current architectur us kd-tree ac- celer structure. kd-tree bvh us tree travers sah tree construct procedures, like extend rtu tbu architectur sup- port bvh future. additionally, interest acceler- at shadow rai travers specif travers order [ize hansen 2011; nah manocha 2014] instead current front-to-back order rtu architecture. fifth, precomput triaccel structur bottleneck larg dynam scenes. thus, hardwar implement raycore, like consid ad an- triaccel calcul unit tbu improv handl larg dynam scenes. finally, reduc 24-bit precis geometr trans- format reduc precis errors. like analyz impact accuraci results. conclusions: propos new hardwar rai tracer mobil devices. achiev high perform unit area unit energy, implement novel techniques, includ unifi t&i pipelin kd-tree build hardwar architecture. verifi architectur fpga asic evalua- tions. result raycor achiev perform im- provement order magnitud previou mobil ray-trac hardwar [kim et al. 2013]. integr ray- core unit mobil ap, releas near fu- ture. raycor mobil applic de- mand high-qual 3d graphics. gener complex light ef- fect current rasterization-bas method requir great deal programm effort; rai trace natur support ef- fect [shirlei et al. 2008], make program high-qual imag far simpler current methods. therefore, rai trace make program high-qual imag simpler ras- teriz methods. raycor provid suffici perform real-tim rai trace opengl es-lik api, raycor benefit type applications. future, like explor applic raycor architectur mobil ap- plications, games, user interfaces, augment reality. acknowledg research support siliconart basic sci- enc research program nation research foun- dation korea (nrf) fund ministri educ (nrf-2012r1a1a2004624). dinesh manocha support aro contract w911nf-10-1-0506, nsf award 0917040 1320644. like thank review help comments. refer timo aila tero karras. 2010. architectur consider trace incoher rays. proceed confer high-perform graphic 2010. timo aila samuli laine. 2009. understand effici rai travers gpus. proceed confer high perfor- manc graphic 2009. acm, 145149. carsten benthin, ingo wald, sven woop, manfr ernst, william r. mark. 2012. combin singl packet rai trace arbitrari rai distribut intel mic architecture. ieee transact visual graphic 18, 9 (2012), 14381448. jacco bikker. 2007. real-tim rai trace ey game developer. proceed ieee/eg symposium interact rai trace 2007. 110. shekhar borkar andrew chien. 2011. futur microprocessors. commun. acm 54, 5 (2011), 6777. solomon boulos, david edwards, j. dylan lacewell, joe kniss, jan kautz, ingo wald, peter shirley. 2006. interact distribut rai trac- ing. technic report uusci-2006-022. sci institute, univers utah. byn choi, rakesh komuravelli, victor lu, hyojin sung, robert l. bocchino, sarita v. adve, john c. hart. 2010. parallel sah k-d tree construction. proceed confer high perform graphic 2010. 7786. robert l. cook, thoma porter, loren carpenter. 1984. distribut rai tracing. siggraph 84: proceed 11th annual confer graphic interact techniques. acm, 137145. peter djeu, warren a. hunt, rui wang, ikrima elhassan, gordon stoll, william r. mark. 2011. razor: architectur dynam multires- olut rai tracing. acm transact graphic 30, 5, articl 115 (2011), 115:1115:26 pages. michael j. doyle, colin fowler, michael manzke. 2013. hardwar unit fast sah-optimis bvh construction. acm transact graphic (siggraph 13) 32, 4, articl 139 (juli 2013), 10 pages. venkatraman govindaraju, peter djeu, karthikeyan sankaralingam, mari vernon, william r. mark. 2008. multicor architectur real-tim ray-tracing. micro 41: proceed 41st annual ieee/acm intern symposium microarchitecture. 176187. christiaan gribbl alexi naveros. 2013. gpu rai trace ray- force. acm siggraph 2013 posters. 98:198:1. yan gu, yong he, kayvon fatahalian, gui blelloch. 2013. effici bvh construct approxim agglom clustering. proceed- ing 5th high-perform graphic conference. 8188. hilbert hagedoorn. 2012. geforc gtx 680 re- view. technic report. guru 3d. pages/geforc gtx 680 review. ziyad s. hakura anoop gupta. 1997. design analysi cach architectur textur mapping. sigarch architec- ture new (proceed isca 97) 25, 2 (1997), 108120. rehan hameed, wajahat qadeer, megan wachs, omid azizi, alex solo- matnikov, benjamin c. lee, stephen richardson, christo kozyrakis, mark horowitz. 2010. understand sourc ineffici general-purpos chips. sigarch architectur new (pro- ceed isca 2010) 38, 3 (june 2010), 3747. jiri havel adam herout. 2010. faster ray-triangl intersect (use sse4). ieee transact visual graph- ic 16, 3 (2010), 434438. vlastimil havran, robert herzog, hans.-peter. seidel. 2006. fast construct spatial hierarchi rai tracing. proceed ieee/eg symposium interact rai trace 2006. 71 80. qime hou, xin sun, kun zhou, christian lauterbach, dinesh manocha. 2011. memory-scal gpu spatial hierarchi construc- tion. ieee transact visual graphic 17, 3 (2011), 466474. warren hunt, william r mark, gordon stoll. 2006. fast kd-tree con- struction adapt error-bound heuristic. proceed ieee/eg symposium interact rai trace 2006. 8188. imgtec. 2013. imagin technolog ship caustic series2 r2500 r2100 rai trace acceler boards. technic report. acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014. 14 j.-h. nah et al. thiago iz charl d. hansen. 2011. rtsah travers order occlus rays. graphic forum (proceed euro- graphic 2011) 30, 2 (2011), 297305. yoon-sig kang, jae-ho nah, woo-chan park, sung-bong yang. 2013. gkdtree: group-bas parallel updat kd-tree interact rai tracing. journal system architectur 59, 3 (2013), 166175. tero karras. 2012. maxim parallel construct bvhs, octrees, k-d trees. proceed fourth acm siggraph / eurograph confer high-perform graphics. 3337. tero karra timo aila. 2013. fast parallel construct high- qualiti bound volum hierarchies. proceed 5th high- perform graphic conference. 8999. alexand keller, tero karras, ingo wald, timo aila, samuli laine, jacco bikker, christiaan gribble, won-jong lee, jame mccombe. 2013. rai trace futur be.... acm siggraph 2013 cours (siggraph 13). articl 9, 7 pages. hong-yun kim, young-jun kim, lee-sup kim. 2012. mrtp: mobil rai trace processor reconfigur stream multi-processor high datapath utilization. ieee journal solid-st circuit 47, 2 (2012), 518535. hong-yoon kim, young-jun kim, jiehwan oh, lee-sup kim. 2013. reconfigur simt processor mobil rai trace con- tention reduct share memory. ieee transact circuit system i: regular paper 60, 4 (2013), 938950. daniel kopta, konstantin shkurko, josef spjut, erik brunvand, al davis. 2013. energi bandwidth effici rai trace architec- ture. proceed 5th high-perform graphic confer (hpg 13). 121128. daniel kopta, joseph spjut, erik brunvand, al davis. 2010. effici mimd architectur high-perform rai tracing. proceed ieee intern confer design 2010. hyuck-joo kwon, jae-ho nah, dinesh manocha, woo-chan park. 2014. effect travers algorithm hardwar architectur pyra- midal invers displac mapping. comput & graphic 38 (2014), 140149. christian lauterbach, michael garland, shubhabrata sengupta, david lue- bke, dinesh manocha. 2009. fast bvh construct gpus. com- puter graphic forum 28, 2 (2009), 375384. won-jong lee, shi-hwa lee, jae-ho nah, jin-woo kim, youngsam shin, jaedon lee, seok-yoon jung. 2012. sgrt: scalabl mobil gpu architectur base rai tracing. acm siggraph 2012 talk (sig- graph 12). articl 2, 1 pages. won-jong lee, youngsam shin, jaedon lee, jin-woo kim, jae-ho nah, seok-yoon jung, shi-hwa lee, hyun-sang park, tack-don han. 2013. sgrt: mobil gpu architectur real-tim rai tracing. proceed 5th high-perform graphic conference. 109 119. jona lext, ulf assarsson, toma moller. 2001. bart : benchmark anim rai tracing. ieee graphic applic 21, 2 (2001), 2231. aqeel mahesri, daniel johnson, neal crago, sanjai j. patel. 2008. tradeoff design acceler architectur visual computing. proceed 41st annual ieee/acm intern symposium microarchitectur (micro 41). 164175. bochang moon, yongyoung byun, tae-joon kim, pio claudio, hye-sun kim, yun-ji ban, seung woo nam, sung-eui yoon. 2010. cache- oblivi rai reordering. acm transact graphic 29, 3 (2010), 28:1 28:10. g. m morton. 1966. orient geodet data base; new techniqu file sequencing,. intern busi machin com- pany. jae-ho nah, yun-hy jung, woo-chan park, tack-don han. 2012. effici rai sort trace incoher rays. ieic electron express 9, 9 (2012), 849854. jae-ho nah, yoon-sig kang, kwang-jo lee, shin-jun lee, tack-don han, sung-bong yang. 2010. mobirt: implement opengl es-bas cpu-gpu hybrid rai tracer mobil devices. acm sig- graph asia 2010 sketches. articl 50, 50:150:2 pages. jae-ho nah, jin-woo kim, junho park, won-jong lee, jeong-soo park, seok-yoon jung, woo-chan park, dinesh manocha, tack-don han. 2013. hart: hybrid architectur rai trace anim scenes. ieee transact visual graphic (2013). con- dition accept major revision. jae-ho nah dinesh manocha. 2014. sato: surface-area travers or- der shadow rai tracing. graphic forum (2014). preprint. jae-ho nah, jeong-soo park, chanmin park, jin-woo kim, yun-hy jung, woo-chan park, tack-don han. 2011. t&i engine: travers intersect engin hardwar acceler rai tracing. acm transac- tion graphic (proceed siggraph asia 2011) 30, 6, articl 160 (2011), 160:1160:10 pages. notebookcheck. 2013. appl a7 smartphon soc. technic report. notebookcheck. soc.103280.0.html. nvidia. 2013. whitepaper: nvidia tegra 4 famili gpu architecture. technic report. woo-chan park, dong-seok kim, jeong-soo park, sang-duk kim, hong- sik kim, tack-don han. 2011. design textur map unit effect mip-map level select real-tim rai tracing. ieic electron express 8, 13 (2011), 10641070. woo-chan park, jae-ho nah, jeong-soo park, kyung-ho lee, dong-seok kim, sang-duk kim, jin-hong park, cheong-ghil kim, yoon-sig kang, sung-bong yang, tack-don han. 2008. fpga implement whitted-styl rai trace accelerator. ieee symposium interac- tive rai tracing, 2008. 187187. steven g. parker, jame bigler, andrea dietrich, heiko friedrich, jare hoberock, david luebke, david mcallister, morgan mcguire, keith morley, austin robison, martin stich. 2010. optix: gener pur- pose rai trace engine. acm transact graphic (proceed siggraph 2010) 29, 4 (2010), 113. matt pharr greg humphreys. 2010. physic base render (sec- ond ed.). morgan kaufmann. karthik ramani, christiaan p. gribble, al davis. 2009. streamray: stream filter architectur coher rai tracing. asplo 09: proceed architectur support program languag oper systems. acm, 325336. alexand reshetov, alexei soupikov, jim hurley. 2005. multi-level rai trace algorithm. acm transact graphic (proceed siggraph 2005) 24, 3 (2005), 11761185. jorg schmittler, sven woop, daniel wagner, wolfgang j. paul, philipp slusallek. 2004. realtim rai trace dynam scene fpga chip. proceed acm siggraph/eurograph confer- enc graphic hardware. 95106. maxim shevtsov, alexei soupikov, alexand kapustin. 2007. highli parallel fast kd-tree construct interact rai trace dynam scenes. graphic forum (proceed eurograph 2007) 26, 3 (2007), 395404. peter shirley, kelvin sung, erik brunvand, alan davis, steven parker, solomon boulos. 2008. fast rai trace potenti effect graphic game courses. comput & graphic 32, 2 (2008), 260 267. siliconarts. 2013. raysort. technic report. acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014. raycore: ray-trac hardwar architectur mobil devic 15 josef spjut, andrew kensler, daniel kopta, erik brunvand. 2009. trax: multicor hardwar architectur real-tim rai tracing. ieee transact computer-aid design integr circuit sys- tem 28, 12 (2009), 18021815. joseph spjut, daniel kopta, erik brunvand, al davis. 2012. mo- bile acceler architectur rai tracing. 3rd workshop socs, heterogen architectur workload (shaw-3). kevin suffern. 2007. rai trace ground up. a. k. peters, ltd. synopsys. 2013. power optim design compiler. technic re- port. synopsys. toni tamasi. 2008. evolut graphics. nvision 08. art tevs, ivo ihrke, hans-pet seidel. 2008. maximum mipmap fast, accurate, scalabl dynam height field rendering. i3d 07: proceed 2008 symposium interact 3d graphic games. acm, 183190. tsmc. 2012. 28nm technology. technic report. eric veach leonida guibas. 1994. bidirect estim light transport. proceed eurograph render workshop 1994. 147162. carsten wachter alexand keller. 2006. instant rai tracing: bound interv hierarchy. proceed 17th eurograph workshop rendering. 139149. barri wagner. 2013. evolv mobil platform. jedec mobil forum 2013. ingo wald. 2004. realtim rai trace interact global illumina- tion. ph.d. dissertation. sarrland university. ingo wald, carsten benthin, philipp slusallek. 2003. distribut in- teract rai trace dynam scenes. proceed ieee sym- posium parallel large-data visual graphic 2003. 7786. ingo wald, solomon boulos, peter shirley. 2007. rai trace de- formabl scene dynam bound volum hierarchies. acm transact graphic 26, 1, articl 6 (2007), 6:16:18 pages. ingo wald vlastimil havran. 2006. build fast kd-tree rai tracing, o(n log n). proceed ieee/eg symposium interact rai trace 2006. 6169. ingo wald, thiago ize, steven g. parker. 2008. fast, parallel, asyn- chronou construct bvh rai trace anim scenes. com- puter & graphic 32, 1 (2008), 313. ingo wald, william r mark, johann gunther, solomon boulos, thiago ize, warren hunt, steven g parker, peter shirley. 2009. state art rai trace anim scenes. graphic forum 28, 6 (2009), 16911722. ingo wald, philipp slusallek, carsten benthin, marku wagner. 2001. interact render coher rai tracing. graphic forum (proceed eurograph 2001) 20, 3 (2001), 153164. turner whitted. 1980. improv illumin model shade dis- play. commun. acm 23, 6 (1980), 343349. sven woop, erik brunvand, philipp slusallek. 2006a. estim per- formanc ray-trac asic design. proceed ieee/eg symposium interact rai trace 2006. 714. sven woop, gerd marmitt, philipp slusallek. 2006b. b-kd tree hardwar acceler rai trace dynam scenes. gh 06: pro- ceed 21st acm siggraph/eurograph symposium graphic hardware. acm, 6777. sven woop, jorg schmittler, philipp slusallek. 2005. rpu: pro- grammabl rai process unit realtim rai tracing. acm trans- action graphic (proceed siggraph 2005) 24, 3 (2005), 434444. zhefeng wu, fukai zhao, xinguo liu. 2011. sah kd-tree construc- tion gpu. proceed acm siggraph symposium high perform graphic (hpg 11). 7178. kun zhou, qime hou, rui wang, bain guo. 2008. real-tim kd- tree construct graphic hardware. acm transact graphic 27, 5 (2008), 111. receiv decemb 2013; accept februari 2014 acm transact graphics, vol. 33, no. x, articl xx, public date: august 2014.