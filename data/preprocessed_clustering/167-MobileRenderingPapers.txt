volum render engin desktops, laptops, mobil devic immers virtual realiti system gpu-bas volum raycast iowa state univers digit repositori iowa state univers graduat these dissert graduat colleg 2012 volum render engin desktops, laptops, mobil devic immers virtual realiti system gpu-bas volum raycast christian john noon iowa state university, follow addit work at: biomed engin bioengin commons, engin commons, radiolog common dissert brought free open access graduat colleg digit repositori iowa state university. accept inclus graduat these dissert author administr digit repositori iowa state university. information, contact recommend citat noon, christian john, "a volum render engin desktops, laptops, mobil devic immers virtual realiti system gpu-bas volum raycasting" (2012). graduat these dissertations. paper 12419. volum render engin desktops, laptops, mobil devic immers virtual realiti system gpu-bas volum raycast christian john noon dissert submit graduat faculti partial fulfil requir degre doctor philosophi co-majors: human interaction; engin program studi committee: eliot winer, co-major professor jame oliver, co-major professor stephen gilbert chri hard tim bigelow iowa state univers ames, iowa 2012 copyright christian john noon, 2012. right reserved. tabl contents! list figures! v list tables! xi abstract! xii 1! introduction! 1 1.1! volum rendering?! 1 1.2! medic imaging! 3 1.3! benefit volum rendering! 4 1.4! real-world volum render applications! 7 1.5! motivation! 9 1.6! dissert organization! 12 2! volum render pipeline! 13 2.1! graphic opengl render pipeline! 13 2.2! volumetr data! 15 2.3! volum render pipeline! 17 2.3.1! segmentation! 18 2.3.2! gradient computation! 18 2.3.3! resampling! 19 2.3.4! classification! 21 2.3.5! coloring! 22 2.3.6! shading! 24 2.3.7! compositing! 25 2.4! volum render techniques! 26 2.4.1! iso-surfac surfac rendering! 27 2.4.2! imag splatting! 28 2.4.3! shear warp ! 29 2.4.4! textur slicing! 29 2.4.5! raycasting! 30 2.5! raycast execution! 30 2.6! real-world exampl raycasting! 31 3! advanc volum raycast api ! 39 3.1! advanc volum gpu-bas raycasting! 39 3.1.1! render speed optimization! 39 ii 3.1.2! gpu textur optimization! 42 3.1.3! light shadowing! 44 3.1.4! clipping! 47 3.1.5! render multipl volumes! 49 3.1.6! advancements! 51 3.2! volum render apis! 51 3.2.1! desktop apis! 52 3.2.2! immers virtual realiti apis! 54 3.2.3! mobil devic apis! 56 3.2.4! commerci open sourc volum render applications! 56 3.3! research issues! 58 4! methodology! 61 4.1! develop render core foundation! 62 4.1.1! openscenegraph! 62 4.1.2! dcmtk! 63 4.1.3! vr juggler! 64 4.2! desktop sandbox application! 65 4.2.1! architecture! 65 4.2.2! features! 65 4.2.3! user interface! 76 4.2.4! challeng contributions! 78 4.3! immers sandbox application! 80 4.3.1! architecture! 80 4.3.2! features! 81 4.3.3! user interfac interaction! 83 4.3.4! challeng contributions! 90 4.4! mobil sandbox application! 92 4.4.1! architecture! 92 4.4.2! raycast complications! 97 4.4.3! memori limitations! 101 4.4.4! gpu fragment oper bandwidth! 102 4.4.5! gpu asynchron process synchronization! 111 4.4.6! features! 116 4.4.7! user interface! 128 4.4.8! challeng contributions! 133 5! vipre! 135 5.1! vipr architecture! 135 5.1.1! vipr library! 137 5.1.2! vipredicom library! 138 5.1.3! vipreview librari ! 138 5.1.4! vipreraycast library! 139 iii 5.1.5! vipreotslic librari ! 140 5.1.6! viprevatslic librari ! 140 5.2! advanc volum raycast techniques! 141 5.2.1! space skip octrees! 141 5.2.2! phong illumination! 146 5.2.3! multi-pass render backfac depth rasterization! 148 5.3! bridg academ research volum render apis! 153 6! conclus futur work! 155 6.1! summari conclusions! 155 6.2! futur work! 158 6.3! acknowledgements! 158 bibliography! 160 iv list figur figur 1: bodi view virtual forens autopsi [71] (top). volum render utct chameleon dataset [45] (bottom-right). close view lung throat week old infant [71] (bottom-right). 2 figur 2: x-rai chest (top-right). ct imag chest (top-left). ultrasound abdomen (bottom-right). mri knee (bottom-left). 4 figur 3: illustr demonstr ct process set 2d slice gener 3d volumetr dataset. 5 figur 4: multimod view head, tumor, cortic activ fiber tract (right). view clip skull neurosurg plan (left). [104] 5 figur 5: volum render hurrican isabel [5] (top right). volum render frog (top left - images/frog2.jpg). volum render intern structur engin block (bottom left). volum render electrostat potenti surround fourth tandem repeat candida albican adhesin als5p (bottom right - ec.asm.org/content/vol9/issue3/cover.dtl). 6 figur 6: screenshot sinu endoscop system interface. 8 figur 7: screenshot user interfac bodyviz, volum render applic design surgic plan medic training. 9 figur 8: combin dose ct data. red contour target volum outline, blue contour rectum pink contour bladder (top). visual dose distribut area high ct values. bladder seen middl contrast agent ct scan highlight softer tissues. 10 figur 9: opengl render pipeline. ( opengl/gl_pipelin e.html) 14 figur 10: show differ isotrop anisotrop grid. 16 v figur 11: volum render pipeline. 17 figur 12: diagram raycast 2d rai cast eye-point perspect projection. imag courtesi [45]. 20 figur 13: diagram singl voxel c surround 8 neighbor voxel (left). diagram trilinear interpol comput valu c (right). ( en.wikipedia.org/wiki/trilinear_interpolation) 21 figur 14: volum render imag differ color transfer function opac transfer function. 23 figur 15: black pool ball dim room (left). black pool ball dim room small flashlight shown (right). 25 figur 16: iso-surfac surfac render human skull. ( www.aravind.ca/images/ivis_gallery/isocolour.png) 27 figur 17: exampl imag splat head dataset [190]. 28 figur 18: shear-warp sampl take place orthogon direct slices. 29 figur 19: textur slice sampl gener view-align slice parallel imag plane. 30 figur 20: pseudo code volum render algorithm raycasting. 33 figur 21: geometr represent volum surface. 34 figur 22: render volum grayscal color transfer function ray/volum intersect points. 34 figur 23: render volum grayscal color transfer function linear opac transfer function ray/ volum intersect points. 35 figur 24: render volum grayscal color transfer function linear opac transfer function resampl composit entir ray. 36 figur 25: render volum muscle/bon color transfer function linear opac transfer function resampl composit entir ray. 37 figur 26: octre divis tree representation. 40 vi figur 27: raycast octre hierarch enumer [47]. 41 figur 28: slice head dataset partit grow box (left). grow box set convert bsp tree (right). [55] 42 figur 29: hand dataset render phong illumin (left), shadow map (middle) deep shadow map (right). notic deep shadow map techniqu produc semitranspar shadows. 47 figur 30: interact explod view illustr increas degrees- of-explos [110]. 49 figur 31: multi-volum render independ slice volum depth sort slice slice stack. 50 figur 32: combin multipl dataset multipl render modes. left right: pre-integr illumination, transpar isosurfaces, pre-integr clip plane correspond 2d slice. 51 figur 33: architectur diagram desktop sandbox application. 66 figur 34: imag sandbox applic render bound box encapsul volumetr dataset. 67 figur 35: exampl differ volum render techniqu support desktop sandbox applic includ composit (top left), mip (top right) minip (bottom). 70 figur 36: chest caviti ct scan render differ color scheme includ cardiac, muscl bone, nih stern left right respectively. 73 figur 37: close view chest caviti nearest neighbor interpol (top). close view trilinear interpol (bottom). 74 figur 38: demonstr clip process. first, clip plane posit volum boundary. next, clip plane clip portion volume. then, clip plane clip portion volume. finally, right clip plane posit clip right portion volume. process repeat time clip plane updated. 75 vii figur 39: gener widget (top-left). color widget (top- right). window widget (bottom-left). clip widget (bottom-right). 77 figur 40: architectur diagram immers sandbox application. 80 figur 41: screenshot immers sandbox application. 82 figur 42: custom widget user interfac immers sandbox application. screenshot immers sandbox application. 86 figur 43: schemat gamepad control control immers sandbox application. 88 figur 44: origin architectur diagram mobil sandbox application. 94 figur 45: modifi architectur nativ io view manag instead intern graphicswindowio implement osg. 96 figur 46: screenshot mobil sandbox applic pre- render camera textur displai upscal render. 104 figur 47: 64 pixel low resolut render cardiac-ct dataset (top-left). 128 pixel low-medium resolut render (top- right). 256 pixel medium resolut render (middle-left). 512 pixel medium-high resolut render (middle-right). resolut render 703 pixel (bottom). 106 figur 48: 32 slice low sampl render cardiac-ct dataset (top-left). 64 slice low-medium sampl render (top- right). 128 slice medium sampl render (middle-left). 256 slice medium-high sampl render (middle-right). 355 slice high sampl render (bottom). 107 figur 49: comparison medium-medium qualiti render cardiac dataset exactli despit perform enhanc (top). comparison med-m qualiti render cardiac-ct dataset (middle). comparison med-m qualiti render manix dataset (bottom). 110 figur 50: screenshot custom background gradient support mobil sandbox application. 117 viii figur 51: linear opac transfer function (top-left). linear opac transfer function sharpen (top-right). normal opac transfer function (bottom-left). normal opac transfer function sharpen (bottom-right). 118 figur 52: muscl bone color transfer function (top-left). cardiac color transfer function (top-right). bone color transfer function (bottom-left). stern color transfer function (bottom-right). 120 figur 53: differ exampl mobil sandbox applic accur comput intersect point volum bound box. 121 figur 54: diagram elimin method sort clip plane bound box intersect points. 124 figur 55: screenshot incorrect desktop sandbox applic clip non-depth sort clip plane bound box (left). screenshot mobil sandbox applic proper depth sort (right). 125 figur 56: diagram scenegraph structur perform proper depth-sort volum rendering. 126 figur 57: inspector mobil sandbox applic launch (left). inspector anim widget yuria dataset load (middle). inspector anim complet (right). 129 figur 58: dataset view mobil sandbox applic launch (left). dataset view select dataset (middle- left). dataset view progress indic fade began spin (middle-right). dataset view progress indic fade checkmark fade dataset finish load (right). 131 figur 59: clip view mobil sandbox applic launch (left). clip view turn clip widget fade (middle-left). clip view (middle-right). clip view hit reset button (right). 132 figur 60: gener architectur diagram platform support vipre. 136 ix figur 61: vipredefens exampl render yuria dataset 15 fp (top). view dataset octre travers enabl render 56.8 fp (bottom). 144 figur 62: closeup screenshot cardiac dataset render vipredefens exampl applic (top). closeup octre travers enabl (bottom). 145 figur 63: vipredefens applic yuria dataset load default render (top). dataset view render forward differ phong illumin (middle). dataset view render central differ phong illumin (bottom). 147 figur 64: desktop sandbox applic demonstr render volum clip plane incorrectli (top). render paramet differ camera posit volum locat clip plane result proper render (bottom). 149 figur 65: vertex shader multi-pass render backfac rasterization. 151 figur 66: fragment shader multi-pass render backfac rasterization. 151 figur 67: vipredefens applic render volum multi-pass render backfac rasterization. overlai left backfac depth textur gener render pass. 152 x list tabl tabl 1: total number multiplications, addit subtract requir interpol method dimensions. tabl courtesi [4]. 20 tabl 2: breakdown render perform differ combin resolut sampl rate differ size datasets. 109 xi abstract volum render process visual characterist properti three-dimension (3d) volum data 3d object. extens us volum render take place medic field. physician combin medic imag technolog volum render techniqu non-invas examin patient critic medic decis diagnos find tumors, search blood clot monitor unborn fetuses. technolog comput power continu increas rapid rate, opportun provid volum render solut new innov platform mobil devic immers cluster environments. dissert present new volum render engin visual volumetr data multipl platforms. differ sandbox applic develop investig challeng architectur requir encapsul platform specif volum render logic insid engin abstract complex applic level. develop sandbox applic result complet volum imag process rend engine, vipre. encapsul platform specif implement insid engine, open sourc applic program interfac (apis) identifi worthi candid support engin volum render core. openscenegraph (osg) open source, cross-platform graphic toolkit support high perform render compon critic volum render pipeline. dicom toolkit (dcmtk) collect librari applic xii implement larg major dicom standard capabl examining, construct convert dicom imag files. finally, vr juggler cross- platform, open sourc virtual realiti softwar develop environ design specif creat execut immers applications. nativ osg support, applic data serialization, displai devic abstract cluster node swap barriers, vr juggler ideal api ensur adequ perform cluster configurations. architectur design place, sandbox applic develop investig platform specif challeng opportunities. desktop applic develop creat core volum render algorithm engin resampling, coloring, shade compositing. develop produc uniqu contribut includ real-tim windowing, gpu composit algorithm support gener graphic card convex clip plane algorithm support unlimit number clip planes. immers sandbox applic built volum render core design desktop application. modifications, volum render core successfulli implement immers applic result gpu- base volum raycast solut immers cluster environments. mobil sandbox applic investig prove despit improv comput power mobil devices, power support raycast lack 3d textur support. however, mobil devic fulli capabl support orthogon textur slicing. develop orthogon textur slice requir invent perform enhanc featur includ dynam xiii modif render resolutions, increment render loop, shader-bas clip algorithm support opengl es 2.0, intern backfac cull algorithm properli sort render geometri alpha blending. develop sandbox applic prove encapsul platform specif volum render logic possibl design architecture. result develop vipre, unifi solut perform volum render multipl platforms. vipr contain common volum render featur multipl render modes, color opac transfer function trilinear interpolation. contain advanc featur includ real-tim windowing, custom cpu gpu clip algorithms, accur depth sorting, dynam render qualiti modification, earli rai termin space skipping, phong illumin multi-pass render backfac depth rasterization. vipr go releas exampl document help lower barrier entri novic developers. go releas licens term allow us academ commerci communities. futur work vipr includ extend composit algorithm support insert surgic instrument volum surgic planning. additionally, integr segment routin allow new method interact segment routin train studi differ platforms. vipr extend support multipl volum independ clip visual segment data. final area optim includ reus previou render textur lazili render volum interact user interfac immers environments. xiv 1! introduct 1.1! volum rendering? volum render process visual characterist properti volumetr data three-dimension (3d) object. volumetr data consist two-dimension (2d) imag sampl consist intervals, stack sequenti form rectangular grid, similar lattic rubik cube structure. fundament differ surfac render polygon render exact surfac representations. volum render instead repres data larg block information, dynam interpret data render. exampl volum render seen figur 1. intern inform contain volumetr dataset consist defin surfac edges. volum render implementations, surfac volumetr data approxim geometr primitives, render well-establish surfac render techniques. downsid approach larg portion 3d dataset lost surfac approximation. additionally, modifi approxim surfac wai meant approxim comput need recomputed, caus larg drop render speed high comput expens recomput surfac approximation. order address issue, true volum render techniqu develop accommod entir 3d dataset 2d imag instead 1 displai small segment portion surface. volum render techniqu abl displai 3d inform render frame. however, new function came cost. new techniqu consist complex render algorithms, significantli increas render times. led advanc volum render softwar optim benefit continu increas hardwar acceleration. [1] volum render util industri area research involv 3d datasets. differ disciplin includ medic imag surgic planning, nondestruct evaluation, model simulations, movi special effects, archaeolog dig microbiolog visual few. far figur 1: bodi view virtual forens autopsi [71] (top). volum render utct chameleon dataset [45] (bottom-right). close view lung throat week old infant [71] (bottom-right). 2 largest area volum render research usag perform medic industry. medic imag applic volum rendering, continu drive forc volum render research past decades. 1.2! medic imag medic imag began 1895 william conrad rntgen creat x-rai wife hand. event began new area medic examin research known medic imaging. then, addit medic imag technolog magnet reson imag (mri), comput tomographi (ct) scans, ultrasound imag developed. imag techniqu seen figur 2. commonli medic imag techniqu volum render ct scan mri images. ct scan cross-sect imag obtain differ angl patient bodi ioniz radiat x-rai tube [2]. patient slide rotat x-rai tube, 2d slice imag gener consecut intervals. hand, mri gener emiss absorpt electromagnet energi radio frequenc (rf) rang electrostat spectrum [3]. differ area scan object absorb emit differ variations, form basi mri image. todai ct scanner mri machin typic gener scan 512 x 512 1024 x 1024 pixels. slice merg singl 3d represent volum render seen figur 3. 3 1.3 benefit volum render advanc medic imag technolog allow physician insid patient, non-invasively. imag techniqu help physician discuss examin patient assist make diagnos procedur decisions. represent instrument find tumors, search blood clot monitor unborn fetuses. physician figur 2: x-rai chest (top-right). ct imag chest (top-left). ultrasound abdomen (bottom-right). mri knee (bottom-left). 4 began 2d imag technologies, need render dataset 3d apparent. physician want abl interact data (rotate, zoom, fly through) add color opac distinguish differ tissu types. hence, volum render possibl solution. physician abl interact data inspect level, progress includ embed surgic tool scalpel trocar insid volum surgic figur 3: illustr demonstr ct process set 2d slice gener 3d volumetr dataset. figur 4: multimod view head, tumor, cortic activ fiber tract (right). view clip skull neurosurg plan (left). [104] 5 plan seen figur 4. finally, haptic feedback integr volum render technolog creat surgic simul surgeon practic operations. [4] area research benefit volum render includ complex model system simul differ phenomena ocean turbulence, precipitation, hurrican acid rain studi atmospher trend figur 5: volum render hurrican isabel [5] (top right). volum render frog (top left - volum render intern structur engin block (bottom left). volum render electrostat potenti surround fourth tandem repeat candida albican adhesin als5p (bottom right - 6 anomali [5]. educ institut us volum render studi intern anatomi animals, elimin need children physic dissect (e.g., frogs) [6]. nondestruct imag visual mummi help scientist studi mummif techniqu damag [7]. geologist visual geolog inform like porosity, pressur temperatur [8]. microbiologist visual high-resolut dataset microscop organ disturb [9]. area research produc uniqu datasets, volum render gener visual (see figur 5), allow area reap benefit provides. 1.4! real-world volum render applic benefit volum rendering, real-world applic medic industri prove it. applic sinu endoscop system, bodyviz radiotherapi dose distribut system. sinu endoscopi system, seen figur 6, standalon desktop applic us volum render assist physician sinu surgeri plan patient educ [10]. difficult cases, care plan surgeri necessari reduc field view. therefore, strive provid surgeon realist visual interact framer plan surgeri take place. preoper plan 102 case claim close resembl intraop situation. bodyviz standalon volum render application, figur 7, allow visual medic imag data preoper surgic plan 7 medic anatomi student learning. user interfac control xbox 360 control creat lower learn curv users. bodyviz navig skin, past bones, arteries, blood vessel organ fly patient bodies. softwar creat visual clip plane insert virtual surgic tool maneuv intern structur patient anatomy. final applic virtual realiti (vr) (figur 8) construct improv understand spatial relationship patient anatomi calcul dose distribut treatment plan radiotherapi (rt) [11]. vr us interact volum render displai patient anatomi volum rt dose distribut volum simultaneously. additionally, surfac figur 6: screenshot sinu endoscop system interface. 8 line render rt structur target volum organ risk intermix volum rendering. instal network room haukeland univers hospit daili rt confer held, make stereo-scop view treatment plan data clinic case possible. type dataset difficult repres accur geometr surface. instead repres dataset defin surface, volum render techniqu develop render volumetr data natur form. 1.5! motiv benefit volum render area medic imaging, surgic planning, nondestruct evalu simul immense. student figur 7: screenshot user interfac bodyviz, volum render applic design surgic plan medic training. 9 longer need dissect anim learn intern structure, fossil extract ground damage, virtual autopsi perform determin caus death, medic student perform neurosurgeri virtual simul on. scenario possibl today, unfortunately, major need technolog day-to-dai basi reasons. primari reason advanc high-end volum rendering, major exist avail softwar applic render applic program interfac (apis). research tremend job push boundari possibl volum render (chapter 3), advanc have, part, remain academ public limit softwar offerings. order allow stakehold involv figur 8: combin dose ct data. red contour target volum outline, blue contour rectum pink contour bladder (top). visual dose distribut area high ct values. bladder seen middl contrast agent ct scan highlight softer tissues. 10 volum render extend work, benefici access technology. volum render techniqu complex requir stakehold implement render engine. reason technolog wide avail current volum render softwar api design specif high-end desktops. advanc game technolog widespread adopt 3d movies, immers virtual realiti system prevalent. additionally, mobil comput devic ipad android tablet distribut hospit school worldwid [12, 13]. devic power drive complex volum render scenarios. open sourc commun littl nativ support differ platforms. expand reach technology, volum render engin need built support multipl comput platform begin stage development. therefore, advanc volum render featur added, platform benefit immediately, requir multipl volum render engin support individu platform. additionally, api gener built directli opengl, support geometri file format natively. import consider develop need intermix surgic tools, virtual environ intric surfac model volume. consid api design issu development, volum render engin benefit larger audienc platforms. volum render engin support multipl platform free public, develop build uniqu nativ interfac support 11 multitud volum render applic disciplines. volum render engin lower barrier entri research develop alike. individu abl us engin advanc volum render techniques, instead focu effort user experi user interfac design, extend applic support multipl disciplines. competit foster innovation, make volum render access research developers, benefit. 1.6! dissert organ remaind dissert organ follows: chapter 2 present discuss volum render pipeline, volum render techniqu raycast execution. chapter 3 present in-depth literatur review advanc gpu volum rendering, differ platform challenges, current volum render api identifi research issues. investig challeng abstract platform specif volum render core applic level, sandbox applic built common architectur discuss chapter 4. chapter 5 present volum imag process render engin (vipre). finally, dissert conclud summarized, conclus form futur work defin chapter 6. 12 2! volum render pipelin 2.1! graphic opengl render pipelin complex volum rendering, imper basic understand graphic knowledg opengl render pipeline. graphics, known rendering, process gener imag 3d geometr scene. scene contain differ objects, individu characterist render geometry, texture, light shading. scene set up, pass render program process inform singl digit image, frame. graphic application, render process continuous, mean frame render sequenti applic terminated. better understand render process, diagram opengl render pipelin seen figur 9. geometri data (vertices, line polygons) follow geometri path includ vertex oper primit assembly. pixel data (pixels, imag bitmaps) instead travel imag path includ pixel transfer oper textur memori allocation. path combin raster stage, undergo fragment oper final written framebuffer. follow detail descript kei stage render pipeline. begin frame, data initi repres displai list, geometri pixels. vertex data geometri 13 direct vertex oper stage render process. vertex transform primitive. vertex reproject posit 3d world posit screen. enabled, complex oper perform gener textur coordinates, comput light characterist materi properties. primit assembl handl clip cull operations. clip remov part line and/or polygon scene fall clip plane (e.g., viewabl certain viewpoint). cull perform clip remov and/or face polygon depend mode specified. completed, geometri primit complet color, depth textur coordin raster step. figur 9: opengl render pipeline. ( e.html) 14 time vertex data sent geometri path, displai list repres pixel data sent imag path pixel oper stage. pixel memori unpack current format proper number components. data scaled, bias process pixel map. finally, result written textur memori sent raster step. raster stage convert geometr pixel data fragments. fragment correspond particular pixel framebuff assign color depth. fragment store framebuffer, undergo seri fragment oper includ texturing, fog application, scissor test, alpha test, stencil test, depth-buff test, blend dithering. make tests, fragment written framebuff final displai pixel render frame. detail opengl render pipeline, refer opengl program guid [14]. 2.2! volumetr data volum render performed, acquir volumetr dataset. volumetr dataset gener consist set v sampl (x,y,z,v), refer voxels. voxel contain locat inform (x,y,z) valu v, properti volumetr data. valu voxel vari wide differ type datasets. instance, valu measur properti data color, 15 density, intensity, pressur heat. particular happen one- dimension (1d) values. valu v voxel multidimension data type veloc (x,y,z) color (r,g,b). add layer complexity, dataset vari time mean dataset four-dimension (4d) set sampl (x,y,z,t,v). [1] volumetr dataset gener isotropic, mean sampl taken regular interv orthogon axes. dataset sampl size vari equal ax refer anisotropic. type dataset seen figur 10. isotrop anisotrop dataset defin consist regular grid 3d arrai (also known volum buffer). 3d arrai figur 10: show differ isotrop anisotrop grid. isotrop anisotrop rectilinear curvilinear unstructur 16 combin volum render algorithm produc final 2d composit image. addit regular volumetr datasets, irregular dataset rectilinear, curvilinear unstructured, seen figur 8. volumetr dataset consist regular grids, volum render irregular dataset accomplish high comput expens [1]. 2.3 volum render pipelin volumetr dataset acquired, stage oper requir gener volum render image. stage volum render pipelin seen figur 11. import note mere gener volum render pipeline, stage requir given order. however, volum render implement includ stages. figur 11: volum render pipeline. 17 2.3.1! segment segment preprocess stage partit volumetr data multipl segments. example, segment routin tumor, locat bone tissu extract specif organs. order visual segment data volum rendering, render segment volum separ original, render segment volum surface, tag store voxel contain segment volumetr data. inform later render process chang visual segment voxels. typic accomplish chang color opac voxel comparison rest volume. segment usual perform render typic perform once. detail segmentation, follow references. [15-17] 2.3.2! gradient comput stage pipelin gradient computation. stage respons find edg boundari differ materi dataset. gradient 3d vector contain orient magnitud reveal variat voxel neighbor voxels. gradient voxel comput differ methods. commonli gradient method central differ gradient estimator, intermedi differ oper sobel oper [18-20]. central intermedi differ us neighbor voxel comput gradient rel easi implement. allow method 18 execut quickli continu gradient evalu render frame. however, method accur gradient estimator. sobel oper accur us 26 neighbor voxel comput gradient expens comput efficiency. oper better us case gradient voxel calcul store memori instead calcul frame. gradient comput voxel dataset, inform reus classif shade stages. 2.3.3! resampl complet segment gradient computations, render begin. render stage resampling. stage, imaginari rai emit pixel framebuff screen coordin view direct 3d scene. rai intersect volum simpli render background color. rai start sampl intersect volume, fi shown figur 12. addit sampl taken accumul specifi interv rai exit volum ii. unfortunately, sampl locat rare correl exact voxel location. reason, interpol method gener approxim valu sampl lie group voxels. commonli method nearest neighbor, trilinear interpolation, b-spline tricub interpol [21, 22]. comput complex method dimens seen tabl 1. nearest neighbor fastest method, produc 19 worst result perform interpolation. tricub convolut b-spline method produc highest-qu results, high comput expense. [4] real-tim applications, trilinear interpol reason method abil reduc alias problem littl comput overhead. trilinear interpol assum linear relationship interpol point neighbor point perform particular figur 12: diagram raycast 2d rai cast eye-point perspect projection. imag courtesi [45]. tabl 1: total number multiplications, addit subtract requir interpol method dimensions. tabl courtesi [4]. nearest neighbor trilinear tricub convolut b-spline multipli 0 7 52 52 add/subtract 3 14 39 39 20 order, instanc x, y, final z. demonstrate, voxel c seen figur 13 8 neighbor voxels. first, valu x-axi computed, c00, c01, c10 c11. next, valu interpol z-axi produc c0 c1. finally, c0 c1 interpol y-axi produc result valu c. again, oper comput order, produc result. 2.3.4! classif comput sampl voxel intens interpolation, step determin voxel go accumul rai voxel. stage render process call classification. classif power tool volum rendering, allow certain structur visualized, occlud objects. accomplish creat map rang voxel intens figur 13: diagram singl voxel c surround 8 neighbor voxel (left). diagram trilinear interpol comput valu c (right). ( 21 opac valu zero one. opac measur transluc object is. assign opac valu sampl voxel, certain structur dataset skip opac valu zero. hand, voxel opac zero, voxel move color color stage volum render pipeline. map voxel intens opac gener opac transfer function [18, 23]. design opac transfer function complex, depend type structur need visualized. histogram us tool design transfer function reveal high frequenc intens dataset lie. therefore, opac transfer function design accordingli expos certain part data. 2.3.5! color assign color voxel, red, green blue (rgb) transfer function (refer collect color transfer function) map voxel intens rgb color value. voxel properti map color well, gradient direct magnitude, commonli voxel intensity. import note goal color transfer function enhanc visual qualiti interpret volumetr data, achiev photo realism. therefore, color color transfer function defin red, green blue intens valu is. rgb valu combin produc final color voxel. generally, color us 22 uniqu transfer function. otherwise, same, grayscal imag produced. figur 14: volum render imag differ color transfer function opac transfer function. 23 combin interact opac color transfer functions, explor volum reveal interest characteristics. exampl volum render differ color transfer function seen figur 14. possibl us autom approach creat color transfer functions. et al. [24] stochast search techniqu assist user gener autom transfer functions. benefit wide rang color appli small rang voxel intens valu better distinction. manually, difficult time consuming, automat easier effective. 2.3.6! shade color assigned, time appli shade illumin model rgb voxel color. goal illumin model simul reflect light surface, effect observ look surface. example, imagin black pool ball like dim room. shine small flashlight it. area ball light shine go close white. effect seen figur 15. interact light surfac pool ball affect percept ball itself. allow exact shape contour surfac clearly. order appli shade illumin model, step calcul gradient sampl voxel interpol method section 2.3.3. commonli method trilinear interpolation. gradient appli combin light vector view direct shade 24 illumin model comput final rgb color sampl voxel. popular shade techniqu volum render phong [25] gouraud [26] shade models. method us ambient light, diffus reflect specular reflect combin light vector, gradient vector view direct comput shade rgb color sampl voxel interact light. finally, voxel color opac accumul sampl continues. 2.3.7 composit rai cast repres singl pixel, sampl voxel accumul singl rgba color (the rgba stand opac color). final stage volum render pipelin call compositing. combin voxel values, front-to-back back- to-front accumul function used. front-to-back composit figur 15: black pool ball dim room (left). black pool ball dim room small flashlight shown (right). 25 commonli offer perform enhanc back-to-front. front-to-back composit function seen equat 1: equat 1, total intens voxel i(x,y) sum ii multipli transpar (1-aj) encount previous ray. intens ii gener repres equat 2: equat 2 show intens ii function sampl point color opacity. front-to-back composit function continu evalu intens current sampl voxel, blend accumul voxel, continu process rai contain volume. major advantag front-to-back composit function earli rai termin resampl stop accumul voxel opac reach 1.0, suffici close value. reason resampl end voxel sampl longer affect accumul voxel color. easi volum render optim directli composit function. detail composit functions, refer [27-30]. 2.4! volum render techniqu research led develop volum render techniques, advantag disadvantages. indirect volum (1)i(x, y) = ii (1 j ) j =0 i1 i=0 n (2)ii = ci 26 render techniqu iso-surfac surfac rendering, direct volum render techniqu includ imag splatting, shear warp, textur slice composit raycasting. follow section introduc techniqu provid brief overview. 2.4.1! iso-surfac surfac render iso-surfac surfac render develop reduc complex volum render repres volumetr data surfac consist geometr primitives. repres data surface, method exist extract iso-surfac volumetr data, common march cube algorithm [31]. techniqu useful, figur 16: iso-surfac surfac render human skull. ( www.aravind.ca/images/ivis_gallery/isocolour.png) 27 drawbacks. first, geometr primit approxim surfac origin data. highli accur represent requir excess amount geometr primitives. accuraci lost visual small detail dataset. seen figur 16 ey sockets. drawback surfac represent used, origin volum inform repres surfac lost. additionally, difficult distinguish differ structur volum dataset shown surface. [1] 2.4.2! imag splat imag splat popular techniqu direct volum render initi propos westov [32] voxel repres overlap basi functions, commonli gaussian kernels. imag gener project basi function screen superposit pre-integr 3d kernels, refer 2d footprints. major advantag imag splat volum point need render stored. imag splat ignor volum space. however, imag splat lead color bleeding, aliasing, figur 17: exampl imag splat head dataset [190]. 28 blur issu associ blend splat seen figur 17. inform imag splatting, [33-35]. 2.4.3! shear warp shear warp volum render [36, 37] determin face volum data parallel view plane, cast rai voxel base plane shown figur 18. result plane imag project imag plane 3d transform 2d imag resampl operation. major advantag rel fast sampl voxel dataset orthogon sampling. downsid techniqu accur sampl lower imag qualiti techniques. 2.4.4! textur slice textur slice [38, 39] direct volum render techniqu gener viewport-align slice parallel imag plane view matrix updated, figur 19. unfortunately, time view matrix updated, viewport-align slice recomputed. composit slice together, figur 18: shear-warp sampl take place orthogon direct slices. 29 textur polygon slice blend back-to-front compositing. textur slice capabl produc higher qualiti imag previou techniqu good performance. however, techniqu requir recomput view- align slices, contain artifact volumetr clip us advanc lighting. 2.4.5! raycast raycast [40] direct volum render techniqu involv cast rai pixel view direct volume. intersect point computed, resampl composit accumul final pixel value. comparison techniques, raycast wide accept best qualiti volum render technique. additionally, support optim earli rai termin space leaping. 2.5! raycast execut parallel natur raycasting, ideal algorithm massiv parallel architectur central process unit (cpus) graphic process figur 19: textur slice sampl gener view-align slice parallel imag plane. 30 unit (gpus). pro con associ approach. cpu architectures, screen gener divid individu section process parallel process node multipl threads. node gener partial image, imag composit final imag appli directli framebuffer. [41-43] advanc gpu technolog past decade, commod graphic hardwar capabl perform entir raycast algorithm. possibl make compon opengl pipelin programmable, vertex shader fragment shader. reason gpu raycast attract intrins parallel effici communication, gpu calcul faster cpu [44]. however, power come price. gpu textur memori continu growing, continu bottleneck larg datasets. difficult fit 3d textur gpu memory, precomput gradient inform well. gpu offer tremend improv speed qualiti raycast volum rendering, present difficult challeng well. chapter discuss advanc gpu raycast volum render in-depth. 2.6! real-world exampl raycast stage volum render pipelin complex difficult comprehend visual inspect result stage. pseudo code visual comprehension, follow section investig real- world exampl volum render raycasting. example, 31 segmentation, gradient comput shade includ requir stage volum render pipeline. volum render pseudo code seen figur 20. perform volum render raycasting, stage acquir volumetr data. line 2 3 pseudo code import volum data build 3d textur information. data loaded, step creat volum geometry. line 6 accomplish gener geometr quad form 3d box object dimens match size volumetr dataset. initi set stage volum render seen figur 21. point, actual volum render performed. stage raycast requir manual comput rgba valu pixel framebuffer. accomplish rendervolume()method line 9 pseudo code. pixel, step comput intersect point rai volum (line 15 17 pseudo code). rai intersect volume, pixel set background color (line 21-25). intersection, step extract interpol intens voxel intersect point (line 38). intens convert rgb valu color transfer function (line 46). rgb valu combin opac 1.0 produc final pixel rgba valu (line 47). exampl process seen figur 22. result imag ideal. outsid voxel dataset visual resampl composit performed. 32 1 // import volum data construct 3d textur 2 importallvolumedata(); 3 build3dtexture(); 4 5 // creat geometr box dimens match volum 6 createvolumegeometry(); 7 8 // place continu render volum 9 void rendervolume() 10 { 11! ! // comput rgba color pixel framebuff 12! ! (all pixels) 13! ! { 14! ! ! // calcul rai direct camera matrix & pixel posit 15! ! ! vec3 ray_direct = computeraydirection(); 16 17! ! ! // comput intersect point rai & volum 18! ! ! vec3 intersection_point = computerayvolumeentrypoint(); 19 20! ! ! // intersection, set pixel background color & continu 21! ! ! (intersection_point false) 22! ! ! { 23! ! ! ! final_pixel_color = background_color; 24! ! ! ! continu pixel; 25! ! ! } 26 27! ! ! // set variabl composit 28! ! ! vec4 color = dest_color = vec4(0.0, 0.0, 0.0, 0.0); 29! ! ! vec4 dest_color = vec4(0.0, 0.0, 0.0, 0.0); 30! ! ! float remaining_opac = 1.0; 31! ! ! vec3 po = intersection_point; 32! ! ! vec3 step = computestepsize(); 33 34! ! ! // step rai front-to-back composit 35! ! ! (ray.insidevolume() true) 36! ! ! { 37! ! ! ! // intens sampl voxel posit 38! ! ! ! float intens = computeintensity(pos); 39! 40! ! ! ! // opac given intens 41! ! ! ! float opac = computeopacity(intensity); 42 43! ! ! ! // updat dest_color & remaining_opac voxel opaqu 44! ! ! ! (opac > 0.0) 45! ! ! ! { 46! ! ! ! ! color = computecolor(intensity); 47! ! ! ! ! color = color * opacity; 48! ! ! ! ! dest_color = dest_color + color * remaining_opacity; 49! ! ! ! ! remaining_opac = remaining_opac * (1.0 - opacity); 50! ! ! ! } 51! 52! ! ! ! // sampl posit rai 53! ! ! ! po = po + step; 54! ! ! } 55! ! ! 56! ! ! pixel_color = dest_color; 57! ! ! pixel_color.a = 1.0 - remaining_opacity; 58! ! } 59! } figur 20: pseudo code volum render algorithm raycasting. 33 figur 21: geometr represent volum surface. figur 22: render volum grayscal color transfer function ray/volum intersect points. 34 raycast process, stage improv render qualiti add opac transfer function. instead set opac 1.0, linear transfer function 0.0 1.0 entir rang volumetr data (line 41). result imag seen figur 23. implement opac transfer function, lower intens valu dataset air longer render opac 0.0. addit opac transfer function expos intern structur volume. however, case, intern structur volum missing. resampl composit included. medic datasets, intens correl tissu density. air, low densiti object, low intens bone high intensity. figur 23: render volum grayscal color transfer function linear opac transfer function ray/volum intersect points. 35 ad resampl composit raycast process, insid volum visualized. resampl composit longer stop intersect point rai volume, continu rai exit volume. sampl point ray, intens comput sampl point locat trilinear interpol (line 38). next, opac sampl point comput pass interpol intens opac transfer function (line 41). opac larger 0.0, sampl point composit (line 44). sampl point composited, interpol intens convert rgb valu color transfer function (line 46). color multipli opac (line 47), ad accumul destin color (line 48). voxel opac subtract remain figur 24: render volum grayscal color transfer function linear opac transfer function resampl composit ray. figur 24: render volum grayscal color transfer function 36 voxel opac (line 49). finally, sampl point rai comput step vectorth (x,y,z) increment sampl rai (line 53), resampl composit continu rai exit volum (line 35). rai exit volume, destin color remain opac rai combin appli pixel. accomplish pixel framebuffer, imag shown figur 24 generated. final improv resampl composit process add color volume. rememb goal volum render enhanc visual qualiti individu characterist interpret dataset, achiev photo realism. figur 19, grayscal color transfer function used. instead, figur 25 gener muscl bone color transfer function. figur 25: render volum muscle/bon color transfer function linear opac transfer function resampl composit ray. 37 comparison grayscal image, imag demonstr us color help enhanc visual qualiti dataset. 38 3! advanc volum raycast api 3.1! advanc volum gpu-bas raycast advanc gpu technolog past decad usher possibl perform gpu-bas raycast interact framerates. like replac slice-bas techniqu entir futur hardwar capabl continu increas current rate [45]. light this, advanc gpu-bas raycast relev dissertation. advanc broadli categor 1) render speed optim techniqu earli rai termin space skipping, 2) textur size optim textur compress large, out-of- core datasets, 3) light shadow effects, 4) clip techniqu plane-based, hinge-sl explod views, 5) multi-volum render surfac model depth opac peeling. method discuss detail. 3.1.1! render speed optim gpu-bas raycasting, earli rai termin (also known adapt termination) techniqu improv render speed termin rai pass entir volume. earli rai termin perform front-to-back raycast natur composit algorithm. whit [46] origin propos idea adapt termin raytrac algorithm. later on, levoi [47] integr earli rai termin front- 39 to-back volum raycast propos case applicable. case rai termin strike opaqu voxel. second case termin rai travers accumul opac reach user- specifi level (gener 0.1 0.01) color rai stabil longer affect accumul color. weiler et al. [48] report implement earli rai termin raycast algorithm improv render speed factor 4 depend dataset. techniqu improv render speed raycast call space skipping. techniqu built fact dataset contain coher region voxels, voxel opac zero. method encod 3d spatial coher voxel us octrees. octre tree data structur recurs subdivid 3d volum octants. lowest level octre lie voxel cubes, singl cube enclos neighbor voxels. node octre contain binari valu repres figur 26: octre divis tree representation. 40 region contain voxels. pyramid type structur volum render perform space skipping. exampl octre seen figur 26. meagher [49] octre volum render creat condens represent volume. volum render travers octre depth-first manner follow consist direct space. levoi [47] extend work repres volum complet octre render data imag order trace view rai observ posit octree. exampl singl rai travers levoi techniqu seen figur 27. figur 27: raycast octre hierarch enumer [47]. 41 addit method discussed, implement space skip investig [50-54]. particularli interest approach, li et al. [55] partit volum sub-volumes, grow box [56] approach partit volum adapt base voxel properties, figur 28. set grown box convert orthogon binari space partit (bsp) tree [57] render adapt partit sub-volum visibl order. bsp tree similar octrees, node contain subregion instead eight. space skip techniqu demonstr improv volum render factor five. 3.1.2! gpu textur optim mention earlier, bottleneck gpu-bas volum raycast larg dataset typic textur memori gpu. research figur 28: slice head dataset partit grow box (left). grow box set convert bsp tree (right). [55] 42 work techniqu suppress textur memori bottleneck issu bricking, multi-resolut volum compression. techniqu offer signific improv gpu textur memori effici certain cases, render performance. brick techniqu divid volum dataset chunks, call brick [58]. techniqu particularli suit gpu raycast deal dataset exce avail textur memory. fit brick avail textur memory, brick equal smaller avail textur memori gpu. brick load unload gpu textur memori rendered. render brick sequentially, textur memori exhaust entir volum rendered. unfortunately, approach lead significantli lower frame rates, bu architectur connect gpu, cpu main memori support brick high frame rate [59]. order reduc textur switch perform gpu, brick coupl addit techniqu multipl resolutions, adapt sampl compress [60-63]. multi-resolut render techniqu develop combin method includ bricking, octre uniqu textur caches. lamar et al. [64] propos multi-resolut sampl octre render block high resolut closest view point lower resolut away. boada et al. [65] propos similar techniqu creat octre volume, instead set resolut sub-volum data depend measures. inher problem block-bas methods, brick octrees, need us trilinear 43 interpol block boundaries. interpol block boundari requir individu block padded, result block overlaps, interpol accur [66, 67]. pad necessari interpolation, counterproduct result larger block sizes. avoid padding, ljung et al. [68] propos interblock interpol techniqu support direct interpol block boundaries. improv block-bas methods, multi-resolut techniqu us creativ textur cach design combin octre [69, 70], brick [71, 72] compress [73] accommod larg datasets. techniqu improv textur memori bottleneck us effici compress schemes. nguyen et al. [74] blockwis compress split volum small block equal size compress block individually. compress techniqu propos oper wavelet represent [75-77]. vollrath et al. [78] propos adapt textur map [79] reduc memori entir dataset, sampl distanc modifi rai pass differ resolut blocks. contrast, guth et al. [67, 73] block base wavelet compress render larg dataset interact frame rates. 3.1.3! light shadow light interact import volum render major impact spatial comprehens [80]. shadow aid spatial comprehens serv import depth cue [81]. goal 44 volum render achiev photorealism, us simul real-world light condit close possible. section discuss phong illumin model combin gradient calculations, follow volum render shadow techniqu final ambient occlusion. phong illumin [25] typic illumin model volum rendering. comput complex global illumination, simplifi direct illumin model used, illumin affect part scene consid light come directli source. comput phong illumin given voxel requir current voxel position, voxel gradient, voxel color posit light sourc [45]. final voxel color determin appli diffuse, specular ambient illumin voxel. addit inform phong illumin model, refer [82] details. improv visual depth volum rendering, addit shadow necessary. contrast shadow techniqu slice-bas volum render [83, 84], small research integr shadow gpu-bas raycast [45]. however, note shadow integr volum render raytrac system [85-87]. raytrac similar raycasting, rai travers account light interact virtual objects. raytrac capabl simul wide varieti high-fidel optic effects, reflection, refract scattering. however, raytrac outsid scope dissert comput complex perform raytrac interactively. techniqu 45 suit non-interact applic imag render slowli ahead time, imag anim film special effects. shadow techniqu implement volum raycast shadow mapping, origin present 1978 william [88]. shadow map image-bas approach add addit render pass render light sourc point view determin voxel closest light source. main render pass, sampl voxel undergo fragment-bas shadow test determin shadowed. benefit shadow map soft shadow approxim percentag closer filter [89]. shadow map allow effici shadow per-frag basis, capabl gener semitranspar shadows. support semitranspar shadows, opac shadow map develop store alpha valu instead depth stack shadow map [90]. advanc techniqu gener semitranspar shadow deep shadow map [91, 92]. deep shadow map us stack textur store depth opac layer shadow map. deep shadow map produc higher qualiti shadow shadow mapping, higher comput expense. additionally, deep shadow map produc artifact complex area volume. artifact elimin gener addit shadow layers, result decreas performance. comparison phong illumination, shadow map deep shadow map seen figur 29. 46 ambient occlus shade techniqu simul global light estim visibl light given voxel. vicin shade [93] ambient occlus techniqu pre-comput occlus voxel store valu 3d shade texture. desgrang engel creat computation expens version vicin shade combin ambient occlus volum composit occlus volum [94]. hernel et al. later propos local ambient occlus (lao) [85, 95] techniqu base cast rai direct non-transpar voxel specifi radial boundary. lao voxel increas rai intersect voxels. finally, ropinksi et al. [96] propos dynam ambient occlus color bleed local histogram altern phong illumination. 3.1.4! clip clip us techniqu volum render explor intern structur volume. volum render contain form figur 29: hand dataset render phong illumin (left), shadow map (middle) deep shadow map (right). notic deep shadow map techniqu produc semitranspar shadows. 47 volumetr clipping, basic clip plane [97, 98]. clip plane artifici geometr plane clip volum geometri specifi intersect points. advanc clip techniqu developed. mcinernei broughton [99] hing slice plane provid better contextu 3d spatial relationships. wang et al. [100] propos volum sculpt wai explor volum dataset carv complex geometri volume. weiskopf et al. [101] present depth-bas clip techniqu complex geometri perform volum clipping. konrad-vers et al. [102] deform clip plane virtual resect liver surgeri planning. addit depth-bas clip algorithm develop binari clip volum perform complex geometr volum clip [40, 101, 103, 104]. form clip us explod view volum data displac reveal hidden details. niedauer et al. [105] clip plane slice geometr model explod view architectur visualization. time, chen et al. [106] spatial transfer function deform volumetr data model anim purposes. islam et al. [107] extend work allow volum split sections. mcguffin et al. [108] deform strategi open up, spread apart peel awai section volumetr data. viola et al. [109] creat autom wai perform clip base composit strategi prevent object occlud import object. finally, bruckner grller [110] propos approach autom gener explod view reli extens object information, figur 30. 48 3.1.5 render multipl volum medic field, benefici acquir inform multipl sourc help medic diagnosis. however, integr multipl dataset unifi 3d volum nontrivial. difficulti li intersect dataset store textur memori sampl raycast process. techniqu develop suitabl strategi integr characterist multipl dataset [111-114]. techniqu explor differ wai combin overlap voxel data differ data intermix level (e.g. accumul level, illumin level, imag level) fusion tabl multipl properti store differ color channel 3d texture. kei differ techniqu lie volum combined. manssour et al. [115] took advantag imag technolog strength mri volum defin opac transfer function positron emiss tomographi (pet) volum color transfer function. previou techniqu help build strong foundat store multipl volum data, implement render multipl volum textur figur 30: interact explod view illustr increas degrees-of- explos [110]. 49 slice [116-120] fact easier implement raycasting. multi-volum slice-bas rendering, volum slice view- align singl volum rendering. slice depth sort share slice stack. finally, slice stack render back-to-front order blend framebuffer, figur 31. plate et al. [121] combin bricking, octrees, depth- peel textur slice improv performance. gener highest qualiti multi-volum rendering, raycast need implement instead textur slicing. beyer et al. [63] creat gpu-bas raycast techniqu support multipl volumes, segment mask view- depend clip render mode neurosurg applic shown figur 32. techniqu us combin depth peel [122] dynam shader gener perform multi-volum render [104, 123]. recent trend indic graphic program rapidli move awai fix function approach [124], certain techniqu built comput unifi devic architectur (cuda) [125, 126]. techniqu us cuda exploit sort-middl approach volum render perform figur 31: multi-volum render independ slice volum depth sort slice slice stack. 50 polygon tile entir softwar [127]. approach render 50 arbitrarili overlap volum current graphic hardwar achiev interact framerates. 3.1.6! advanc advanc gpu-bas volum raycast includ volum scatter [128-131], monte-carlo volum render [132-135], multipl gpu raycast [136-140] client/serv volum render [141-145]. method applic dissertation, note present literatur review advanc volum rendering. advanc brought new possibl area abl har power volum rendering. unfortunately, techniqu limitations. 3.2! volum render api advanc gpu-bas volum raycast area perform visual signific recent year push boundari volum rendering. advanc techniqu figur 32: combin multipl dataset multipl render modes. left right: pre-integr illumination, transpar isosurfaces, pre-integr clip plane correspond 2d slice. 51 published, avail gener public open sourc volum render api avail software. todai volum render api reli textur slice perform volum rendering. api truli support gpu-bas volum raycasting, design develop platform desktop high end commod graphic hardware. follow section discuss current avail volum render api broken follow categories: desktop apis, mobil devic api immers virtual realiti apis. section conclud descript popular volum render commerci open sourc applications. 3.2.1! desktop api open sourc volum render api current avail come wide rang function complexity. basic volum render sim voleon [146], add-on librari coin3d [147] evolv [148], built directli opengl. volum render api support 2d 3d textur slice object-align viewport-align slice render back-to-front compositing. api support opac color transfer function brick gpu textur memori optimizations. open sourc volum render engin thousand research world visual toolkit (vtk) [149]. vtk contain function sim voleon evolv opac color transfer function multi-thread cpu textur slicing, orthogon obliqu clip plane multipl volum rendering. vtk recent merg 52 gpu-bas volum raycast librari vtkedg [150] provid gpu-bas volum raycast solut community. however, gpu raycast current limit nvidia graphic card signific issu obliqu clip planes. imagevis3d [151] advanc volum render engin support multipl render mode 1d 2d transfer functions, isosurfac render special mode maximum-intens project (mip) slice views. imagevis3d provid multipl render gpu-bas implement object-align viewport-align textur slice volum raycasting. imagevis3d support orthogon clip light addit optim brick multi-resolut textur improv performance. unfortunately, volum render api imagevis3d available, built support imagevis3d application. construct typic open sourc manner sampl applic document support larg open sourc community. robust full-featur open sourc volum render api avail voreen [152]. support direct volum render (dvr), isosurfac rendering, mip rendering, phong tone shade illumin models, multimod datasets, time-vari segment datasets, 1d 2d opac color transfer functions, axi align clip plane preprocess capabl volum crop gradient calculations. volum render api avail gnu gener public licens (gpl) v2 design academ research purposes. 53 volum render api (vtk, imagevis3d voreen) fulli support gpu-bas volum raycasting. however, advanc volum render api fall short certain areas. vtk issu clip gpu- base volum raycast support complex features. imagevis3d offer document implement volum render core applic wide support open sourc community. final import shortcom volum render api design singl workstat desktop computers. provid support mobil devic immers virtual realiti environments. api complex difficult migrat addit platforms. 3.2.2! immers virtual realiti api immers virtual realiti system face uniqu challeng applic data serialization, devic displai abstraction, render integration, synchron (frame-locking) cluster perform overhead [153]. daunt challenges, coupl immers virtual realiti system perform challeng volum render difficult task. therefore, surpris avail open sourc immers virtual realiti volum render api limited. immers vr volum render solut implement past decad [154-158], remain activ development. vfive vector field interact visual environ [159-161]. vfive design visual analyz complic 54 three-dimension data flow velocities, isosurfaces, field lines, tube ribbon cave [162] environments. vfive render core built opengl recent expand support slice-bas volum rendering. stereoscop view cluster configur provid cavelib [163]. sourc code vfive avail limit form, project open sourc project activ community. immers vr volum render api flowvr [164-167]. flowvr hierarch compon orient middlewar enabl high perform execut parallel architectur cluster immers virtual realiti systems. flowvr synchron render transmit graphic primit render paramet render network traffic cluster nodes. common render librari modifi low-level draw routin us flowvr render object instead opengl advantag flowvr cluster methods. vtk flowvr exampl implementation. combin function flowvr vtk flowvr, immers vr volum render applic constructed. equal [168, 169] middlewar api design handl opengl multi- node render synchron high-perform visualization. support open sourc community, built-in support volum render evolv api, render activ passiv stereo integr support track systems. applic built equal framework run unmodifi visual rang small workstat large- scale immers virtual realiti system. 55 api support immers virtual realiti volum rendering, support advanc gpu-bas volum raycasting. vfive open sourc project, vfive equal support slice-bas volum rendering. flowvr indirectli support gpu-bas volum raycasting, requir modifi version vtk support flowvr render objects. addition, vtk gpu-bas raycast limit provid advanc capabilities. summary, current immers virtual realiti api support advanc gpu-bas volum raycasting. 3.2.3! mobil devic api previously, nativ volum render mobil devic simpli possibl hardwar limitations. however, hardwar todai mobil devic increas significantli power support volum rendering. unfortunately, volum render api mobil devic exist. applic develop volum render io platform, underli volum render code build applic avail open sourc community. reason volum render mobil devic solut creat like requir hardwar volum render mobil devic recent power enough. 3.2.4! commerci open sourc volum render applic commerci open sourc volum render applic develop assist medic profession. popular commerci desktop 56 applic visual volumetr medic data amira [170], vitrea [171] fovia [172]. applic built proprietari volum render api contain advanc featur multimod dataset rendering, light shadowing, gpu-bas raycasting. open sourc desktop applic altern commerci product includ osirix [173], volview [174], imagevis3d [151] voreenv [152]. voreenve, softwar product contain function commerci alternatives, sophist user interfaces. immers virtual realiti volum render solut commercialized. visual scienc group (vsg) develop extens open inventor softwar develop kit (sdk) known volumeviz [175] scaleviz [176] render larg volumetr dataset immers virtual realiti environments. avizo [177] line softwar product built volumeviz scaleviz provid commerci solut visualizing, manipul under-stand scientif industri volumetr datasets. vrvi [178] compani special immers virtual realiti volum render applic industri partners. commerci volum render applic mobil devic limited. search volum render applic android app market result zero actual volum render applications. io platform, applic available, imagevis3d mobil [179] osirix hd [180]. imagevis3d mobil like built imagevis3d render core osirix hd probabl built custom port vtk support io 57 platform. develop inform available. regardless, volum render api build applic available, want think twice so. comment applic negative. crash comment claim applic unusable. final human anatomi applic grai anatomi premium edit ipad [181] complet interact illustr anatom exploration. applic includ seven model new 3d mode like support surfac rendering. applic proof volum render wai mobil devices. however, mobil devic applic accept viabl option perform volum render investigation. 3.3! research issu base literatur review volum raycasting, advanc gpu-bas volum raycast volum render apis, research issu identified. are: 1. design construct unifi gpu-bas volum render raycast engin support multipl platform includ desktops, laptop immers virtual realiti system multipl oper systems. volum render develop perform custom manner comput platform. unifi volum render 58 engin provid develop global solut volum render multipl platforms. thus, research develop need familiar singl volum render solut creat deploi applic multipl platforms. 2. studi method develop gpu-bas volum raycast mobil devic support io platform. mobil devic quickli find wai hospit clinic world. doctor facil devic examin x-rays, write prescript note patient visits. devic carri patient medic histories, triag information, allergi data allow doctor order treatment theyr patient. addit volum render solut mobil devices, doctor addition us devic explain ailment anatomi patients, collabor review diagnos physician us surgic planning. 3. creat bridg volum render apis, multipl platform theoret academ research. common knowledg volum render api exist today. voreen, advanc volum render research perform academ commun publicli available. additionally, voreen support high-end desktop devices. provid open sourc volum render engin support multipl platform natively, 59 research us engin bridg academ research open sourc industri contributions. 60 4! methodolog construct volum render engine, challeng architectur design decis need considered. follow initi list requir engine: 1. cross-platform support windows, mac os x linux 2. stabl 3. render effici complex volum render 4. support desktops, laptop immers system mobil devic 5. encapsul volum render platform custom engin level base requirements, decis need choos low-level render api support engine, directx opengl. directx support multipl oper system platforms, opengl chosen. opengl stabl api implement c languag state machine, allow render efficiently. api, opengl support platform requir engin nativ opengl opengl embed system (opengl es). order encapsul platform customization, custom volum render code platform need abstract applic level handl insid engin directly. handl type platform encapsulation, open sourc api used. 61 4.1! develop render core foundat select open sourc api support critic compon engine, follow stipul impos ensur engin requir maintained: 1. support free proprietari licens term (lgpl, bsd, mit, etc.) 2. cross-platform support windows, mac os x linux 3. large, activ commun user 4. 5 year first, api need releas licens support free commerci softwar allow research develop incorpor engin projects. requir api support platform engin necessari ensur certain api limit scope engine. final stipul meant ensur qualiti apis. open sourc api larg user commun produc stabl reliabl codebases. base stipulations, differ open sourc api identifi support volum render engine. 4.1.1! openscenegraph openscenegraph (osg) [182] open source, cross-platform graphic toolkit develop high-perform graphic applic releas openscenegraph public licens (similar lgpl). provid object- orient framework opengl offer enhanc performance, scalability, portabl productivity. osg support high perform render 62 view-frustum culling, occlus cull opengl shader languag displai list critic volum render pipeline. geometri format import directli osg dynam plugin mechan (osgdb) allow intric model trocar scalpel render alongsid volumetr dataset. render core osg independ window system, make easi user add window-specif librari platform desktops, immers system mobil devices. thirteen year development, user commun grown 2,000 user develop activ contribut develop test osg. base features, osg ideal api handl low- level render volum render engine. 4.1.2! dcmtk dicom toolkit (dcmtk) [183] collect librari applic implement larg major digit imag commun medicin (dicom) standard releas bsd license. dicom medic imag standard format enabl storag medic imag inform pertin patient inform singl file easi exchang medic information. dcmtk capabl examining, construct convert dicom imag file send receiv imag network connection. dicom librari fulli cross-platform support windows, mac os x linux oper system others. develop dcmtk api began 1995, activ develop since. dcmtk librari larg 63 user commun serv dicom volum loader volum render engine. 4.1.3! vr juggler vr juggler [184, 185] cross-platform, open sourc virtual realiti softwar develop environ design specif creat execut immers applications. virtual platform vr juggler support displai devic abstract allow applic compil once, run multipl configur code changes. multipl render apis, includ osg, abl synchron data cluster node applic data serial mechanism. synchron frame handl swap barrier ensur cluster node swap buffer simultaneously. featur critic ensur adequ perform cluster configurations. vr juggler establish 1997 cross-platform api releas lgpl license. additionally, vr juggler fastest cluster synchron api avail todai [186]. featur nativ support osg, vr juggler chosen support volum render engin immers virtual realiti systems. underli api volum render engin determined, step implement volum raycast algorithm sandbox applic platform investig specif design implement characterist requir platform. desktop platform present 64 smallest known challenges, desktop sandbox applic developed. 4.2! desktop sandbox applic 4.2.1! architectur desktop applic serv initi develop sandbox construct volum raycast core functionality. figur 33, diagram softwar architectur sandbox applic seen. dicom toolkit (dcmtk) load dicom dataset files, gather necessari paramet pertain volume, extract intens valu dicom slice load valu memory. low-level volum render built directli osg. user interfac element window provid qt. render osg scenegraph qt widget handl qosgwidget interface. 4.2.2! featur featur built sandbox applic abil extract necessari inform volumetr dataset. dcmtk, dicom data, slice resolution, rescal slope, rescal intercept, pixel spacing, slice thick slice locat extract dicom file. information, sandbox applic adjust reformat voxel dicom slice, sort front-to-back order construct final 1d arrai volumetr data volum raycast algorithm. abstract volumetr data 65 reformat user, sandbox applic hide complex intern featur volum render api provide. volumetr data load memory, step process construct volum bound box geometri consist quadrilaterals, quads, encapsul volum seen figur 34. match dimens bound box dimens volumetr dataset easiest approach, usual inaccur voxel rare space equal dimensions. actual voxel space defin pixel space slice thick extract dicom data dcmtk. pixel space creat 3d map actual sampl dimens voxel dimensions. result, volum geometri typic need scale ax correl voxel mapping. scale adjust necessary, creat sampl issu fragment shader. issu figur 33: architectur diagram desktop sandbox application. 66 longer one-to-on map fragment shader rai sampl locat appropri interpol voxel valu location. locat scaled. therefore, fragment shader need account invers scale ax extract appropri voxel valu 3d volum texture. construct volum geometri calcul perform cpu. geometri undergo rasterization, geometr polygon map pixel, fragment, sent fragment shader. fragment shader receiv entri exit intersect point rai volume, depend camera posit insid volume. camera posit outsid volume, entri intersect point precomput figur 34: imag sandbox applic render bound box encapsul volumetr dataset. 67 raster receiv fragment shader. case, exit point rai need comput composit begin. wai handl exit point. wai involv comput rai direction, continu step rai rai exit volume. exit volum comput step ray. method typic volum render api today. altern approach precomput exit point rai start traversal. smit [187] ray-box intersect algorithm origin design raytracing. however, algorithm produc numer problem rai slope near zero axi produc artifact locations. william et al. [188] later refin smit algorithm properli handl numer instabl elimin artifact volum borders. fragment shader sandbox applic us william et al. version ray-box intersect algorithm precomput exit point ray. precomput exit point, raycast execut faster check iter resampl process rai exit volume. second wai calcul exit point perform rai start insid volume, occur camera locat insid volume. particular case, extra comput required. fragment shader receiv exit point locat instead entri point. entri point locat rai comput locat fragment camera position. order fragment shader know camera locat insid volume, notifi main application. therefore, render process 68 frame begins, oper determin camera insid volum record flag pass fragment shader uniform boolean. comput entri exit point ray-volum intersect requir travers ray. point, sampl applic support differ type render volum raycasting: compositing, maximum intens project (mip) minimum intens project (minip). composit involv sampl intens opac sampl point. voxel fulli transparent, color comput sampl voxel color opac accumul global rai accumul voxel. process continu rai exit volume. global rai accumul voxel set fragment color fragment framebuffer. sandbox applic us front-to-back compositing, abl advantag earli rai termination. detail composit earli rai termination, refer section 2.3.7 3.1.1 respectively. render techniques, mip minip, design visual specif aspect volumetr data comput similar wai manner. first, entir rai travers look minimum maximum intens value. then, minimum (minip) maximum (mip) intens valu render fragment color. mip render visual pulmonari nodul lung minip render aid visual intern lung structure. render techniqu (compositing, mip, minip) offer uniqu visual dataset provid physician 69 addit tool volum exploration. exampl render techniqu seen figur 35. import featur sandbox applic support 1d opac transfer functions. opac transfer function map opac rang voxel intens valu volumetr dataset. actual transfer function modifi differ techniqu includ linear blending, normal distributions, b-spline interpol stochast techniqu [24]. function valu extract regular interv 1d texture, gener 256 512 pixel resolution, load gpu figur 35: exampl differ volum render techniqu support desktop sandbox applic includ composit (top left), mip (top right) minip (bottom). 70 process fragment shader. 1d opac textur defin opac valu intens valu sampl voxel. determin opac sampl voxel location, intens computed, map opac opac texture. voxel opac larger zero, accumulated. todai volum render api us opac textur defin rang voxel intensities. ideal approach defin opac perform interact windowing. interact window process specifi minimum maximum rang voxel intens investig visualize. typically, voxel outsid window rang render all. example, user wish examin bone structur dataset bone intens valu rang 1000 2000 global voxel rang -2000 3000. window paramet result normal focu rang voxel intens 0.6 0.8. currently, volum render api handl modif intens rang rebuild entir opac textur load gpu time window paramet modified. actual transfer function interpol rang 0.6 0.8 instead 0.0 1.0. sandbox applic handl interact window effici manner. need rebuild opac textur perform windowing. instead, minimum maximum window paramet store directli fragment shader. comput opac compositing, intens minimum window paramet map valu opac textur intens maximum window 71 paramet map valu opac texture. opac textur requir rebuilt window paramet modified. somewhat limit user want control voxel intens outsid activ window area independently, instead set lower upper bound valu opac texture. case, sandbox applic allow user overrid default behavior manual specifi opac valu voxel intens activ window area. techniqu result higher perform current volum render api rebuild entir opac textur frame. sandbox applic support preset color transfer function includ common color scheme includ bone, cardiac, ge, grayscale, muscl bone, nih, red vessel stern. color scheme us vari color channel function enhanc differ visual characterist part volumetr dataset. time sandbox applic opac color transfer function modified, opac color textur reload gpu updat fragment shader. exampl color scheme seen figur 36. improv visual qualiti render close view volume, trilinear interpol implement sandbox application. easi implement code opengl requir necessari perform trilinear interpol 3d textur pass linear flag textur initialization. opengl automat perform trilinear interpol sampl 3d textur fragment shader. volum render api 72 us trilinear interpol sampl 3d volum textur comput perform directli hardwar offer tremend improv render qualiti littl perform overhead. differ qualiti nearest neighbor trilinear interpol seen figur 37. inform addit interpol techniques, refer section 2.3.3. final featur support desktop sandbox applic clipping. volum render api support orthogon clip plane vtk. vtk support orthogon obliqu clip planes. sandbox application, custom algorithm design support infinit number figur 36: chest caviti ct scan render differ color scheme includ cardiac, muscl bone, nih stern left right respectively. 73 orthogon obliqu clip planes. would, theory, allow develop figur 37: close view chest caviti nearest neighbor interpol (top). close view trilinear interpol (bottom). figur 37: close view chest caviti nearest neighbor interpol 74 us clip plane render volum sphere larg number adequ posit clip planes. sandbox applic us cpu-bas iter approach clip bound volume. clip plane defin singl point 3d space clip normal. clip plane defined, clip algorithm clip volum geometri clip plane. algorithm us follow step clip volum geometri clip plane: comput intersect point volum face edg clip plane, figur 38: demonstr clip process. first, clip plane posit volum boundary. next, clip plane clip portion volume. then, clip plane clip portion volume. finally, right clip plane posit clip right portion volume. process repeat time clip plane updated. 75 rebuild partial clip face new clip intersect points, remov fulli clip face cap clip portion volum new face. process continu clip plane chanc clip volum geometry. demonstr process seen figur 38. sandbox applic implement lazi clip save signific comput time recomput volum geometri clip plane updated. summary, clip algorithm support unlimit number clip planes, is, however, realist cap intra- frame comput time. mean clip plane activ time perform issu overhead perform clip operation. 4.2.3! user interfac user interfac interact volum render control desktop sandbox applic built qt. consist singl inspector widget support differ tab (general, coloring, window clipping). gener tab control featur render quality, raycast technique, bound box render background color. color widget simpl allow user select activ color tabl render volume. window widget control opac transfer function real-tim window controls. complic intellig widget clip widget. control logic clip includ clip enabled, activ clip plane, posit rotat control activ 76 figur 39: gener widget (top-left). color widget (top-right). window widget (bottom-left). clip widget (bottom-right). 77 clip plane wai reset clip planes. time activ clip plane modified, widget state updat repres current state new activ plane differ previou state. widget us polish separ structur group box help action discoveri bit clear. exampl inspector widget seen figur 39. clarif purposes, user interfac design mere proof-of-concept. littl develop time plan time spent try build useful, intuit profession look user interface. thrown quickli easier debug volum render logic. is, however, case desktop application. develop cycl sandbox applic dedic consider amount time break us cases, gener mockup spend addit time ad polish look-and-feel. 4.2.4! challeng contribut develop desktop sandbox applic certainli present difficult challeng way. comput exit point rai fragment shader. challeng debug equat fragment shader modifi color render fragment. step shader logic debugg simpli possible. issu aros depth sorting. default, osg provid proper depth sort scenegraph node enabl alpha blending. 78 therefore, imposs bound box clip plane render proper depth times. volum render librari todai exact problem proper depth render alpha blending. unfortunately, properli solv desktop application, futur section dissert provid particular issue. final major challeng develop desktop sandbox applic clipping. develop clip algorithm challeng difficult elimin round error try creat perfect geometr face intersections. algorithm took iter work properly. difficult challeng led uniqu contribut deserv recognition. real-tim window directli built fragment shader. allow opac color tabl manipul dynam zero overhead. volum render api need rebuild opac color tabl textur desktop applic simpli modifi uniform fragment shader. second major success fact desktop volum raycast logic work modern graphic cards. limit nvidia ati cards. render ti directli opengl specif compani specif extensions. largest contribut desktop applic certainli clip algorithm. volum render api requir us binari clip volum provid high-fidel clipping. unfortun approach requir addit check fragment shader sampl point rai render frame. drastic increas fragment oper 79 necessari clip volume. instead, desktop applic us lazili comput cpu-bas algorithm requir addit fragment operations. major perform improv compar previou clip plane implement volum render apis. 4.3 immers sandbox applic 4.3.1 architectur immers sandbox applic develop began complet desktop sandbox applic investig multi-platform capabl current engin design. goal implement featur immers applic determin complex produc volum render engin capabl abstract volum render code platform. architectur immers applic similar figur 40: architectur diagram immers sandbox application. 80 desktop applic seen figur 40. real differ qt user interfac api replac vr juggler. addition qosgwidget replac vr juggler osg app class integr osg render vr juggler drawmanag vr juggler window system. 4.3.2! featur develop immers applic went quickli origin architectur design held cases. tight coupl osg vr juggler prove us effect perform volum raycast real-tim larg cluster environments. small hurdl encount wai vr juggler side, describ section 4.3.4 challeng contribut section. function immers application, contain featur desktop application. includ dicom data extract reformatting, custom shader implement ray/volum entri exit intersect differ type rendering: compositing, maximum intens project (mip) minimum intens project (minip). addit featur includ color transfer function presets, custom opac transfer function real-tim manipulation, trilinear interpol sampl custom algorithm support unlimit number orthogon obliqu clip planes. exampl differ dataset configur seen figur 41. 81 littl custom develop cover immers applic volum render logic desktop applic reus recycl code modifications. develop consist port qt portion desktop applic vr juggler. thus, architectur design volum render engin multi-platform success. combin openscenegraph vr juggler, desktops, laptop immers virtual realiti system abl reli core volum render code perform volum render differ platforms. figur 41: screenshot immers sandbox application. 82 4.3.3! user interfac interact uniqu immers sandbox applic user interfac navig model explor volumetr dataset. understand design philosophi user interfac immers application, challeng creat virtual realiti user interfac examined. user interfac design immers environ difficult reasons. need augment virtual environment. interfac embed virtual environ immedi distract present difficult challeng imped primari goal dataset exploration. second challeng interact user interface. choos us secondari displai devic control user interfac send command immers applic ipad laptop, requir user focu secondari devic user interfac make manipulations. context switch ideal. however, embed user interfac insid virtual environ requir wai user manipul user interfac wand, joystick, gamepad devic list few. major challeng work virtual realiti environ effect navig virtual scene. wai provid interfac 2d control laptop interfac (poor immers experience), devic gyroscop control acceler direct (fluid precise), wand gamepad devices. common method navig immers virtual realiti applic wand gamepad. wand navig good support degre freedom movements, 83 challeng perform precis locat select menu navigation. additionally, wand gener come control button joysticks. gamepad hand control degre freedom motion wider arrai functionality. user interfac select requir point selection, travers joystick d-pad keys. finally, higher likelihood user have prior experi gamepad compar wand widespread adopt gamepad video game consoles. unfortunately, user interfac navig scheme truli ideal volum rendering, sort effectiveness. provid minimalist context switching, interfac need embed virtual environment. make restriction, easi select navig device. navig user interfac virtual environ wand challeng users, natur choic instead us gamepad. design decis finalized, step creat wai displai nonintrus user interfac user control gamepad. coupl osg vr juggler, support embed user interfac limited. new experiment library, osgqt, attempt render qt widget directli osg scenegraph. regrettably, robust mainstream applications. support locat osgwidget library, mainli design mous keyboard interact 2d interfaces. limitations, user interfac render interact need construct custom solution. 84 prebuilt support user interface, restrict user interfac need render manipulated. start point creat render widget easili turn necessari user interfac intrus immers environment. need render virtual environ ensur visibl occlud virtual scene. requir includ semitranspar widget fulli occlud volum enabled, quick easi navig learn curv low sharp profession look-and-feel widget design theme. stipul result widget seen figur 42. step design final version interfac seen figur 42. step us adob illustr mockup look-and-feel interact widget includ buttons, checkboxes, combo boxes, slider doubl sliders. design control widget (rendering, coloring, window clipping). mockup complete, began daunt task attempt replic exact look mockup gener illustr osg. unfortunately, build osg composit dynam text objects, border lines, backdrop quad round polygon gradient shading, appar look- and-feel produc osg hundr man hour invested. additionally, end goal creat user interfac immers sandbox application, open sourc user interfac librari osg. complic led robust effect solution. 85 dynam render user interfac runtime, control widget simpli imag pre-rend figur 42: custom widget user interfac immers sandbox application. screenshot immers sandbox application. custom widget user interfac 86 extern applicationi.e. adob illustrator? elimin need custom render user interfac render imag textur quad support alpha blending. downsid control widget prebuilt imag possibl interact widget combination. example, checkboxes, need control widget imag repres widget combinations. additionally, control widget changed, imag need re-rend includ new change. slider present differ problem continu meant infinit number states. wai avoid infinit state slider issu render control widget images, render separately. best look interfac interact scheme develop time, pre-rend control widget approach chosen final user interfac immers sandbox application. control widget state design render adob illustrator. imag rescal power-of-two (pot) dimens optim speed gpu cycl avail textur memory. graphic card support pot textur requir rescal textur load gpu memory. rescal caus signific render lag best start pot textur place. textur cycl 60 fp render lag. final task develop interact scheme pre-rend imag slider control gamepad. 87 number goal design gamepad interact us button possibl control states, anim visibl interact control widget times. joystick navig virtual scene left/right trigger control navig speed, d-pad 2 3 button dedic control user interfac interactions. schemat gamepad control control immers applic seen figur 43. simplist approach navig user interfac us direct acycl graph (dag) approach. user interfac start hidden state root, level, dag. second step user interfac second level dag. level figur 43: schemat gamepad control control immers sandbox application. 88 contain control widgets. level step control widget allow user navig interact widget manipulated. final level allow user directli manipul interact widget. travers downward dag deeper user interfac assign button 2 gamepad. button 3 assign travers backward dag step user interfac eventu hide it. navig interact widget manipul control d-pad. user interfac un-intrus possible, singl control widget displai time. navig differ control widget, user select title, us left/right d-pad kei cycl widget. add extra polish, anim usher exit control widget custom fade anim enter control widget us contrast fade animation. addit fade widgets, slid left right fading. activ control widget fade user interfac shown hidden. anim user interfac fluid look-and-feel origin design goals. summary, necessari design complic visual appeal user interfac immers application. need simpl control modifi shader set renderer. easili keyboard shortcut application. extra effort? answer li overal effect softwar application. sadly, user tend notic neg software, best 89 featur tend hidden function thought. render qualiti high, user interfac design compliment featur imped downgrad volum render experience. 4.3.4! challeng contribut challeng encount develop cycl immers application. move camera volume. vr juggler applic coupl osg recommend scenegraph node allow vr juggler control camera settings. approach work current volum render design. volum render requir volum stai origin camera move navig scene. accomplish this, draw function vr juggler modified. challeng came applic reach point abl render volum immers cluster environments. best wai issu volum wiggling. extens investigation, reason wiggl non-thread-saf parallel render vr juggler multi-pip configurations. pipe render concurr share uniform fragment shader defin camera view matrix. pipe uniqu camera view matrix, concurr render caus certain frame us pipe camera view matrix. produc uniqu effect caus volum wiggl 90 wrong camera view matrix used. temporarili solv issue, parallel render disabl mutex serial rendering. ideal perform hit taken elimin parallel rendering. possibl perman solut issu extend shader support multipl camera view matric us uniqu shader program uniform unique. final issu gpu render command queu graphic card cluster. fine non-clust comput swap buffer command forc gpu execut command queue swap framebuffers. downsid wai vr juggler tri swap buffers. swap buffer command sent node cluster once, expect node swap buffer receiv command. tell gpu execut queue render command node cluster time. problem queue larg perform volum rendering, cluster node finish render time. millisecond difference, produc tear effect cluster-bas rendering. ensur buffer swap precis time, gpu queue need time receiv swap command. allow buffer swap immediately, elimin tearing. ensur gpu queue empty, draw command need implement glfinish() complet forc gpu synchron send cluster swap buffer command master node. 91 challeng difficult solve, import note volum render specific. shortcom small design flaw vr juggler specif implementations. volum render engin design held develop immers application. allow immers sandbox applic render implement develop quicker desktop sandbox application. main contribut base develop immers sandbox application. custom user interfac design pre- render imag coupl direct acycl graph approach navigation. produc high qualiti widget short develop time. second possibl largest contribut work dissert accord literatur review, immers sandbox applic immersive, clustered, gpu volum raycast applic kind. cite work us differ approaches, libraries, cluster render api opengl serial techniqu perform volum rendering, gpu-bas volum raycast it. form orthogon view-align textur slicing. excit promis wai improv perform render qualiti discuss later sections. 4.4! mobil sandbox applic 4.4.1! architectur perform gpu-bas volum raycast mobil devic challeng task pursu hardwar limit current gener devices. 92 currently, stabl reliabl platform mobil devic applic develop appl io cocoa touch sdk. design develop tool coupl widespread adopt domin platform ideal candid investig volum raycast mobil devices. additionally, osg contain bind latest opengl es 2.0 spec possibl emb osg scenegraph insid io application. mobil sandbox applic develop began shortli complet immers sandbox applic major item investigate. mobil devic perform high comput load volum rendering. second item try determin volum render engin capabl abstract volum render code mobil platform. application, determin ipad 2 best hardwar develop with. comput power io devic time. origin architectur applic similar desktop sandbox applic seen figur 44. diagram similar architectures, reli io cocoa touch window user interface. depend graphicswindowio interfac osgview librari enabl render osg scenegraph directli insid cocoa touch. extens investig graphicswindowio api, determin coupl osg cocoa touch robust stabl support volum rendering. assumpt develop graphicswindowio interfac block develop 93 custom critic featur volum render includ opengl context touch interact gestur recognizers. assumpt provid complet abstract osg cocoa touch. class break model/view/control (mvc) design pattern cocoa touch side. better understand issu limitations, issu need discuss detail. cocoa touch heavili reli mvc paradigm design user interfaces. view gener view control handl creation destruct view, interact rest applic device. view take care draw intern content lai child views. view contain model entrust draw. opengl views, model refer opengl context view. cocoa touch applic design (xcode 4) allow quick drag figur 44: origin architectur diagram mobil sandbox application. 94 drop construct view subview user interfac application. view control class hook interact application, view control specif view manages. arm background mvc pattern design, let explor graphicswindowio class suitabl alternative. graphicswindowio class hide develop fact view control view exist. osg want consist api platform (qt, cocoa, cocoa touch, .net, etc.). unfortunately, crippl function osg widget cocoa touch import ways. first, wai attach gestur recogn addit view scenegraph view buttons, sliders, etc. second, osg view integr cocoa touch applic design emb views. finally, class allow custom framebuff settings. assumpt set major user want, set fulli expos end user. major limit led develop new custom integr osg cocoa touch built specif volum rendering. hide view control view osg abstraction, exact opposit approach taken. new coupl osg cocoa touch involv differ classes: vipreviewcontroller, vipreeaglview viprerenderer. seen figur 45. vipreviewcontrol handl gestur recogn view management. vipreeaglview creat standard uiview caeagllay underneath. caeagllay handl render opengl context 95 uiview. vipreeaglview manag creation destruct framebuff manipul applic design views. viprerender handl manipul opengl context render caeagllayer. this, osgviewer::view instanc creat embed viewer. mean osg respons intern event travers draw traversals. longer worri activ opengl context, creat framebuff swap buffers. control viprerenderer. custom necessari reason result outstanding. detail viprerender work perform volum rendering, discuss detail section figur 45: modifi architectur nativ io view manag instead intern graphicswindowio implement osg. 96 come. import thing mind sandbox applic coupl osg cocoa touch complet custom. custom develop futur benefit from, volum rendering. 4.4.2! raycast complic custom class cocoa touch osg completed, logic step attempt volum render scenegraph gpu-bas volum raycasting. initi approach try us design volum render previou sandbox applications. design includ 3d textur store voxel data 1d lookup tabl opac color fragment shader. fortunately, approach fulli support opengl es 2.0 specification. unfortunately, mobil devic market todai support 3d textures. specif set guidelines. hardwar manufactur decid part specif wish support implement. support 3d textures, io implement opengl es 2.0 specif support 1d textures. therefore, entir data structur design fragment shader previou sandbox applic work mobil sandbox application. approach us larg number 2d textur store voxel data perform raycasting. this, multipl slice voxel data need store singl 2d texture. example, largest 2d support textur 97 ipad 2 4096 x 4096 queri gl_max_texture_s opengl context. therefore, slice voxel data 512 x 512, singl textur accommod 64 slice voxel data. unfortunately, limit ipad 2 support instanti 2d textur fragment shader singl time. cap total voxel slice 512. like reason limit given medic dataset contain 200-500 slice data. theory, raycast 2d textur possible. led develop raycast implement 2d textures. summary, worked. reality, work fast enough. stack voxel data side-by-sid singl textur straight forward, extract voxel data textur cumbersom fragment shader. extract singl intens valu texture, pixel coordin need transform voxel coordinates. process desktop immers sandbox applications. however, data store 3d texture, voxel coordin need transform 2d stack textur coordinates. transform process slow add addit fragment oper necessari 3d textures. this, signific problem interpolation. problem data border slice incorrect interpolation. slice need pad accur valu interpol slice borders. order pad slice accurately, voxel border place slice. greatli reduc number slice fit singl 2d 98 texture. slice 514 x 514, total number slice fit 2d textur 49 allow 392 total slice render singl fragment shader. end textur memori limit prove issu second interpol problem. second problem 2d textur provid 3d interpolation. result, volum accur interpol orthogon views. suffer nearest neighbor interpolation. certainli implement neighbor voxel sampl interpol voxel valu correctly, simpli fragment oper avail interpol fragment shader. prove limit factor either. reason raycast work current ipad 2 simpli fragment oper avail softwar raycast real-time. transform pixel posit voxel posit map posit 2d textur costli perform real-time. implement raycast stack 2d textur approach 64 slice reach 1 frame second. poor performance, deem imposs current ipad 2 opengl es 2.0 hardwar support perform gpu-bas volum raycast real-time. develop approach investig discontinu possibl current hardware. excit failur raycast possibl right now, probabl soon. current differ 99 android devic market todai support 3d textures. mean abl volum raycasting, mean capabl horizon. mobil devic hardwar capabl continu grow histor grown, iterations, volum raycast absolut possibl approach sandbox applic took. investig volum render mobil devic conclud fact volum raycast perform real-tim mobil devices. instead, develop continu approach suitabl current state todai hardware, orthogon textur slice (section 2.4.4). view-bas textur slice consid lack 3d hardwar interpol 2d textur data. fragment oper requir render real-time. orthogon textur slice requir convers pixel coordin voxel coordinates. requir 2d textur store fragment shader slice. approach elimin larg portion fragment oper approach possible, move forward stage development. accomplish real-tim orthogon textur slice ipad 2, perform issu overcome. includ memori bandwidth, gpu fragment oper gpu asynchron process synchronization. follow section detail. 100 4.4.3! memori limit process perform orthogon textur slice requir number quad polygon stack order creat rectilinear prism equal size volume. accur wai repres voxel creat slice voxel section dataset. example, 512 x 512 x 256 size dataset, accur represent data render 256 slice dimens 512 x 512 z-direction, 512 slice dimens 512 x 256 y-direction, 512 slice dimens 256 x 512 x-direction. repres voxel data fashion requir uniqu set textures, axis. technic required, necessari textur order simpli revers opposit direct axis. creat set textur requir steps. step read voxel data dicom image. second step normal voxel data 0-255 rang (must singl byte opengl es 2.0) construct 1d arrai repres entir 3d dataset. finally, ax textur extrapol 3d dataset. process larg memori footprint quickli exce memori ipad 2 applic allow have. io applic allow certain memori automat termin io excess memori usage. requir in-depth investig memori manag scheme applic close oper runtime. step free memori wai longer necessary. example, 512 x 512 x 512 dataset, possibl load 101 dicom images, construct 3d dataset applic termin exceed alloc memory. however, dicom imag data releas data transfer 3d dataset, applic allow continue. step build textur set axis. unfortunately, wai remov 3d dataset data textur set created. possibl alloc textur set 512 x 512 x 512 voxels. time final textur set alloc applic termin prematurely. wai stai allow memori footprint applic point downsampl imag data texture. io allow non power-of-two (npot) textures, imag data scale 256 x 256 alloc texture. scale data down, memori capac exceed applic allow continue. 4.4.4! gpu fragment oper bandwidth set textur axi constructed, differ set quad built axi render textures. set quad place differ parent switches: posit switch quad default order neg switch quad revers order. switch scenegraph node capabl quickli enabling/dis child nodes. store set quad manner quickli enabl disabled, allow visibl quad quickli flip 102 orthogon view closest camera viewpoint change. notic posit xyz switch need enabl render frame cach textur gpu. otherwise, time view direct switches, signific lag cach textur gpu. mechan place dynam cycl visibl quad closest orthogon view, basic volum render fulli implemented. addit opac color transfer function lookups, applic abl render approxim 1 frame second (fps). far promis raycasting, near real-time. wai point possibl speed render process simpli render interact volume. applic entir gpu bound process power avail render 60 fps. point, determin main wai improv render speed interaction. wai render smaller viewport us opengl upscal result. second wai render quad turn opac contribut linearli number quad removed. method result higher frame rates, lower qualiti renders. interact volume, qualiti volum render provid highest qualiti imag possible. sacrific produc real-tim interact volum render todai hardware. 103 render smaller viewport meant render process need split multipl cameras. idea render smaller viewport pre- render camera, us main camera render singl quad pin bound main camera viewport. main camera quad render result textur pre-rend camera. us opengl bilinear hardwar interpol upscal smaller imag fit viewport main camera. wai accomplish attach pre-rend camera framebuff object. framebuff object gener figur 46: screenshot mobil sandbox applic pre-rend camera textur displai upscal render. 104 render need off-screen. result textur framebuff object attach fragment shader main camera quad. main camera quad sampl textur pixel us bilinear interpol upscale. exampl seen figur 46. depend size dataset rendered, differ resolut pre-rend camera result differ framerates. figur 47 below, support pre-rend resolut seen. resolut 64, 128, 256, 512 pixel 703 pixels. expected, higher resolution, better qualiti render. mind aspect ratio pre-rend camera viewport match main camera viewport. upscal aspect ratio 1:1 result addit inaccuracies. second wai speed render render quads. quad rendered, significantli gpu fragment oper take place. render quads, addit level switch requir neg posit axi switch. example, posit z-axi switch contain child switches, contain differ number quads. maximum number quad level 32, 64, 128, 256, 512 respectively. dataset contain 512 slices, posit z-axi child switch contain exactli preset number quad level. dataset contain 355 slices, z-axi child switch contain 32, 64, 128, 256, 355 quads. exampl lower qualiti switches, figur 48. 105 figur 47: 64 pixel low resolut render cardiac-ct dataset (top-left). 128 pixel low-medium resolut render (top-right). 256 pixel medium resolut render (middle-left). 512 pixel medium- high resolut render (middle- right). resolut render 703 pixel (bottom). 106 figur 48: 32 slice low sampl render cardiac-ct dataset (top-left). 64 slice low-medium sampl render (top-right). 128 slice medium sampl render (middle-left). 256 slice medium- high sampl render (middle- right). 355 slice high sampl render (bottom). 107 ! easi qualiti chang number quad rendered. shown imag fact result render exactli opac others, render significantli differ number quads. opac correct fragment shader. example, semitranspar grai quad render another, result composit quad black opaque. however, quad rendered, result quad grai semitransparent. ! effect happen remov slice volume. quad rendered, opac quad need increas composit volum render roughli opacity. opac correct used, render volum transparent. therefore, opac contribut quad high qualiti render 1.0 opac contribut quad medium-high qualiti render 4.0. assum cours medium-high qualiti render contain quad high qualiti counterpart. simpl correct fragment shader allow volum render opac significantli chang quad repres volume. pre-rend resolut volum quad qualiti plai import role improv speed volum rendered. individually, approach solv issu abl render volum interact 60 fp qualiti poor. benefit combin other. tabl 2 break differ size dataset 108 tabl 2: breakdown render perform differ combin resolut sampl rate differ size datasets. resolut qualiti cardiac (201 slices) cardiac-ct (355 slices) manix (460 slices) low low 60 fp 60 fp 60 fp low low - medium 60 fp 60 fp 60 fp low medium 60 fp 55 fp 50 fp low medium - high 55 fp 50 fp 40 fp low high 45 fp 45 fp 30 fp low - medium low 60 fp 60 fp 60 fp low - medium low - medium 60 fp 60 fp 60 fp low - medium medium 50 fp 55 fp 48 fp low - medium medium - high 42 fp 45 fp 35 fp low - medium high 30 fp 30 fp 25 fp medium low 60 fp 60 fp 60 fp medium low - medium 60 fp 60 fp 55 fp medium medium 45 fp 50 fp 45 fp medium medium - high 30 fp 30 fp 28 fp medium high 20 fp 15 fp 10 fp medium - high low 58 fp 55 fp 55 fp medium - high low - medium 45 fp 45 fp 40 fp medium - high medium 30 fp 30 fp 20 fp medium - high medium - high 10 fp 10 fp 10 fp medium - high high 4 fp 4 fp 3 fp high low 50 fp 50 fp 40 fp high low - medium 35 fp 35 fp 30 fp high medium 20 fp 20 fp 15 fp high medium - high 5 fp 5 fp 2 fp high high 1 fp 1 fp 1 fp 109 figur 49: comparison medium-medium qualiti render cardiac dataset exactli despit perform enhanc (top). comparison med-m qualiti render cardiac-ct dataset (middle). comparison med-m qualiti render manix dataset (bottom). 110 perform metric possibl combin pre-rend resolut sampl quality. import inform highlight red green. red line repres medium resolut combin high sampl rate medium sampl rate combin high resolution. result imag qualiti combin set high, perform low framer rang 10-20 fps. green line repres combin medium resolut medium sampl rate result framer rang 45-50 fp high imag quality. larg datasets, interact framer achiev combin medium resolut medium sampl rates. trial-and-error, combin result highest qualiti imag interact framerates. help aid data tabl 2, figur 49 place medium resolution, medium sampl rate interact render qualiti render cardiac, cardiac-ct manix datasets. comparison clear render qualiti high resolut sampl rate perform optim use. small datasets, higher resolut sampl rate achiev interact framerates. 4.4.5! gpu asynchron process synchron optim place reach real-tim framer interact volume, major limit end user. wait high qualiti render complet abl interact 111 volum again. result frustrat experi user investig volum stop-and-go procedure. example, chang minimum maximum slider valu real-tim windowing, user move slider continuously. paus moment, high resolut render begin real-tim window longer update. happen difficult slider slightli ios. exampl user navig volume, soon navig paused, high resolut render begin. caus user wait complet interact volum again. continu volum render oper subject stop-and-go behavior. flat mobil sandbox applic unusable. result, fix limit final focu perform improv mobil sandbox application. platform specif issu encount develop application, particular challenging. understand issu solved, understand complex issu first. main reason high qualiti render stop start li design osg render loop. osg allow user set scenegraph exactli wish, render it. normal circumstances, framer stai consist high continuous, behavior expect scenegraph. however, fit paradigm low qualiti render combin high qualiti render differ framer produced. 112 example, let low qualiti render take 20 milliseconds, high qualiti render take 1 second. soon user stop interact volum (releas touch), high qualiti render begin entir second complete. osg run event traversal, updat travers final cull/draw traversal. finish draw traversal, buffer swap final imag displai screen. process black box interrupt way. summary, frame start render osg, stop complet frame swap buffers. unfortunately, issu get worse. draw oper osg draw travers submit gpu queue control ios. high qualiti renders, queue get larg quickly. certain point, io flip intern switch sai gpu behind, applic execut cpu need paus gpu catch up. discov hour debug io applic run loop. result applic event touch event button press delai gpu queue exhausted. boil osg render loop stop paus manner (which cannot), io let paus stop event execut gpu state cpu state fulli synchronized. problem laid detail, let discuss solution. drastic modif requir elimin issue. render main thread worker thread main thread continu receiv applic event ios. second modifi osg render loop paus stopped. 113 critic modif gpu queue small io start block applic events. modif requir stop high qualiti render process completed. move render main thread worker thread trivial task. first, applic need us lazi render wast necessari comput power. lazi render refer idea render necessari save cpu cycl batteri life. chang scenegraph place, reason re-rend scene. second requir maintain consist draw rate draw necessary. final requir effici minimalist thread possibl ipad 2 contain process cores. addit thread caus addit context switch cpu. implement lazi rendering, event modifi scenegraph wai submit render queue. long event queue, render render low qualiti frame. render low qualiti frame pop event render queue. queue exhausted, high qualiti render begins. complet high qualiti render, render paus new event submit queue. consist draw execut render running, separ worker nsthread instantiated. attach run loop worker thread nstimer fire 300 time second. displai link, timer synchron refresh rate display, desir wai run asynchron render loop ios, high qualiti render requir faster updat 114 effective. io displai link ipad 2 execut 60 fp make slow support high qualiti rendering. effici wai pass render command render main thread spin addit resourc submit grand central dispatch (gcd) queue. grand central dispatch technolog develop optim multi-cor oper thread pool io level result higher perform typic multi-thread scenarios. allow io optim thread pool resourc execut render command oper possible. scene render lazili main thread, step modifi osg paus stop middl render process. meant redesign osg render loop core. instead travers entir scenegraph structur once, need incrementally. requir split scenegraph render chunks. chunk simpli portion scenegraph rendered. orthogon textur slicing, refer small set textur quads. chunk need small render quickli (less 10 ms). trial-and-error, ideal size render chunk io 16 quads. osg finish render chunk, allow applic process incom applic events. applic event processed, chunk render buffer. process continu chunk render result buffer swap displai user. complet lazi rendering, asynchron render increment rendering, expect high resolut render abl 115 stop mid-render. however, optimizations, applic event deliv buffer swapped. week debug render loop, solut stumbl accident. gpu execut render command buffer swapped. scenegraph render chunk applic event allow come main thread run loop, delai io gpu queue grown large. gpu forc render chunk submitted. opengl contain function glfinish() forc cpu wait gpu synchron queue. wide regard function stai awai situations. however, design exact purpos forc cpu gpu stai sync. ad glfinish() end render chunk, applic event began immedi come main thread high resolut render running. render receiv new applic event, render finish current chunk, exit high resolut render loop, clear framebuff begin render low qualiti render. monument chang mobil sandbox applic architectur result immedi abl cancel high qualiti render greatli improv usabl application. 4.4.6! featur mobil sandbox applic contain featur desktop immers sandbox applications. share featur gradient 116 backgrounds. support differ gradient background classier look feel scenegraph. techniqu model anim softwar packag today. imag differ background gradient seen figur 50. complic mobil applic pre-rend camera render gradient background need attach pre-rend camera low- qualiti render high qualiti render. implement manner sandbox applications. fact mobil applic longer us raycasting, limit composit rendering. abl perform mip minip renderings. possibl wai fragment shader comput minimum maximum voxel intens ray. rai all. orthogon textur slice reli opengl perform composit hardware. wide accept orthogon textur slice lower figur 50: screenshot custom background gradient support mobil sandbox application. 117 qualiti raycasting, but, hardwar limitations, method possibl current gener hardware. mobil sandbox applic fulli support opac transfer function desktop application. includ linear normal transfer function sharpen option. sharpen option figur 51: linear opac transfer function (top-left). linear opac transfer function sharpen (top-right). normal opac transfer function (bottom- left). normal opac transfer function sharpen (bottom-right). 118 increas slope transfer function voxel appear opaqu quickly. figur 51 show differ combin opac transfer functions. addit opac transfer functions, mobil sandbox applic support color transfer functions. opac color transfer function manner desktop immers applications. reason ipad 2 opengl es 2.0 specif support 1d textures. however, mention earlier, specif support 2d textures. consequently, opac color transfer function textur modifi 2d textur read correctli fragment shaders. exampl differ color transfer function seen figur 52. featur exist sole mobil sandbox applic preset view multitouch gestures. applic contain orthogon isometr preset view help quickli navig particular view direct volume. label medic terminology. addition, applic support multitouch gestur intuit navig volume. singl touch pan gestur recogn rotat volum center trackbal position. doubl touch pan gestur recogn pan volum dataset. pinch gestur recogn control zoom level camera pan zooming. finally, doubl tap gestur recogn center volum chang zoom level. type interact possibl default osg cocoa touch graphicswindowio implementation. 119 uniqu featur mobil sandbox applic clipping. clip exist sandbox applications, us differ algorithm. clip plane support opengl es 2.0 glclipplane() interface. instead, clip occur shader level. therefore, clip plane store uniform vec4 valu figur 52: muscl bone color transfer function (top-left). cardiac color transfer function (top-right). bone color transfer function (bottom-left). stern color transfer function (bottom-right). 120 vertex shader. insid vertex shader, dot product clip plane normal vertex posit comput determin vertex clip off. fragment shader, clip enabled, vertex posit compar clip plane clip them. clipped, discarded. pass composit algorithm. render clip plane better mobil applic comparison sandbox applications. clip plane bound constraint volum bound box. mean intersect clip plane volum bound box accur computed, render singl plane regardless number intersect bound box. exampl seen figur 53 below. greatli improv visual percept clip plane refer volume. figur 53: differ exampl mobil sandbox applic accur comput intersect point volum bound box. 121 creat perfect plane volum cap volum bounds, custom algorithm developed. step comput intersect point clip plane bound box edg follow equations: equat 3, abcd repres equat clip plane. point p1 p2 repres start end point bound box edge. u 0.0 1.0, equat 4 comput intersect point clip plane bound box edge. intersect point computed, need sort perimet point points. properli sorted, end clip plane form crisscross pattern plane instead encapsul border. differ approach taken try us angular sweep border point order. sadly, techniqu suit task reasons. all, abl handl small edg case float point mathemat precis break down. additionally, anchor point plane guarante bound clip plane perimeter, caus larg discrep occur. u = * x1 + b * y1 + c * z1 + d * x1 x2( ) + b * y1 y2( ) + c * z1 z2( ) (3) p = p1 + p2 p1( ) *u (4) 122 solut creat possibl edg combin border points, elimin edg crossing. total edg combin given set point p calcul equat 5: example, 6 differ edg combin given point (figur 54), edg combin points, etc. elimin cross edges, step creat vectors. line segment consist p1 p2, second line segment consist p3 p4, follow vector created: vector created, cross products, d1 d2, comput equat 9 10: d1 d2 opposit directions, meant end point second line segment differ side line segment impli edg crossing. logic demonstr figur 54 clarification. en = pn 1( )! (5) v1 = p2 p1 (6) v2 = p3 p1 (7) v3 = p4 p1 (8) d1 = v1 ^ v2 (9) d2 = v1 ^ v3 (10) 123 border edg identified, need convert list sort border points. start end point match edges. border point sorted, osg line loop render border osg polygon render plane. import featur built mobil sandbox applic abil perform proper depth sorting. major advanc applic abl properly. example, proper depth sort refer object appear proper depth order regardless transpar not. example, clip plane volum appear directli volume, volum figur 54: diagram elimin method sort clip plane bound box intersect points. 124 render it. perform proper depth sort render traversal, depth appear clip plane volum incorrect. figur 55, incorrect depth render desktop sandbox applic seen left imag proper depth sort mobil sandbox applic seen right image. properli depth sort drawabl scene, render back-to-front alpha blending. scenegraph capabl proper depth sort blending, unfortunately, osg them. wai properli depth sort alpha blend osg dynam scenegraph. mobil sandbox application, modif need scenegraph. off, bound box split differ drawabl inward face normal attach pre-rend osg::switch. next, figur 55: screenshot incorrect desktop sandbox applic clip non-depth sort clip plane bound box (left). screenshot mobil sandbox applic proper depth sort (right). 125 drawabl attach post-rend osg::switch. therefore, bound plane attach scenegraph twice. approach taken clip plane geometry. exampl scenegraph structur result seen figur 56. scenegraph structur place, applic need mechan inform scenegraph render pre post-rend bound box clip planes. polygon plane simpl back- face cull used. however, mobil application, cover clip plane geometry. cover bound box clip plane figur 56: diagram scenegraph structur perform proper depth- sort volum rendering. 126 border back-fac cull work polygons, line loops. led develop intern mechan comput back-fac cull line loop plane polygon planes. equat 11, comput plane face camera regardless project matrix use: equat 11, p repres border point plane n plane normal. e variabl repres camera ey position. u positive, mean plane face camera. time camera updat mobil application, individu bound box plane clip plane comput valu u render pre post-rend geometri depend u posit negative. approach work bound box clip planes, robust handl object render directli insid volume. final custom featur mobil applic abil serial dataset quickli reload them. limit hardwar capabl ipad 2 fact differ textur set need gener orthogon textur slicing, take long time load process data. however, data processed, there need reprocess data save effici manner. help clarify, take minut load cardiac-ct dataset consist 355 slice resolut 512 x 512. consider time ask user wait interact volume. u = p e( )* n (11) 127 help address issue, serial scheme built write textur quad directli binari file. accomplish leverag osgdb serial mechan built osg. small code logic, entir volum scenegraph written disk. serial mechanism, binari data read in, extract appli scenegraph effici manner. example, implement serial mobil application, reload process cardiac-ct dataset reduc minut seconds. way, dataset load approxim 45 time faster before. major perform improv greatli benefit sandbox applic well. 4.4.7! user interfac design user interfac mobil sandbox application, necessari commonli control access user times. reason logic explor volumetr dataset requir fine-grain adjust extract specif information. user burden cumbersome, context switch actions. result, user interfac design manner encourag explor allow quick access commonli control keep volum on-screen. design philosophi coupl nativ io look-and-feel user interfac minimalist intuit behavior. ipad, virtual learn curv mobil sandbox application. 128 layout applic construct uisplitview- control creat master view view left right respectively. application, master view combin uinavigationcontrol build dynam user interfac view render volume. follow section break user interfac major sections: inspector view, dataset view clip view. figur 57: inspector mobil sandbox applic launch (left). inspector anim widget yuria dataset load (middle). inspector anim complet (right). 129 inspector view, inspector, home commonli featur select dataset, adjust window set select color table. contain addit widget quickli navig user commonli featur preferences, preset view clip planes. initi applic launches, dataset tabl cell visible. direct user dataset view select dataset investigate. dataset loaded, addit tabl cell anim view. differ state inspector seen figur 57. notabl custom ad inspector displai current select dataset, opac tf color tabl cells. current select chosen sub-views, sent inspector displai current state volume. integr uiswitch uislid view certain tabl cell nice wai divid user interfac controls. additionally, minimum maximum intens slider allow cross other. look-and-feel inspector like basic implement stock user interfac views, embed custom uitableview uinavigationcontrol provid simpl intuit navig hierarchy. approach provid maximum inform minimalist user interfac possible. view worth describ dataset view. dataset view us uitableview displai dataset preload application. displai dataset short descript includ total number slice physic area bodi dataset contains. 130 dataset selected, uiactivityind (spinner) fade select tabl cell. dataset load scenegraph, activ indic continu spin main thread. dataset load scenegraph, activ indic quickli fade checkmark quickli fade in. particular view small details. differ exampl anim seen figur 58. complex view clip view. load initially, contain lone clip tabl cell uiswitch enabl clip function built application. enabled, rest tabl cell anim place. exampl clippingview seen figur 59. figur 58: dataset view mobil sandbox applic launch (left). dataset view select dataset (middle-left). dataset view progress indic fade began spin (middle-right). dataset view progress indic fade checkmark fade dataset finish load (right). 131 custom control select current clip plane rotat posit directions. uiactionsheet reset activ clip plane clip planes. interest behavior clip view clip tabl cell disabled, user interfac retract tabl cell. however, set intact. clip re-enabled, clip inform restor volum clip before. help elimin unnecessari option user fall line minimalist design philosophy. figur 59: clip view mobil sandbox applic launch (left). clip view turn clip widget fade (middle-left). clip view (middle-right). clip view hit reset button (right). 132 4.4.8! challeng contribut sandbox applications, mobil applic present largest challeng result largest number uniqu contributions. let begin interest challeng aros development. initially, difficult io osg work shortcom graphicswindowio implement osg. major challeng 3d textur support 3d interpol 2d textures. challeng combin elimin possibl perform raycast mobil devic real-tim todai hardware. move orthogon textur slicing, applic memori limit quickli problem have load differ textur set simultaneously. complic all, cancel high resolut render. challeng lack glclipplane() support opengl es 2.0 dataset load times. list challenges, mobil applic completed. uniqu contribut invent develop cycle. examin contribut list, note librari current exist todai perform volum render mobil devices. thus, featur applic fact substanti contribut community. said, let dig truli innov contribut applic unique. contribut involv dynam modifi pre-rend camera resolut textur quad sampl rate runtim increas 133 interact rendering, produc fluid interaction. major contribut highli optim asynchron io render mechan osg applications, addit increment osg render loop design specif volum rendering. perform clip opengl es 2.0, pure shader-bas volum clip algorithm design algorithm calcul precis clip plane geometri render bound box intersections. final contribut develop intern back-fac cull algorithm perform depth sort render nativ osg data structures. 134 5! vipr culmin volum render research present dissert result multi-platform volum render solut known volum imag process render engin (vipre). vipr design manner abstract volum render logic awai platform. essentially, end user (developers), volum render method expos work differ platform desktops, laptops, immers cluster mobil devices. better understand abstract possible, follow section describ vipr architectur depth. 5.1! vipr architectur design vipr architectur increment process. began develop sandbox applic investig volum render platform abstract possible. complet sandbox applications, appar abstract possible, manner platform specif implement avoid librari level. example, orthogon textur slice solution, design specif mobil application, work desktop immers environments. develop platform specif implement vipr libraries, specif implement expand platforms. situat platform specif implement expand coupl user interfac vipr render window. this, exampl applic develop allow end develop 135 custom implementations, buri deep vipr libraries. render logic sandbox applic abl extrapol platforms, sens split librari render technique. techniqu common travers interface, implement certain part render different. thus, vipr split differ uniqu librari includ vipre, vipredicom, vipreviewer, vipreraycaster, vipreotslic viprevatslicer. architectur diagram figur 60: gener architectur diagram platform support vipre.figur 60: gener architectur diagram platform support vipre. 136 vipr seen figur 60. follow section discuss vipr librari for. 5.1.1! vipr librari vipr librari low-level support librari provid common function librari base mechan build new volum render techniqu implementations. uniqu notif invent send abstract notif object type-saf manner need coupl send receiv object together. us make low-level scenegraph chang applic level. example, user send notif directli applic modifi fragment shader uniform have extract uniform object buri deep libraries. vipr librari contain render class act build block render techniques. exampl render class pre post-rend camera multi-resolut rendering, background gradient cameras, color opac tables, shader controllers, trackbal manipul clip plane renderer. finally, librari provid common render interfac design custom render techniqu library. interfac expos volum render class vipr library. techniqu requir us render interfac work vipr libraries. 137 5.1.2! vipredicom librari vipredicom librari design bridg dcmtk osg voxel data format dcmtk render osg. main design goal forth creat vipredicom library. provid simpl intuit wai build uniqu seri object extract dicom data them. second goal easili abl extract voxel data prepar osg friendli data structur rendering. design goal mind, object, slice seri class built extract dicom header data expos intuit manner user. seriesbuild class design simpl build uniqu seri object list file directory. portion vipredicom librari satisfi develop goal. transform voxel data osg data structures, class built handl differ possibl combin type voxel data convert data structur creat osg::imag objects. interfac osg provid voxel data textur gpu rendering. function line code elimin challeng manipul dicom data. 5.1.3! vipreview librari vipreview librari design osgview librari end goal render scenegraph. however, differ render loop implementations. osgview librari us render loop 138 execut event regist event queue, call regist updat callbacks, travers scenegraph render node encount finally, swap buffer push render frame display. vipreview similar ways, render traversal. portion render loop perform incrementally. depend hardwar volum size complexity, time take render qualiti imag vari greatly. necessari stop qualiti render provid immedi feedback user volum render applications. appar mobil sandbox application. vipreview library, chunk volum finish rendering, render loop check qualiti render cancelled. has, qualiti render end low qualiti render begins. allow develop us differ render qualiti static interact state applications. 5.1.4! vipreraycast librari vipreraycast librari contain render implement perform gpu-bas volum raycasting. implement volum render interfac vipr librari pick vipreview render loop. raycast implementation, librari built core render logic develop desktop sandbox application. consist render clip class handl volum reconstruct clip used. contain abil perform advanc volum render techniqu 139 space skip octrees, phong illumin multi-pass render back-fac depth rasterization. 5.1.5! vipreotslic librari vipreotslic (vipr orthogon textur slicer) librari render techniqu librari built orthogon textur slicing. render techniqu library, built vipr vipreview interfac vipreraycast library. render logic librari borrow implement mobil sandbox application. librari development, completed, abstract render core wai platforms. therefore, vipr applic abl us vipreotslic librari perform volum rendering. 5.1.6! viprevatslic librari viprevatslic (vipr view-align textur slicer) librari final support render techniqu vipre. completed, finished, implement volum render view-align textur slicing. implement vipr vipreview interfac tight integr render loop. us cpu-bas slice algorithm gener slice polygon dynamically, shader-bas clip algorithm vipreotslic library. 140 5.2! advanc volum raycast techniqu sandbox applic critic compon develop vipre, implement advanc volum render techniques. foundat vipr constructed, advanc volum render techniqu explored. techniqu space skipping, phong illumin multi-pass render back-fac depth rasterization. follow section develop advanc volum render techniqu detail. 5.2.1! space skip octre wai improv perform raycasting. initi version vipre, built sandbox applications, front- to-back composit earli rai termination. fragment shader optim reduc number fragment oper requir traversal. proven wai greatli improv perform raycasting. however, optim design handl larg amount transpar voxels. raycast transpar region wasteful. rai end accumul singl voxel discard fragment, rai requir step entir volume. algorithm wai skip transpar regions. improv perform cases, space skip design vipr octrees. 141 octre tree data structur intern node data structur contain exactli children. construct recurs split 3d space octants. inform octrees, refer section 3.1.1 dissertation. integr octre vipre, approach considered. us recurs octre repres possibl lod singl 3d texture. approach robust result singl data structur store lod origin voxel data. downsid approach requir border pad result larger represent origin voxel data. data structur commonli render high polygon model volum rendering. second approach us individu textur lod level store independ origin voxel data texture. approach requir logic fragment shader, addit border padding. requir fewer fragment oper perform index convers lod level traversals. second approach implement space skip vipre. step build singl lod textur repres lod level origin voxel data. size origin voxel data. node lod texture, minimum maximum intens child voxel comput store red green channel lod textur respectively. octre lod textur push gpu nearest neighbor interpolation. completed, fragment shader need instruct skip space. 142 skip space fragment shader requir composit algorithm modified. instead sampl attempt accumul voxel ray, need block accord octre texture. first, start point rai lookup minimum maximum valu block octre texture. maximum intens block lower minimum intens rendered, block skip sampl voxel insid block transparent. block abl skipped, normal sampl rai travers composited. singl lod level used, result promising. octre composit algorithm result virtual perform hit render volum transpar voxels. additionally, volum larg area transpar voxels, perform roughli 3-4 time faster compar space skipping. perform improv lod level fragment shader. exampl space skip perform seen figur 61. downsid octre tend introduc small artifact render imag certain view directions. artifact seen figur 62. general, artifact introduc obliqu view direct shortcom develop composit algorithm. order ensur transpar voxel skipped, sampl point need comput octre block. obliqu directions, non-transpar voxel skip caus small 143 figur 61: vipredefens exampl render yuria dataset 15 fp (top). view dataset octre travers enabl render 56.8 fp (bottom). 144 figur 62: closeup screenshot cardiac dataset render vipredefens exampl applic (top). closeup octre travers enabl (bottom). figur 62: closeup screenshot cardiac dataset render 145 rectangular artifacts. addit ad final version vipr released. 5.2.2! phong illumin advanc volum render techniqu introduct illumin model composit algorithm produc lit volume. greatli improv depth percept surfac volum render. common illumin model volum render todai phong illumin model. order comput phong illumin given voxel requir voxel position, gradient color posit light source. final voxel color determin composit diffuse, specular ambient illumin voxel color. addit inform phong illumin section 3.1.3 dissertation. order us phong illumin vipre, fragment shader need extend comput gradient given voxel comput diffuse, specular ambient light interactions. comput gradient differ techniques, central differ forward differences. common gradient calcul method perform directli fragment shader. result type gradient calcul addit phong illumin seen figur 63. easi tell addit light interact volum greatli improv depth percept surfac volume. introduc small artifact inaccuraci gradient estimators. common knowledg 146 figur 63: vipredefens applic yuria dataset load default render (top). dataset view render forward differ phong illumin (middle). dataset view render central differ phong illumin (bottom). figur 63: vipredefens applic yuria dataset load 147 gradient estim volum render import calcul affect qualiti render. improv render quality, better gradient estim sobel oper need used. unfortunately, better gradient estim need pre-calcul store gradient textur comput complex calculation. precomput gradient remov requir calcul dynam fragment shader, requir memori alloc second textur size voxel data texture. essenti doubl textur memori requir render volume. result higher qualiti volumes. tradeoff gener consid individu volum render application. 5.2.3! multi-pass render backfac depth raster major problem desktop immers sandbox applic inaccuraci volum render obliqu clip planes. obliqu clip plane locat volume, volum render incorrectly. inabl rai exit point calcul accommod non-orthogon volum geometry. happen exit point calcul bound box, volum clip bound box obliqu angle. result proper render clip plane volume, improp render behind. figur 64 attempt point render issue. 148 figur 64: desktop sandbox applic demonstr render volum clip plane incorrectli (top). render paramet differ camera posit volum locat clip plane result proper render (bottom). 149 easier comprehend interact volum difficult point static images. wai current applic librari handl problem construct binari clip texture. insid clip textur binari valu voxel store voxel clipped. ideal comput textur expens make difficult perform interact clip high framerates. requir textur introduc fragment shader increas memori footprint. final issu approach sampl point rai need perform addit lookup clip textur clipped. combin greatli decreas function interact clip volum rendering. avoid binari clip textures, differ approach developed. current clip plane algorithm produc convex polygon volume, need creat binari clip volume. need calcul raster locat backfac volume. backfac locat need avail fragment shader compositing. accomplish multipl render pass combin frontfac cull frame buffer objects. step involv multipl render pass raster backfac vipre. creat addit render pass osg involv pre-rend camera. volum geometri node attach render camera frontfac culling. instead render default framebuffer, camera render framebuff object 150 (fbo). result fbo textur bound main render pass shader addit texture. structur place, pre-rend pass camera need us custom fragment shader write raster backfac xyz locat rgb valu fragment color. exampl vertex fragment shader seen figur 65 66. pre-rend pass completed, backfac (exit points) posit avail textur composit fbo. fragment shader main render pass, fragment coordin extract backfac posit backfac texture. elimin need us rai bound box algorithm discuss section 4.2.1. imag figur 65: vertex shader multi-pass render backfac rasterization. 1 // vertex shader vari valu 2 vari vec4 vertex; 3 4 void main() 5 { 6 vertex = gl_vertex; 7 gl_posit = gl_modelviewprojectionmatrix * gl_vertex; 8 } 9 1 // vertex shader vari valu 2 vari vec4 vertex; 3 4 // uniform main program 5 uniform vec3 cuboiddimensions; 6 7 void main() 8 { 9 float red = vertex.x / cuboiddimensions.x; 10 float green = vertex.i / cuboiddimensions.y; 11 float blue = vertex.z / cuboiddimensions.z; 12 gl_fragdata[0] = vec4(red, green, blue, 1.0); 13 } figur 66: fragment shader multi-pass render backfac rasterization. 151 result volum render pre-rend pass textur overlaid render seen figur 67. result altern approach promising. introduc approxim 10% decreas performance, improp render eliminated. approach coupl custom clip plane implement desktop immers sandbox applic faster approach binari clip volum truli uniqu contribution. figur 67: vipredefens applic render volum multi- pass render backfac rasterization. overlai left backfac depth textur gener render pass. 152 5.3! bridg academ research volum render api expand vipr support advanc volum render techniqu straightforward vast document exampl applic rang dicom extract volum raycasting. this, vipr go serv platform bridg gap academ research open sourc volum render apis. currently, voreen avail volum render api activ contribut academ researchers. issu this. off, voreen wide support open sourc api larg commun dedic develop testing. secondly, voreen support desktop computers, research look immers mobil devic solut left develop implementations. finally, voreen releas gnu gpl license, non-commerci purposes. vipr propos solut address issu directly. help bridg gap theoret research real world applications, volum render api need robust openli available. vipr kei compon make happen. bring advanc gpu-bas raycast technolog multipl platforms, research develop longer build intern volum render solut system outsid domain desktop computers. major benefit develop vipr research commun provid open sourc solut built commun support welcom volum render enhanc new contributions. example, foo [189] fuzzi logic perform tumor segmentation, work 153 current avail research community. main reason volum render open sourc commun accept public submissions. addition, commun support commerci institut govern intern develop futur scope apis. order avoid type situation, vipr serv unifi hub volum render advanc public community. help ensur best technolog avail platforms. 154 6! conclus futur work 6.1! summari conclus new volum render engin develop support multipl platform unifi interface. provid develop global volum render solut deploi applic desktops, laptops, immers cluster mobil devices. multi-platform engin created, investig complex challeng perform volum render platform requir common architectur perform core volum rendering. led develop uniqu sandbox applications, provid major contribut final volum render engine. desktop sandbox applic develop build core volum render algorithm engin resampling, coloring, shade compositing. result applic includ core volum render algorithm uniqu features. real-tim window built directli fragment shader uniform dynam modifi opac transfer function. gpu composit algorithm implement opengl specif specif extens allow librari render commod graphic card. finally, convex clip plane algorithm design allow number clip plane clip volum directions. immers sandbox applic built directli core volum render logic develop desktop application. main focu immers investig core volum render logic 155 extrapol immers environment. base current research reviewed, result immers applic applic capabl perform gpu-bas volum raycast larg immers cluster environments. additionally, core volum render logic custom accommod immers platform. mobil sandbox applic began investig capabl todai mobil devic hardware. initi result prove raycast perform real-tim lack 3d textur support. shortcom led develop orthogon textur slice implementation. creat interact volum render solution, perform enhanc featur built mobil application, util render algorithm engine. featur includ method dynam modifi render resolution, increment render loop cancel high resolut renders, shader-bas clip algorithm opengl es 2.0 intern backfac cull algorithm perform depth sort render alpha blending. complet sandbox applic verifi common architectur support multi-platform volum rendering. led develop vipre, volum imag process render engine. vipr contain follow features: volum render algorithms: raycast orthogon textur slice render modes: composite, mip minip preset opac transfer function color transfer function real-tim window dynam shader-bas opac control 156 bilinear trilinear interpol 2d 3d fragment shader textur custom cpu gpu-bas clip algorithm accur depth sort render alpha blend dynam render qualiti modif multipl render pass earli rai termin space skip phong illumin support multipl gradient oper multi-pass render backfac depth raster support commod desktop graphic card addit io devic vipr design begin provid unifi solut perform volum render multipl platforms. produc robust volum render core abl extend support complex form volum rendering. help enabl extens vipre, simplifi version sandbox applic robust set document includ librari provid cohes start point novic intermedi developers. additionally, vipr go releas licens term allow academ commerci communities. intent provid research develop abil creat new invent method interact volumetr data have build volum renderer. todai technolog advancing, vipr attempt lower barrier entri volum render usher new gener volum render applications. competit foster innovation, make volum render access research developers, benefit. 157 6.2! futur work futur develop vipre, area focus. focu area surgic planning. surgic plan requir insert instrument volume. vipr current support proper depth render geometri locat outsid volume. render geometri insid volum properly, addit render pass need implement build depth map intern volum geometry. depth map integr composit algorithm main render pass stop rai travers proper location. area focu segmentation. integr segment librari vipre, new method interact train segment routin studi differ platform immers cluster displai mobil devices. additionally, vipr extend support multipl volum independ volum clip help visual intern structur segment dataset tumor. reus textur gener previou render passes, interact user interfac design immers applications. 6.3! acknowledg like opportun thank involv work present dissert support graduat career. foremost, like thank fianc, rachael gonzales. strength pull difficult times. like thank famili love, support understand years. 158 like thank advisor dr. eliot winer. guidanc help person today, dont know attend graduat school. faculti staff virtual realiti applic center iowa state university, thank assist given make graduat school experi meaning worthwhil possible. truli wonder experi forget. least, research colleagu dr. eric foo brandon newendorp, time input design discuss late night debug session essenti develop vipre. 159 bibliographi 1.! kaufman, a. k. mueller, overview volum rendering. imaging. vol. d. 2005: elsevier. 2.! goodenough, d. k. weaver, overview comput tomography. nuclear science, ieee transact on, 1979. 26: p. 1661-1667. 3.! bottomley, p.a., nuclear magnet resonance: physic imaging1983: ieee spectrum. 32-38. 4.! lichtenbelt, b., et al., introduct volum rendering1998, upper saddl river, nj: prentic hall ptr upper saddl river, nj. 103-120. 5.! elboth, t. a. helgeland, hurrican visual anisotrop diffus volum rendering. 5th annual gather high perform comput norway, 2005: p. 3-4. 6.! robertson, d., virtual frog dissection: interact 3d graphic web. network isdn systems, 1995. 28: p. 155-160. 7.! jansen, r.j., et al., high-resolut spiral comput tomographi multiplanar reformatting, 3d surface- volum rendering: non-destruct method visual ancient egyptian mummif techniques. computer medic imag graphics, 2002. 26: p. 211-216. 8.! ketcham, r., acquisition, optim interpret x-rai comput tomograph imagery: applic geosciences. comput & geosciences, 2001. 27: p. 381-400. 9.! seo, k.h. j.f. frank, attach escherichia coli o157:h7 lettuc leaf surfac bacteri viabil respons chlorin treatment demonstr confoc scan laser microscopy. journal food protection, 1999. 62: p. 3-9. 10.! kreger, a., et al., sinu endoscopy--appl advanc gpu volum render virtual endoscopy. ieee transact visual graphics, 2008. 14: p. 1491-8. 11.! patel, d., et al., virtual realiti solut evalu radiotherapi plans. radiotherapi oncolog : journal european societi therapeut radiolog oncology, 2007. 82: p. 218-21. 12.! sande, s., 1,800 ipad wai ottawa hospital, unoffici appl weblog, 2011. 13.! washuk, b., 5 kindergarten teacher pilot auburn ipad 2 program, sun journal, 2011: lewiston, maine. 14.! shreiner, d., opengl program guid 7th edition. kip transactionsparta. vol. 16a. 2009: addison-wesley. 1019 pages. 15.! pham, d.l., c. xu, j.l. prince, current method medic imag segmentation. annual review biomed engineering, 2000. 2: p. 315-337. 16.! mcinerney, t. d. terzopoulos, survei deform model medic analysis. medic imag analysis, 1996. 1: p. 91-108. 17.! owens, j.d., et al. survei general-purpos comput graphic hardware. graphic forum. 2007. wilei onlin library. 160 18.! levoy, m., displai surfac volum data. graphic applications, ieee, 1988. 8: p. 29-37. 19.! pommert, a., et al. surfac shade tomograph volum visualization: compar study. visual biomed computing, 1990., proceed confer on. 1990. ieee. 20.! moller, t., et al. classif local error estim interpol deriv filter volum rendering. proceed 1996 symposium volum visualization. 1996. acm. 21.! he, t. a.e. kaufman. virtual input devic 3d systems. visualization, 1993. visualization'93, proceedings., ieee confer on. 1993. ieee. 22.! keys, r., cubic convolut interpol digit imag processing. acoustics, speech signal processing, ieee transact on, 1981. 29: p. 1153-1160. 23.! drebin, r.a., l. carpenter, p. hanrahan. volum rendering. acm siggraph graphics. 1988. acm. 24.! he, t., et al., gener transfer function stochast search techniques. new york, 1996. 25.! phong, b.t., illumin gener pictures. commun acm, 1975. 18: p. 317. 26.! gouraud, h., continu shade curv surfaces. ieee transact computers, 1971. c-20: p. 623-629. 27.! blinn, j.f., light reflect function simul cloud dusti surfaces. acm siggraph graphics, 1982. 16: p. 21-29. 28.! porter, t. t. duff, composit digit images. acm siggraph graphics, 1984. 18: p. 253-259. 29.! sabella, p., render algorithm visual 3d scalar fields. acm siggraph graphics, 1988. 22: p. 51-58. 30.! upson, c., visibl volum rendering. graphics, 1988. 22: p. 59-64. 31.! lorensen, w.e. h.e. cline, march cubes: high resolut 3d surfac construct algorithm. acm siggraph graphics, 1987. 21: p. 163-169. 32.! westover, l., footprint evalu volum rendering. acm siggraph graphics, 1990. 24: p. 367-376. 33.! botsch, m. l. kobbelt, high-qual point-bas render modern gpus. 11th pacif confer oncomput graphic applications, 2003. proceedings., 2003: p. 335-343. 34.! zwicker, m. h. pfister, hardware-acceler adapt ewa volum splatting. ieee visual 2004, 2004: p. 67-74. 35.! neophytou, n. k. mueller. gpu acceler imag align splatting. fourth intern workshop volum graphics, 2005. 2005. ieee. 36.! pfister, h., et al. volumepro real-tim ray-cast system. proceed 26th annual confer graphic interact 161 techniques. 1999. new york, new york, usa: acm press/addison-weslei publish co. 37.! wu, y., et al. shear-imag order rai cast volum rendering. proceed 2003 symposium interact 3d graphics. 2003. new york, new york, usa: acm. 38.! rezk-salama, c., et al. interact volum standard pc graphic hardwar multi-textur multi-stag rasterization. proceed acm siggraph/eurograph workshop graphic hardware. 2000. new york, new york, usa: acm. 39.! engel, k., m. kraus, t. ertl. high-qual pre-integr volum render hardware-acceler pixel shading. proceed acm siggraph/eurograph workshop graphic hardwar - hww '01. 2001. new york, new york, usa: acm press. 40.! roettger, s., et al. smart hardware-acceler volum rendering. proceed symposium data visualis 2003. 2003. eurograph association. 41.! hsu, w.m. segment rai cast data parallel volum rendering. proceed 1993 symposium parallel rendering. 1993. acm. 42.! ma, k.l., parallel volum ray-cast unstructured-grid data distributed- memori architectures, 1995. 43.! ma, k.l. t.w. crockett, scalabl parallel cell-project volum render algorithm three-dimension unstructur data. prs, 1997: p. 95. 44.! heng, y. l. gu. gpu-bas volum render medic imag visualization. confer proceed : ... annual intern confer ieee engin medicin biologi society. ieee engin medicin biologi society. conference. 2005. ieee. 45.! hadwiger, m., et al. advanc illumin techniqu gpu-bas volum raycasting. acm siggraph 2009 courses. 2009. acm. 46.! whitted, t., improv illumin model shade display. commun acm, 1980. 23: p. 343-349. 47.! levoy, m., effici rai trace volum data. acm transact graphics, 1990. 9: p. 245-261. 48.! weiler, m., et al., hardware-bas rai cast tetrahedr meshes. ieee transact ultrasonics, ferroelectr frequenc control, 2003: p. 333-340. 49.! meagher, d., geometr model octre encoding. graphic imag processing, 1982. 19: p. 129-147. 50.! junyaprasert, k., et al., interact volum render virtual colonoscopy. proceedings. visual '97 (cat. no. 97cb36155), 1997: p. 433-436,. 51.! wan, m., et al. volum render base interact navig human colon. visualization'99. proceedings. 1999. ieee. 52.! wan, m., a. sadiq, a. kaufman. fast reliabl space leap interact volum rendering. proceed confer visualization'02. 2002. ieee society. 162 53.! kruger, j. r. westermann, acceler techniqu gpu-bas volum rendering. ieee transact ultrasonics, ferroelectr frequenc control, 2003: p. 287-292. 54.! lee, t.-h., et al., fast perspect volum rai cast method gpu- base acceler techniqu transluc render 3d endolumin ct colonography. comput biologi medicine, 2009. 39: p. 657-66. 55.! mueller, k. a. kaufman, space skip occlus clip texture-bas volum rendering. ieee transact ultrasonics, ferroelectr frequenc control, 2003. 4400: p. 317-324. 56.! li, w. a. kaufman, textur partit pack acceler texture-bas volum rendering. proceedings: graphic interfac 2003: halifax, nova scotia, 11-13 june 2003, 2003: p. 81. 57.! fuchs, h., z.m. kedem, b.f. naylor, visibl surfac gener priori tree structures. acm siggraph graphics, 1980. 14: p. 124-133. 58.! bhaniramka, p. y. demange. opengl volumizer: toolkit high qualiti volum render larg data sets. proceed 2002 ieee symposium volum visual graphics. 2002. ieee press. 59.! ruijters, d. a. vilanova, optim gpu volum rendering. journal wscg, 2006. 14: p. 9-16. 60.! volz, w.r., gigabyt volum view split software/hardwar interpolation. 2000 ieee symposium volum visual (vv 2000), 2000. vi: p. 15-22. 61.! weiler, m., et al., level-of-detail volum render 3d textures. proceed 2000 ieee symposium volum visual - vv '00, 2000: p. 7-13. 62.! grimm, s., et al., memori effici acceler structur techniqu cpu-bas volum raycast larg data. 2004 ieee symposium volum visual graphics, 2004. vi: p. 1-8. 63.! beyer, j., et al., high-qual multimod volum render preoper plan neurosurg interventions. ieee transact visual graphics, 2007. 13: p. 1696-703. 64.! lamar, e., multiresolut techniqu interact texture-bas volum visualization. proceed spie, 2000. vi: p. 365-374. 65.! boada, i., i. navazo, r. scopigno, multiresolut volum visual texture-bas octree. visual computer, 2001. 17: p. 185-197. 66.! thali, m.j., et al., forens microradiology: micro-comput tomographi (micro-ct) analysi pattern injuri insid bone. journal forens sciences, 2003. 48: p. 1336-1342. 67.! guthe, s., et al., interact render larg volum data sets. ieee visualization, 2002. vi 2002., 2002. d: p. 53-60. 68.! ljung, p., c. lundstrm, a. ynnerman. multiresolut interblock interpol direct volum rendering. proceed eurographics/iee symposium visual 2006. 2006. citeseer. 163 69.! gobbetti, e., f. marton, j.a. iglesia guitin, single-pass gpu rai cast framework interact out-of-cor render massiv volumetr datasets. visual computer, 2008. 24: p. 797-806. 70.! crassin, c., et al. gigavoxels: ray-guid stream effici detail voxel rendering. proceed 2009 symposium interact 3d graphic games. 2009. acm. 71.! ljung, p., et al., bodi virtual autopsi state-of-the-art volum render pipeline. ieee transact visual graphics, 2006. 12: p. 869-76. 72.! hege, h., et al., smooth mixed-resolut gpu volum rendering. vrvis.at, 2008. 73.! guthe, s., advanc techniqu high-qual multi-resolut volum rendering. comput & graphics, 2004. 28: p. 51-58. 74.! nguyen, k.g. d. saupe, rapid high qualiti compress volum data visualization. graphic forum, 2001. 20: p. 49-57. 75.! ihm, i. s. park, wavelet-bas 3d compress scheme interact visual larg volum data. graphic forum, 1999. 18: p. 3-15. 76.! kim, t. y. shin. effici wavelet-bas compress method volum rendering. graphic applications, 1999. proceedings. seventh pacif confer on. 1999. ieee. 77.! rodler, f.f., wavelet base 3d compress fast random access larg volum data. proceedings. seventh pacif confer graphic applic (cat. no.pr00293), 1999. d: p. 108-117. 78.! mller, t., et al. emploi complex gpu data structur interact visual adapt mesh refin data. volum graphic 2006: eurographics/iee vgtc workshop proceedings. 2006. citeseer. 79.! kraus, m. t. ertl. adapt textur maps. proceed acm siggraph/eurograph confer graphic hardware. 2002. eurograph association. 80.! langer, m.s. h.h. bulthoff, depth discrimin shade diffus lighting. perception, 2000. 29: p. 649. 81.! sattler, m., et al., exploit human shadow percept fast shadow rendering. proceed 2nd symposium appi percept graphic visual - apgv '05, 2005: p. 131. 82.! carson, g.s., introduct graphic refer model. acm siggraph graphics, 1993. 27: p. 108-119. 83.! behrens, u. r. ratering. ad shadow texture-bas volum renderer. proceed 1998 ieee symposium volum visualization. 1998. acm. 84.! kniss, j., et al., interact transluc volum render procedur modeling. ieee visualization, 2002. vi 2002., 2002. di: p. 109-116. 85.! hernell, f., p. ljung, a. ynnerman, interact global light propag direct volum render local piecewis integration. volum graphics, 2008, 2008. 164 86.! wald, i., et al., faster isosurfac rai trace implicit kd-trees. ieee transact visual graphics, 2005. 11: p. 562-72. 87.! marmitt, g., h. friedrich, p. slusallek, interact volum render rai tracing. eurograph state art reports, 2006: p. 115-136. 88.! williams, l. cast curv shadow curv surfaces. acm siggraph graphics. 1978. acm. 89.! reeves, w.t., d.h. salesin, r.l. cook. render antialias shadow depth maps. acm siggraph graphics. 1987. acm. 90.! kim, t.y. u. neumann. opac shadow maps. proceed 12th eurograph workshop render techniques. 2001. citeseer. 91.! lokovic, t. e. veach. deep shadow maps. proceed 27th annual confer graphic interact techniques. 2000. new york, new york, usa: acm press/addison-weslei publish co. 92.! hadwiger, m., et al. gpu-acceler deep shadow map direct volum rendering. proceed 21st acm siggraph/eurograph symposium graphic hardware, september. 2006. citeseer. 93.! stewart, a.j. vicin shade enhanc percept volumetr data. proceed 14th ieee visual 2003 (vis'03). 2003. ieee society. 94.! desgranges, p. k. engel, fast ambient occlus direct volum rendering, patent app. 11/455,627, 2006, googl patents. 95.! hernell, f., p. ljung, a. ynnerman. effici ambient emiss tissu illumin local occlus multiresolut volum rendering. eurographics/ieee-vgtc symposium volum graphics. 2007. 96.! ropinski, t., et al. interact volum render dynam ambient occlus color bleeding. graphic forum. 2008. wilei onlin library. 97.! khanduja, g. b.b. karki. systemat approach multipl dataset visual scalar volum data. intern confer graphic theori applications, (grapp'06). 2006. citeseer. 98.! dietrich, c.a., et al. real-tim interact visual manipul volumetr data gpu-bas methods. spie medic imaging. 2004. 99.! mcinerney, t. s. broughton, hingeslic : interact explor volum imag extend 3d slice plane widgets. science, 2006. im: p. 171-178. 100.! wang, s.w. a.e. kaufman, volum sculpting. proceed 1995 symposium interact 3d graphic - si3d '95, 1995: p. 151-ff. 101.! weiskopf, d., k. engel, t. ertl, interact clip techniqu texture- base volum visual volum shading. ieee transact visual graphics, 2003. 9: p. 298-312. 102.! konrad-verse, o., b. preim, a. littmann. virtual resect deform cut plane. proceed simul und visualisierung. 2004. citeseer. 165 103.! stegmaier, s., et al., simpl flexibl volum render framework graphics-hardware-bas raycasting. fourth intern workshop volum graphics, 2005., 2005: p. 187-241. 104.! brecheisen, r., et al., flexibl gpu-bas multi-volum ray-casting. vision, modeling, visual 2008: proceedings, octob 8-10, 2008, konstanz, germany, 2008: p. 303. 105.! niederauer, c., et al., non-invas interact visual dynam architectur environments. proceed 2003 symposium interact 3d graphic - si3d '03, 2003: p. 55. 106.! chen, m., et al. spatial transfer functions: unifi approach specifi deform volum model animation. proceed 2003 eurographics/iee tvcg workshop volum graphics. 2003. acm. 107.! islam, s., et al., spatial tempor split scalar field volum graphics. imag (rochester, n.y.), 2004. i: p. 87-94. 108.! mcguffin, m.j., l. tancau, r. balakrishnan. deform brows volumetr data. proceed 14th ieee visual 2003 (vis'03). 2003. ieee society. 109.! viola, i., a. kanitsar, m.e. groller, importance-driven volum rendering. ieee visual 2004, 2004: p. 139-145. 110.! bruckner, s. m.e. griller, explod view volum data. ieee transact visual graphics, 2006. 12: p. 1077-84. 111.! cai, w. g. sakas, data intermix multi-volum rendering. graphic forum, 1999. 18: p. 359-368. 112.! wilson, b., e. lum, k.l. ma, interact multi-volum visualization. comput scienceicc 2002, 2002. 9: p. 102-110. 113.! kaufman, a.e. k. mueller, hardwar assist multichannel volum rendering. proceed graphic intern 2003, 2003: p. 2-7. 114.! ferre, m., a. puig, d. tost, framework fusion method render techniqu multimod volum data. anim virtual worlds, 2004. 15: p. 63-77. 115.! manssour, i.h., et al., visual inner structur multimod volum data. imaging, 2002. d. 116.! leu, a. m. chen. model render graphic scene compos multipl volumetr datasets. graphic forum. 1999. wilei onlin library. 117.! serra, l., et al., multimod volume-bas tumor neurosurgeri plan virtual workbench. medic imag comput computer-assist interventationmiccai98, 1998: p. 1007-1015. 118.! westermann, r. t. ertl, effici graphic hardwar volum render applications. proceed 25th annual confer graphic interact techniqu - siggraph '98, 1998: p. 169-177. 119.! grimm, s., et al. v-objects: flexibl direct multi-volum render interact scenes. proceed vision, model visualization. 2004. citeseer. 166 120.! rler, f., et al. gpu-bas multi-volum render visual function brain images. proceed simvis. 2006. citeseer. 121.! plate, j., t. holtkaemper, b. froehlich, flexibl multi-volum shader framework arbitrarili intersect multi-resolut datasets. ieee transact visual graphics, 2007. 13: p. 1584-91. 122.! everitt, c., interact order-independ transparency. white paper, nvidia, 2001. 2: p. 7. 123.! rossler, f., r.p. botchen, t. ertl, dynam shader gener gpu- base multi-volum rai casting. graphic applications, ieee, 2008. 28: p. 66-77. 124.! hou, q., k. zhou, b. guo, bsgp: bulk-synchron gpu programming. acm transact graphic (tog), 2008. 27: p. 1-12. 125.! nickolls, j., et al., scalabl parallel programming. queue, 2008. 6: p. 40-53. 126.! nvidia, comput unifi devic architectur program guide. nvidia: santa clara, ca, 2007. 83: p. 129. 127.! kainz, b., et al., rai cast multipl volumetr dataset polyhedr boundari manycor gpus. acm transact graphics, 2009. 28: p. 1. 128.! jensen, h.w., et al., practic model subsurfac light transport. proceed 28th annual confer graphic interact techniqu - siggraph '01, 2001: p. 511-518. 129.! lensch, h.p.a., et al., interact render transluc objects. 10th pacif confer graphic applications, 2002. proceedings., 2002: p. 214-224. 130.! carr, n.a., j.d. hall, j.c. hart. gpu algorithm radios subsurfac scatter nathan. proceed acm siggraph/ eurograph confer graphic hardware. 2003. eurograph association. 131.! donner, c. h.w. jensen, light diffus multi-lay transluc materials. acm transact graphics, 2005. 24: p. 1032. 132.! csebfalvi, b. l. szirmay-kalos, mont carlo volum rendering. ieee transact ultrasonics, ferroelectr frequenc control, 1993: p. 449-456. 133.! pharr, m. g. humphreys, physic base rendering: theori implementation2004: morgan kaufmann. 134.! nguyen, h., gpu gem 3. computing, 2007. 135.! salama, c.r. gpu-bas monte-carlo volum raycasting. graphic applications, 2007. pg'07. 15th pacif confer on. 2007. ieee. 136.! kaufman, a. s. yoakum-stover, gpu cluster high perform computing. proceed acm/iee sc2004 conference, 2004. 00: p. 47-47. 167 137.! strengert, m., et al., hierarch visual compress larg volum dataset gpu clusters. parallel graphic visualization, 2004. d. 138.! strengert, m. m. magall, larg volum visual compress time-depend dataset gpu clusters. science, 2005. vi: p. 1-16. 139.! marchesin, s., c. mongenet, j. dischler. dynam load balanc parallel volum rendering. proc. symp. parallel graphic vis.(pgv). 2006. citeseer. 140.! marchesin, s., c. mongenet, j.m. dischler. multi-gpu sort-last volum visualization. eurograph symposium parallel graphic visual (egpgv08). 2008. 141.! prohaska, s., et al., interact explor larg remot micro-ct scans. ieee visual 2004, 2004: p. 345-352. 142.! marovic, b. z. jovanovic, web-bas grid-en interact 3d medic data. futur gener systems, 2006. 22: p. 385-392. 143.! krishnan, k., et al., effici transmiss compress data remot volum visualization. ieee transact medic imaging, 2006. 25: p. 1189-99. 144.! callahan, s.p., et al., progress volum render larg unstructur grids. ieee transact visual graphics, 2006. 12: p. 1307-14. 145.! humphreys, g., et al., chromium: stream-process framework interact render clusters. acm transact graphics, 2002. 21. 146.! sim voleon 3d graphic develop tools. 2012 march 17, 2012]; avail from: 147.! coin3d - 3d graphic develop tools. 2012 march 17, 2012]; avail from: 148.! equalizer: applications: evolve: parallel volum rendering. 2012 march 17, 2012]; avail from: evolve.html. 149.! vtk - visual toolkit. 2012 march 17, 2012]; avail from: www.vtk.org/. 150.! vtkedg - provid addit function vtk. 2012 march 17, 2012]; avail from: 151.! imagevis3d. 2012 march 17, 2012]; avail from: gforge.sci.utah.edu/gf/project/imagevis3d/. 152.! voreen - volum render engine. 2012 march 17, 2012]; avail from: 153.! bierbaum, a., et al., implement immers cluster vr juggler. comput scienc applicationsiccsa 2005, 2005: p. 1119-1128. 154.! samanta, r., et al., load balanc multi-projector render systems. proceed acm siggraph/eurograph workshop graphic hardwar - hww '99, 1999: p. 107-116. 168 155.! kniss, j., et al., interact texture-bas volum render larg data sets. ieee graphic applications, 2001. 22: p. 52-61. 156.! schulze-dbold, j., et al. volum render virtual environment. immers project technolog virtual environ 2001: proceed eurograph workshop stuttgart, germany, 16-18, 2001. 2001. springer verlag wien. 157.! wssner, u., et al. evalu collabor volum render applic distribut virtual environment. proceed 8th eurograph workshop virtual environ (egve). 2002. 158.! hubbold, r. m. lin, vjvtk: toolkit interact visual virtual reality. citeseer, 2006. 159.! kageyama, a. n. ohno, tutori introduct virtual realiti : possibl offer field ? arxiv preprint physics/0512066, 2005: p. 2-5. 160.! ohno, n. a. kageyama, scientif visual geophys simul data cave vr volum rendering. physic earth planetari interiors, 2007. 163: p. 305-311. 161.! ohno, n. a. kageyama, region-of-interest visual cave vr automat control level-of-detail. physic communications, 2010. 181: p. 720-725. 162.! cruz-neira, c., et al., cave audio visual experi automat virtual environment. commun acm, 1992. 35: p. 64-72. 163.! cavelib - power virtual realiti softwar creat interact 3d environments. 2012 march 17, 2012]; avail from: www.mechdyne.com/cavelib.aspx. 164.! flowvr. 2012 march 17, 2012]; avail from: 165.! allard, j. b. raffin. shader-bas parallel render framework. visualization, 2005. vi 05. ieee. 2005. ieee. 166.! arcila, t., et al., flowvr: framework distribut virtual realiti applications. afrv, rocquencourt (novemb 2006), 2006. 167.! allard, j., j.d. lesage, b. raffin, modular larg virtual realiti applications. presence: teleoper virtual environments, 2010. 19: p. 142-161. 168.! equalizer: parallel rendering. 2011 20, 2011]; avail from: www.equalizergraphics.com/index.html. 169.! eilemann, s., m. makhinya, r. pajarola. equalizer: scalabl parallel render framework. acm siggraph asia 2008 courses. 2008. acm. 170.! amira - visual analyz present. 2012 march 17, 2012]; avail from: 171.! vital imag - vitrea enterpris suite. 2012 march 17, 2012]; avail from: 172.! fovia. 2012 march 17, 2012]; avail from: 173.! osirix - dicom viewer. 2012 march 17, 2012]; avail from: www.osirix-viewer.com/. 169 174.! volview. 2012 march 17, 2012]; avail from: products/volview.html. 175.! volumeviz. 2012 march 17, 2012]; avail from: open-inventor/volumeviz. 176.! scaleviz. 2012 march 17, 2012]; avail from: inventor/scale-viz. 177.! avizo. 2012 march 17, 2012]; avail from: overview. 178.! vrvis. 2011. 179.! imagevis3d mobile. 2011. 180.! osirix hd. 2011. 181.! grai anatomi premium edit ipad. 2011. 182.! openscenegraph. 2012 march 17, 2012]; avail from: www.openscenegraph.org/projects/osg/wiki. 183.! dcmtk - dicom toolkit. 2012 march 17, 2012]; avail from: dicom.offis.de/dcmtk.php.en. 184.! vr juggler. 2012 march 17, 2012]; avail from: vrjuggler/. 185.! bierbaum, a., et al., vr juggler: virtual platform virtual realiti applic development. proceed ieee virtual realiti 2001, 2001: p. 89-96. 186.! staadt, o.g., et al., survei perform analysi softwar platform interact cluster-bas multi-screen rendering. proceed workshop virtual environ 2003 - egv '03, 2003: p. 261-270. 187.! smits, b. effici issu rai tracing. acm siggraph 2005 courses. 2005. acm. 188.! williams, a., et al. effici robust ray-box intersect algorithm. acm siggraph 2005 cours - siggraph '05. 2005. new york, new york, usa: acm press. 189.! foo, j.l., framework tumor segment interact immers visual medic imag data surgic planning, isis2010, iowa state university. 190.! mueller, k., t. mller, r. crawfis. splat blur. proceed confer visualization'99: celebr years. 1999. ieee societi press. 170 iowa state univers digit repositori iowa state univers 2012 volum render engin desktops, laptops, mobil devic immers virtual realiti system gpu-bas volum raycast christian john noon recommend citat