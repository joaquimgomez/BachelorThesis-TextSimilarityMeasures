mergedfil screen space ambient occlus partial scene represent chaitanya timmaraju bachelor technolog inform technolog jawaharl nehru technolog univers hyderabad, telangana 2015 submit faculti graduat colleg oklahoma state univers partial fulfil requir degre master scienc december, 2017 ii screen space ambient occlus partial scene represent thesi approved: dr. dougla r. heisterkamp thesi advis dr. david cline dr. blayn mayfield iii name: chaitani timmaraju date degree: decemb 2017 titl study: screen space ambient occlus partial scene represent major field: scienc abstract: screen space ambient occlus (ssao) techniqu real-tim render approxim point surfac occlud surround geometry, help ad soft shadow diffus objects. current method us depth buffer approxim scene geometri sampl occlus factor. introduc novel techniqu us partial represent scene (here triangl inform screen space) compact triangl storage[1, 2] ray-march approach better approxim occlus factor. iv tabl content chapter page 1 introduction.. 1 1.1 motiv 1 1.2 background.. 2 1.2.1 render equat ambient occlus (ao) 2 2 literatur survey.. 6 2.1 geometri base ambient occlusion... 6 2.2 screen-spac ambient occlus (ssao)...... 7 2.2.1 depth buffer approaches. 7 2.2.2 angle-bas approaches................. 9 2.3 sub-pixel shadow mapping. 12 3 methodolog design.. 14 3.1 technic overview 14 3.2 algorithm 15 3.2.1 pass 15 3.2.2 second pass 19 3.3 common observ 27 v 3.4 limitations.. 27 4 result discussion. 28 5 conclus 33 references. 34 vi list tabl tabl page 4.1 model render 1024x768 5 sampl 10 step ray-marching. 30 vii list figur figur page 1.1 figur clearli illustr shadow soft shadow help clearli perceiv virtual world 2 1.2 unocclud region hemispher point.... 4 2.1 convert mesh surfac elements. 7 2.2 sampl project depth field. red sampl occlud green unoccluded. 8 2.3 sampl taken hemispher orient normal n... 9 2.4 left sampl kernel n symmetr vector pair distribut edg circle. right 2d illustr symmetr vector project height field. ... 10 2.5 left sampl kernel n vector pair distribut edg circle. right sampl project (grai reject blue accepted) height field. s t horizon tangent angles. 12 2.6 compar tradit shadow map sub-pixel shadow mapping. 13 3.1 pass pipeline.. 15 3.2 pixel vertic triangl stored. 17 3.3 pack 32-bit floating-point valu ndc space [0-1], singl unsign integer. 17 3.4 triangl vertex store differ texture. start counter-clockwis viii vertex0(bottom left), vertex1(bottom right), vertex2(top right), addit textur (top left). 18 3.5 imag zoom information.................... 18 3.6 second pass pipeline.. 19 3.7 local coordin construct tangent(red), bi- tangent(green) normal(blue). note normal face left- hand coordin system.. 20 3.8 tbn matrix tangent world space. 20 3.9 ambient occlus imag render 1024x768 kernel size 15 point ray-march step size 5. darker area repres number ray- triangl intersect i.e. lesser occlus factor... 22 3.10 orang rectangl figur 3.9 area interest, zoom detail. 23 3.11 hemispher triangl strip current point black arrow sampl posit rai direct triangl data intersecting. object (triangl & cube) rai direct ray-march current point. 24 3.12 ray-march textur step size 2 texel 25 3.13 rai march kernel size 10 render 50fps.................. 26 3.14 ray-march kernel size 10 render 18-22fps. 26 3.15 depth resolut artifacts.. 26 4.1 graph demonstr frame rate decreas sampl size increases. textur render 1024x768 resolut 10 step ray- march 28 4.2 imag render 1024x768 resolut step size 10. start ix clock-wise, imag render 5 samples(top-left), 10 samples(top-right), 15 samples(bottom-left) a0nd 25(bottom-right) 29 4.3 left column show nano suit stanford dragon model render 1024x768 5 sampl right column 25 sampl ....................................... 30 4.4 imag render 5 sampl step size 10... 31 4.5 imag render 1024x768 resolut 5 sampl step size 10 32 1 chapter 1 introduct 1.1 motiv shadow plai kei role perceiv world us. shadows, object look like dull flat. visual represent object relat space. order simul virtual world, need comput it, shadows. shadow primarili divid types, larg scale small scale soft shadows. example, shadow present room corners, focal point convex surfaces, clock wall come soft shadows, shadow cover certain area come large-scal shadows. ambient occlus light model approxim soft shadow virtual world (figure1.1). 2 figure1.1: row show imag render phong shade row ambient occlusion[3]. 1.2 background section, provid brief theori mathemat descript render equat ambient occlus present common term basi later discussion. 1.2.1 render equat ambient occlus (ao) radiometri underli concept render equation[4] describ flow radiant energy(her light energy) space. assumpt describ model light consid particle, un-polarized, interference, etc. discussion, suffic consid light particles. follow list quick refer detail explan definit occur later part. 3 solid angl (): 2d, angl consid section unit circl size angl length arc. 3d, solid angl section unit sphere size area set directions. power flux (): light particl contain certain energi (q). number particl cross unit time (t) consid flux. irradi (e): flux unit area (a) i.e. number particl hit surfac unit time. radianc (l): tell bright surfac measur intens particular direct particular point(x) surface. formally, flux unit area solid angl defin l(x, ). usual incom radianc denot li outgo radianc consid lo. (1.1) bidirect reflect distribut function (brdf) defin ratio incid irradi incom direct outgo radianc point x. denot f. physic base light model computation difficult simul real time applic approximated. popular model approximate, cook torrance[5] model split light differ compon ambient, diffus specular. light come directli sourc diffus specular (direct light) light gone reflect consid ambient light (indirect light). this, ambient term want lo equat calcul given [4] follows: (1.2) 4 figur 1.2: unocclud region hemispher point [6]. is, integr direct unocclud region hemispher particular point x defin direct normal n (figur 1.2). integr assumptions[5] feasibl quantity. assumpt incom radianc constant surfac lambertian[7]. assumpt f li constant. integr reduc visibl hemispher point x hemisphere. (1.3) mathemat definit order evalu integral. consid rai shot point x direct visibl function[8] v(x, ) give result 0 rai hit 1 misses. a(x) using: (1.4) integr easi evalu mont carlo integration[8] shoot rai differ direct . (1.5) 5 final result, a(x) valu rang [0-1], 0 mean occlus 1 mean occlusion. invert valu multipli final color. make area darker occlus brighter occlusion. 6 chapter 2 literatur survei ao introduc render commun real-tim applic landis[8]. earlier algorithm ao limit ray-tracers, reason equat (1.5) easili implement ray-cast approach. however, real time applications, ray-trac ultim solut requir entir scene represent work done. solut us rasterization, requir scene time. signific research bring ao real-tim applic interact frame rates. categor number method ways: screen space (use depth buffer scene representation) geometry-bas (use actual geometry) ao. topic discuss screen-space, outlin geometri base methods. 2.1 geometry-bas ao dynam ao [9] paper introduc ao raster pipeline. method work treat vertic surfac element (figur 2.1) emit reflect light. element, comput orient disk position, normal area (precomput triangl share vertic take averag them). preprocess hierarch list base distanc object scene effici travers runtime. 7 main drawback method are, entir depend geometr complex larg preprocess times. method exampl [10] us object imag multipl passes, sampl occlus familiar techniqu call voxel filter ao. advantag geometry-bas approach are, similar qualiti compar ray-tracing. geometry-bas approach face problem consum larg amount time precomputation, store memori limit avail movement scenes. figur 2.1: convert mesh surfac element [9]. 2.2 screen-spac ao 2.2.1 depth buffer approach cryengin 2 [11] ssao techniqu introduced. take depth buffer scene approximation, seen camera. us defer render pipeline, pass acquir depth, posit (the posit reconstruct depth) normal information. next, uniformli distribut kernel n 3d-vector current pixel location, us sampl depth buffer. project random vector depth buffer compar sampl valu current pixel valu linear depth comparison. n vector perform screen space integr 8 equat (1.5) take ratio occlud un-occlud sampl (figur 2.2). visibl function equat taken 1 sampl depth greater current depth valu 0 otherwise. qualiti clearli depend number sampl taken small fewer samples, band introduced. overcom band problem nois (usual random texture) introduced, give visual appeal result. nois remov extra blur pass (for e.g. gaussian blur). figur 2.2: sampl project depth field. red sampl occlud green unocclud [6]. method especi produc differ look random sampl point distribut sphere. planar surfac half sampl insid geometry. slightli differ version [12] built it. address take hemispher orient direct normal (figur 2.3). self-occlus problem address take account samples, line radiu hemisphere. author consid attenu function avoid over-occlus foreground objects. 9 figur 2.3: sampl taken hemispher orient normal n [6]. similar cryengin 2 ssao new method introduc [13] share common process distribut sampl point hemispher complet pass. instead take visibl function account, paper introduc new techniqu call spheric proxies. project sampl point depth buffer, sphere construct it. sphere approxim sampl cut hemispher current location. construct local coordin screen space. extens [14, 15] propos ssao improv qualiti performance. us multi resolut depth buffer enlarg view sampl them. take tempor approach take account previous render frame calcul occlus factor. 2.2.2 angle-bas approach aforement method us depth check calcul visibility, later angle-bas ssao introduc epic game [16]. instead depth buffer us posit buffer sampl kernel n symmetr vector pair distribut boundari circl (figur 2.4). symmetr vector pair posit current location. angl sampl vector pair respect ey calculated. 10 sampl kernel compar previou angles. later, ao estim mean angl pairs: (2.1) figur 2.4: left sampl kernel n symmetr vector pair distribut edg circle. right 2d illustr symmetr vector project height field[17]. clearli infer method similar familiar techniqu call parallax occlus map ray-march approach. popular wide approach industri hbao [18], introduc nvidia. ad exist game nvidia graphic driver. main goal angl visibl horizon. approach primarili make assumptions, height field continu is, rai cast horizon angl occluded. paper us randomli distribut kernel vector edg circl differ is, symmetr pair (figur 2.5). random vector, ray-march approach emploi direct random vector 3d posit sampl points. point, angl calcul largest angl 11 store horizon angl h(). ambient occlus approxim differ horizon angl h() tangent angl t(): (2.2) practic wai follows: (2.3) s random vector n normal current location. author come slight modif algorithm call horizon-split ambient occlus (hsao) [19], ad extra comput increas qualiti performance. paper fundament similar hbao alchemi ambient occlusion[20] develop alchemi engine. currently, popular number games. differ us singl posit buffer sampl differ weight function: (2.4) d distanc random sampl point current locat user paramet choos radius. term qualiti perform superior method [6] compar previous state approaches. 12 figur 2.5: left, sampl kernel n vector pair distribut edg circle. right sampl project (grai reject blue accepted) height field. s t horizon tangent angl [17]. 2.3 sub-pixel shadow map (spsm) method mention us depth posit buffer approxim scene represent actual geometri consideration. new method present heavili inspir futur work specifi paper sub-pixel shadow mapping[1, 2], deal artifact come standard shadow mapping[21]. main problem shadow map limit resolut depth buffer. common solut increas resolution, impact memori consumption. author address issu clever wai store partial represent scene geometri conserv raster [22] reconstruct rendering. give similar result ray-trac approach sub-pixel precis (see figur 2.6 details) interact framerates. requir precomput preprocessing. 13 figur 2.6: compar tradit shadow map sub-pixel shadow mapping.[1] 14 chapter 3 methodolog design implement 3.1 overview previous stated, topic inspir spsm [1]. methodolog outlin follows: pass save compact triangl storag spsm. second pass vertex shader, construct tangent bi-tang normal matrix output it. convert randomli gener vector tangent space world space tbn matrix. world space posit world space random vectors, new random posit project textur coordinates. fetch triangl inform textur coordinates. shoot previou random vector world posit check intersect triangl not. intersects, object occlud it, not. 15 advantag current method are, us actual geometri calcul occlus valu exact valu gener approximations. unlik hbao ssao, limit height field continu etc. 3.2 algorithm terminolog us opengl api. refer opengl api details. us defer render graphic pipelin approach, defer shade geometri store intermedi output comput buffers. section divid two, pass render pipeline. 3.2.1 pass figur 3.1: pass pipeline. 16 vertex shader, convert object posit world space send geometri shader. geometri shader, world space posit vertic current render triangle. vertex, send vertic data raster stage fragment shader. fragment shader pixel, write triangl vertic textur (see figur 3.2). us 96-bit floating-point textur render high quality. it, render light calcul addit purposes. 96-bit floating-point textur take 10-12 mb 1280 x 720 resolution. textures, 30-35 mb storage. current hardwar process lot information, read write costli memori operation. instead, store floating-point valu (three triangle) singl 96-bit unsign integ texture. this, convert vertex world-spac normal devic coordin system, rang [0-1]. divid 96-bit unsign integ 3 equal part (32 bit vertex). then, 32 bit divid equal part k-bit (see figur 3.3). let r 32-bit valu store final compress result, m number bit shift store valu correct locat r, vx x-axi coordin valu vertex ndc space. scale vx valu [0-1] rang previous specifi k-bit rang i.e. [0-2k]. scaling, place vx specifi locat r left shift vx m-bit mask r (see equat 3.1). nearli increas storag effici 60% main advantag is, data want singl textur lookup. retriev data, fetch valu bit mask un- project ndc space world space. bit precis un-project world space float point value. precision, ray-triangl intersect fail second pass, qualiti final output less. imag figur 3.4 figur 3.5 render textur detail. 17 figur 3.2: pixel, vertic triangl stored. (3.1) figur 3.3: pack 32-bit floating-point valu ndc space [0-1], singl unsign integer. 18 figur 3.4: triangl vertex store differ texture. start counter-clockwis vertex0(bottom left), vertex1(bottom right), vertex2(top right), addit light calcul textur (top left). figur 3.5: imag zoom information. 19 3.2.2 second pass figur 3.6: second pass pipeline. gener random vector kernel hemispher send fragment shader. gener vector tangent space, need convert world space them. vertex shader, input tangent normal object world space construct matrix convert world space. matrix call tangent, bi-tangent, normal matrix (tbn). thing observ is, world space vector taken y- axi tangent-space, z-axi taken vector. also, z-axi repres 20 time normal triangle. help shoot primari rai (random vectors) triangl only. figur 3.7 clearli depict local tangent space coordin tangent, bi-tang normal. figur 3.7: local coordin construct tangent(red), bi-tangent(green) normal(blue). note normal face left-hand coordin system. figur 3.8: tbn matrix tangent world space. 21 fragment shader, random vector convert world space tbn matrix. us current world space posit vector new point world space. project point fetch textur coordin triangl inform textur previous stored. triangl vertic vector direct check rai direct hit triangl not. ray-triangl intersection, implemented, geometr based. check rai intersect plane get point plane. let a, b, c point plane x, y, z normal plane, plane equat is: (3.2) point ly plane satisfi equation, paramet d distanc origin. it, substitut vertic fetch triangl normal it. equat becomes: (3.3) vector form (3.4) let origin o current point world space v random vector. new point intersect plane becomes: (3.5) t paramet shift point rai direction. point plane, substitut point plane equat satisfy: (3.6) 22 solv this, final t parameter, substitut equat 3.4 final point plane. note need check vector plane parallel. check dot product normal vector. dot product zero, parallel. need check point plane triangl not, check call inside-out test. given edg triangle, check point insid not. comput cross product vector defin edg vector defin point start vertex. vector point triangle. check this, dot product vector normal product greater zero not. random vector triangl intersect object occlud current point scene. similarly, calcul random vector occlus factor. figur 3.9: ambient occlus imag render 1024x768 kernel size 15 point ray-march step size 5. darker area repres ray-triangl intersect i.e. lesser occlus factor. 23 figur 3.10: orang rectangl figur 3.9 area interest, zoom detail. approach work major issue. triangl new point occluding, object between? example, figur 3.11, red point world space posit random sample. triangl inform posit occlud ray-direction. also, object (triangl cube) direct considered. order fix this, ray-march current posit ray-direct fix number step occlusions. this, triangl shortest distanc distanc fall function. detail, consid point equat 3.5, current point denot o, t step size v random sampl vector. new point point equat 3.5, textur coordin point rai intersect triangl posit not. hit calcul distanc point us fall off, increas step size repeat process occlus found. 24 figur 3.11: hemispher triangl strip current point black arrow sampl posit rai direct triangl data intersecting. object (triangl & cube) rai direct ray-march current point. alternatively, current posit textur space (in opengl directli divid gl_fragcoord.xi resolution) direct vector textur space. directli travers texel texel direct vector project new sampl posit time. figur 3.12 depict rai march textur space. figur 3.12: ray-march textur step size 2 texels. 25 ray-march procedur increas qualiti decreas frame rate drastically. cost ray-triangl intersect number textur look-up increas number steps. example, step size 10 kernel size 10, worst case check 100 ray-triangl intersect textur lookup pixel figur 3.13 3.14 show qualiti ambient occlus rai marching. clearli show 50-60% drop frame rate. figur 3.13: rai march kernel size 10 render 50fps. 26 figur 3.14: ray-march kernel size 10 render 18-22fps. figur 3.15: depth resolut artifacts. 27 3.3 common observ ssao algorithm face main artifacts. depth resolut size hemisphere. current depth buffer us 24 32 bit store depth valu quantized. also, precis depend object nearer farther viewer. problem occur random sampl li closer surface, limit resolut quantiz fals occlus (figur 3.15). depth buffer approximation, avoided. artifact call ao radiu artifact, produc unrealist darken objects. practice, sampl far awai current point falloff function workaround. limit check sampl unrel object, awai scene, usual take radiu hemispher account. us ray-march techniqu check intersect triangl geometry, avoid issue. problem aliasing, come fix random sampl kernel. easili resolv noise. 2d perlin nois solv this, alternatively, us nois textur repeat screen. 3.4 limit major limit approach geometri render far awai result output pass textur render triangl geometri closer texels. cases, ray-triangl intersect pass point output darker be. also, gener random sampl kernel vector evenli distribut hemisphere, discard occlus directions. 28 chapter 4 result discuss test run intel i5 pc, equip 16gb ram nvidia geforc 940m graphic card. test demonstr perform vs qualiti trade differ kernel sampl sizes. graph 4.1, 5-10 sampl imag render 40-25 fp decent quality. render imag seen row figur 4.1. figur 4.1: graph demonstr frame rate decreas sampl size increases. textur render 1024x768 resolut 10 step ray-marching. 29 sampl size increas nois imag decreases. differ imag render 5 sampl versu 20 samples, imag smooth increas accuracy. instead, render number sampl us blur filter smoother output. figur 4.2: imag render 1024x768 resolut step size 10. start clock- wise, imag render 5 samples(top-left), 10 samples(top-right), 15 samples(bottom- left) 25(bottom-right). second test demonstr size data vs performance. tabl 4.1 show model tested. figur 4.2 output model tested. test optim turn i.e. render differ textur 30 vertex instead store texture. larg meshes, improv frame rate decreas render textur size pass store singl texture. number triangl (5 samples) fp model 19058 55 nano suit 28501 39 altier 69451 21 bunni model >100000 17 stanford dragon tabl 4.1: model render 1024x768 5 sampl 10 step ray-marching. figur 4.3: left column show nano suit stanford dragon model render 1024x768 5 sampl right column 25 samples. 31 test depend resolut imag render passes. figur 4.3 lower resolution, achiev higher interact frame rates. improv perform render pass textur lower resolut render second pass higher resolution. problem unwant occlusions, triangl render location. previou test nvidia geforc 940m, mobil graphic card older gpu. test, test high-end mobil desktop gpu hardware, signific perform increase. figur 4.4 nvidia gtx 760 (which bit older mobil gpu tested) render 52 fps. figur 4.4: imag render 5 sampl step size 10 nvidia geforc 940m altier model . 32 figur 4.5: imag render 1024x768 resolut 5 sampl step size 10 altier model. 33 chapter 5 conclus futur work present new ambient occlus method base triangle-bas geometr information. unlik previous propos methods, approach give better approxim interact frame rate preprocessing. major advantag techniqu is, easili integr singl geometri map. major artifacts, occur limit resolut depth buffer, avoided. futur want investig effici pack triangl inform barycentr coordin deriv lose precis singl texture. enabl render textur higher resolutions, help overcom limit base resolutions. area better investig check differ ray-triangl intersect approach suit better current approach. lastly, limit number textur fetches, improv ray-march techniqu searches, instead linear search, major perform improvement. 34 refer 1. lecocq, p., et al. sub-pixel shadow mapping. proceed 18th meet acm siggraph symposium interact 3d graphic games. san francisco,march 2014. p. 103-110. 2. dai, q., b. yang, j. feng. reconstruct geometri shadow maps. proceed 2008 symposium interact 3d graphic games. redwood shores,februari 2008. doi: 10.1145/1342250.1357016. 3. reinbothe, c.k., t. boubekeur, m. alexa. hybrid ambient occlusion. eurograph (area papers).munich, march 2009. p. 51-57. 4. kajiya, j.t. render equation. acm siggraph graphics. new york, februari 1986. p. 143-150. 5. cook, r.l. k.e. torrance, reflect model graphics. acm transact graphic (tog), new york, january1982. 1(1): p. 7-24. 6. aalund, f.p., comparit studi screen-spac ambient occlus methods. 2015. 7. whitted, t. improv illumin model shade display. acm siggraph 2005 courses. lo angeles,juli 2005. doi: 10.1145/1198555.1198743. 8. landis, h., production-readi global illumination. siggraph cours notes, januari 2002. 16(2002). p. 11. 9. bunnell, m., dynam ambient occlus indirect lighting. gpu gems, 2005. 2(2): p. 223-233. 10. reinbothe, c., t. boubekeur, m. alexa. hybrid ambient occlusion. proceed eurograph symposium rendering. munich, march 2009. p. 51-57. 11. mittring, m. find gen: cryengin 2. acm siggraph 2007 courses. san diego, august 2007. p. 97-121. 12. filion, d. r. mcnaughton. effect & techniques. acm siggraph 2008 games. lo angeles, august 2008. p. 133-164. 13. shanmugam, p. o. arikan. hardwar acceler ambient occlus techniqu gpus. proceed 2007 symposium interact 3d graphic games. seattle, april 2007. p. 73-80 . 35 14. bavoil, l. m. sainz. multi-lay dual-resolut screen-spac ambient occlusion. siggraph 2009: talks. new orleans, august 2009. doi: 10.1145/1597990.1598035. 15. smedberg, n. d. wright. render techniqu gear war 2. game develop conference. 2009. 16. mittring, m., technolog unreal engin 4 element demo. advanc real-tim render 3d graphic games, siggraph. lo angeles,august 2012. 17. hardeman, s., guid ssao. 2014. 18. bavoil, l., m. sainz, r. dimitrov. image-spac horizon-bas ambient occlusion. acm siggraph 2008 talks. lo angeles, august 2008.doi: 10.1145/1401032.1401061. 19. dimitrov, r., l. bavoil, m. sainz. horizon-split ambient occlusion. proceed 2008 symposium interact 3d graphic games. redwood shores,februari 2008. doi:10.1145/1401032.1401062. 20. mcguire, m., et al. alchemi screen-spac ambient obscur algorithm. proceed acm siggraph symposium high perform graphics. vancouver, august 2011. p. 25-32. 21. williams, l. cast curv shadow curv surfaces. acm siggraph graphics. new york, august 1978. p. 270-274. 22. hasselgren, j., t. akenine-mller, l. ohlsson, conserv rasterization. gpu gems, 2005. 2: p. 677-690. vita sai vamsheekrishna chaitanya timmaraju candid degre master scienc thesis: screen space ambient occlus partial scene represent major field: scienc biographical: education: complet requir master scienc scienc oklahoma state university, stillwater, oklahoma december, 2017. experience: graduat teach assistant, depart science, oklahoma state university, januari 2017 2017. graduat research assistant, app-center, hbrc, oklahoma state university, august 2017 decemb 2017.