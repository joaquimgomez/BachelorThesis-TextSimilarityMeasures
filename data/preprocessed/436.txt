fempar: object-ori parallel finit element framework origin paper fempar: object-ori parallel finit element framework santiago badia1,2 alberto f. martn1,2 javier principe2,3 received: 5 august 2017 /accepted: 15 septemb 2017 author(s) 2017. articl open access public abstract fempar open sourc object orient for- tran200x scientif softwar librari high-perfor- manc scalabl simul complex multiphys problem govern partial differenti equat larg scales, exploit state-of-the-art supercomput resources. highli modularized, flexible, exten- sibl library, provid set modul combin carri differ step simul pipeline. fempar includ rich set algorithm discret step, (arbitrary-order) grad, div, curl-conform finit element methods, discontinu galerkin methods, b-splines, unfit finit element techniqu cut cells, combin h-adaptivity. linear solver modul reli state-of-the-art bulk-asyn- chronou implement multilevel domain decom- posit solver differ discret altern block-precondit techniqu multiphys problems. fempar framework provid user out-of-the-box state-of-the-art discret techniqu highli scalabl solver simul complex applications, hide dramat complex underli algorithms. framework research want experi new algorithm solvers, provid highli extens framework. work, seri articl fem- par, provid detail introduct softwar abstract discret modul relat geometr module. provid ingre- dient assembl linear system aris finit element discretizations, softwar design complex scalabl multilevel solver postpon subsequ work. 1 introduct origin fe method trace 50s, field drastic evolv decades, lead increasingli complex algorithm improv accuracy, stability, performance. us p-version fe method exponenti con- vergenc make high-ord approxim excel option applic [1]. adapt mesh refin driven posteriori error estimates, i.e., h-adaptivity, essenti ingredi reduc comput cost automat wai [2]. smooth solutions, p-adapt hybrid hp-adapt reduc comput cost target level accuraci [3]. originally, fe method restrict nodal lagrangian base structur problems. extens fe method applica- tions, like porou media flow electromagnetism, moti- vate design complex base requir differ map refer physic space, complic implement & santiago badia alberto f. martn javier princip 1 depart civil environment engineering, universitat politecnica catalunya, jordi girona 1-3, edifici c1, 08034 barcelona, spain 2 cimn centr internacion metod numer en enginyeria, parc mediterrani la tecnologia, upc, estev terrada 5, 08860 castelldefels, spain 3 depart fluid mechanics, universitat politecnica catalunya, eduard maristany, 10-14, 08019 barcelona, spain 123 arch computat method eng doi 10.1007/s11831-017-9244-1 techniqu standard fe codes. saddle-point problem requir particular mix fe discret stabil purpos [4, 5]. recently, novel fe formul propos frame exterior calculus, e.g., mix linear elast problem [6]. physics-compati- ble discret gain attention, e.g., field incompress fluid mechanics. divergence-fre mix fe satisfi mass conserv machin pre- cision, implement certainli challeng [7]. decade, huge computa- tional mechan commun embrac isogeometr analysi techniqu [8], discret space defin term nurb (or simpli splines), lead smoother global spaces. opposit direction, dis- continu galerkin (dg) method activ developed, novel approaches, like hybridiz dg petrov-galerkin dg methods, propos [9, 10]. discret method complex, effici implement tech- niqu complicated. pose challeng design scientif softwar libraries, extens provid framework (easy) imple- mentat novel techniques, resili new algorithm trends. hardwar scientif code run evolv faster. 40 years, core perform steadili increasing, predict moor law. years, supercomput reach 1 exaflop/s, dramat improv comput power affect extrem scale machin radic transform rang platforms, desktop high per- formanc comput (hpc) clouds. abil effi- cientli exploit forthcom 100x boost comput perform tremend impact scientif discoveries/econom benefit base com- putat science, reach field research. however, foreseen exascal growth computa- tional power deliv increas hardwar parallel (in distinct forms), effici exploita- tion resourc simpl task. hpc architectur combin general-purpos fat cores, fine- grain many-cor acceler (gpus, dsps, fpgas, intel mic, etc.), multiple-level disruptive-technolog memories, high non-uniform common denomi- nator [11]. (inevitable) trend challeng algo- rithm/softwar design. tradit bulk-synchron messag pass interfac (mpi) approach like face signific perform obstacles. signific progress mpi?x [12] (with x=openmp, cuda, opencl, ompss, kokkos, etc.) hybrid execut models. go step further, asynchron many-task execut model (e.g., charm??[13], legion [14], hpx [15]) support run-tim system hold great promis [16]. traditionally, research field scientif com- pute develop code reduc number developers, e.g., univers department, limit life span. softwar engin scientif code poor. code rigid non-extensible, develop target applic specif numer method. however, increas level complex term algorithm hardwar develop scientif softwar effici run state-of-the-art numer algorithm hpc resourc real challenge. consid start scratch project kind increas level complexity. furthermore, huge resourc requir carri project, natur develop framework resili new algorithm hardwar trends, order maxim life time, applic broad rang applications. sense, object-ori (oo) programming, provid modular code data-hiding, kei softwar design flexibl scalabl (in term developers) projects. number open sourc oo fe librari avail internet, e.g., deal.ii [17, 18], fenic [19], grin [20], nektar?? [21], moos [22], mfem [23], freefem?? [24], dune [25]. general, librari aim provid machineri requir simul complex problem govern partial differenti equat (pde) fe techniques. case, librari main goal distinct features. libraries, like freefem?? fenics, extrem simpl user interfaces. fenic domain specif languag weak form automat gener correspond fe code (prevent p-adaptivity) includ collect python wrapper provid user- friendli access servic library. sophist librari like deal.ii dune slightli demand learn curve. general, parallel adapt partial supported; far know, librari support parallel hp- adaptivity, dg method used. librari restrict particular cell topology, e.g., deal.ii limit hexahedral/quadrilater (n-cubes) meshes, fenic support simul tri- angular/tetrahedr (n-simplices) meshes. general, librari provid modul differ step simul pipeline, involv set-up mesh, construct fe space, integr assembl weak form, solut result linear system, visual comput solution. solut linear clearli segreg discret step scientif softwar librari describ (for parallel s. badia et al. 123 computations); linear transfer general- purpos spars linear algebra library, mainli petsc [2628], hypr [29], trilino [30, 31]. result, coupl discret step linear solver step weak, reli gener purpos solvers, usual involv simpl interfaces. strong point gener purpos numer linear algebra librari problem-independent, limit perform specif applications, fulli exploit underli properti pde oper numer discretization. 1 seg- regat clear impact type method used. black-box approach general-purpos linear solver favour us algebra multigrid meth- ods, facto linear solver [29]. hand, geometr multigrid method domain decomposit (dd) methods, specif mesh-bas pde solvers, common, superior algebra method cases. geometr multigrid method exploit hp-adapt structur fe space includ deal.ii, serial case. parallel scenarios, dd method cer- tainli evolv decade. modern dd method (necessarily) reli static condens intern variables, requir spars direct method local subdomain problems. instead, inexact solver used, e.g., multigrid methods, linear complex dd precondition defin (see [33, 34]). defini- tion two-level dd method resembl fe methods, exchang fe subdomain concepts, definit strongli relat mul- tiscal fe [35]. furthermore, multilevel extens natur defined. short, state-of-the-art multilevel dd method understood (in inexact version) non-conform multigrid method. mathemat theori dd method sound, high perform implement recent (see [3638]). hand, awar gener purpos fe code integr dd algorithm solut workflow. dd method requir sub-assembl matric used, support major exist advanc oo fe libraries. analogously, us block-precondit gener poorli sup- ported, involv discret addit oper defin approxim schur complement, correspond block-bas assembl matrices. hand, base supercomput trends, segreg time discretization, linearization, space discretization, linear solve, pro- gressiv blur. example, nonlinear precondit parallel-in-tim solver natur wai attain higher level concurr forthcom exas- cale supercomput [36, 39]. fact complic rigid workflow current advanc fe libraries. sense, current effort petsc provid nonlinear precondit interfac [40], reli call-back functions, xbraid solver [41] aim provid time-parallel non-intrus way. 2 fempar project work, present fempar, oo fe framework solut pdes, design incept highli scalabl supercomput easili handl complex multiphys problems. public releas fempar 300k line code written (mostly) oo fortran make intens us featur defin 2003 2008 standard language. sourc code complementari work correspond public releas fempar, i.e., version 1.0.0. avail git repositori [42]. particular, public releas assign git tag fempar-1.0.0, accord semant version system. 2 fempar rich term fe technology. particular, includ lagrangian fes, curl- div-conform ones, e.g., nedelec (edge) raviart-thoma fes. librari support n-cube n-simplex meshes, arbitrari high-ord base fe included. continu discontinu space used, provid machineri integr dg facet (i.e., edg 2d face 3d) terms. recently, beta version code, b-spline added, support cut cell method (use xfem-typ techniques) hp-adaptivity, discuss develop sake brevity. moreover, fempar develop aim provid framework allow develop imple- ment complex techniqu well-suit tradit segreg workflow comment above. fem- par provid highli scalabl built-in numer linear algebra modul base state-of-the-art domain decomposit solvers. fempar provid partial assembl matrices, requir dd solvers; multilevel bddc solver fempar scale half million core 1.75 million mpi task (subdomains) juqueen supercomput [34, 37]. includ abstract framework construct applic precon- dition base multilevel nonoverlap partitions. 1 paradigmat exampl design scalabl solver discret maxwel equat edg elements, involv discret addit oper (discret gradients) chang basi refer fe level [32]. 2 avail fempar: object-ori parallel finit element framework 123 block librari preserv modularity, interfac discret numer linear algebra modul fempar rich focus pde-bas linear systems. path exascale, fempar design permit asynchron implement multilevel methods, term multiphys fe multilevel solvers, exploited, e.g., [37]. uniqu featur avail similar libraries. librari allow user defin block multiphys applica- tions, easili implement complex block precondition [4345]. block cus- tomizable, develop scalabl dd solver electromagnet problem block pre- condition multiphys problems, e.g., magnetohy- drodynam [44]. distinct featur fempar, however, discuss articl forth- come one. gener discuss main ingredi implement discret step fe- like approxim necessary, purpos work. fempar successfulli wide set applic author library: simul turbul flow stabil fe method [4649], magnetohydrodynam [5054], monoton fe [5559], unfit fe embed boundari method [60], addit manufactur simul [61]. highli effici implement dd solver [34, 37, 39, 6266] block precondit techniqu [44]. work overview articl main featur library. detail descript softwar abstract fempar develop efficient, modular, extens implemen- tation fe method support modul broad sense. end, enrich discuss code snippet data structures, bindings, exampl use. 3 document intend guid new fempar develop want familiar softwar abstractions. us tool develop fe code want learn implement fe method advanc oo framework. case, size librari itself, detail exposed, reason articl length. articl read differ ways, necessari fulli understand pre- cede section grasp main idea section. instance, section abstract implement polytop arbitrari dimens relat algorithm technic reader particularli interest intern design type bind implement skip it. experienc fe research skip short section basic fe methods, look (if needed) refer subsequ sections. articl organ follows. sect. 3 present concis mathemat descript fe framework. main mathemat abstract express softwar mean set deriv data type associ tbps, describ subsequ sec- tions. particular, main softwar abstract fempar role solut problem are: polytope, describ set admiss geometri permit automatic, dimension- independ gener refer cell struc- ture domains. mathemat underli poly- tope present sect. 3.14, softwar implement sect. 4. polynomi abstract relat data types, present sects. 3.4 5, respectively. section shape function base gener arbitrari order n-cube n-simplex topologies. refer fe sect. 6, describ refer cell defin set basi function degre freedom cell. triangul sect. 7, repres discret approxim physic domain x. set tool requir perform numer integr (e.g., quadratur geometr maps) produc refer fe describ sect. 8 cell integr sect. 9 facet integrals. fe space describ sect. 10, built triangul set refer fes, repres global space fe functions. discret integration, abstract class extend user defin affin fe operator, describ numer integr weak form problem solved, describ sect. 11.2. linear (affine) oper sect. 11, root solut problem hand, construct fe space discret integration. 3 code snippet written advanc oo fortran 200x [67]. close relationship languag featur avail c?? languag [68] establish code style rule emphas it. particular, fortran modul fempar name suffix _names, indic analog namespac c??. deriv types, analog c struct c?? classes, name _t distinguish instances. kept mind that, struct c?? passiv data contain class carri methods, fortran deriv data type case introduct 2003 standard call type-bound procedur (tbps). s. badia et al. 123 exampl user driver sect. 12, differ ingredi previous describ simul problem govern pdes, stoke system. (veri simplified) graphic overview main soft- ware abstract fempar relation- ship shown fig. 1. 3 fe framework section, briefli introduc mathemat abstract fe method discret problem govern pdes. detail exposi- tion topics, refer [6972]. fe describ (and cover herein) for- mulat analyz finit element exterior calculu framework [6], make us exterior algebra exterior calculu concepts. framework, defin fes, e.g., div curl-conform ones, arbitrari space dimensions, concept differen- tial k-forms. however, decid us present fe method simplifi exposit reader familiar abstractions. 3.1 boundari valu problem weak form interest problem govern pde pose physic domain x rd boundari c: ox. practic d 2; 3 interest d[ 3 particular applic (see sect. 3.14). let con- sider differenti oper a, e.g., laplac oper d, forc term f : x ! r. let consid partit c dirichlet boundari cd neumann boundari cn, correspond boundari data ud : cd ! r gn : cn ! r. boundari valu problem read follows: ux aux f x x; bdux udx cd; bnux gnx cn: 1 oper bd trace oper bn flux operator. boundari conditions, e.g., robin (mixed) condit considered. assum unknown ux (1) scalar, vector, tensor field. (the case multi-field problem consid sect. 3.11.) fe analysis, consid weak form (1). weak formul state abstract set follows. let consid abstract problem determin banach space x (trial space), reflex banach space y (test space), continu bilinear form : x y ! r, continu linear form : y ! r. abstract problem state as: u 2 x au; v v; v 2 y: 2 link formul following. let dx space c1 function compact support x; dual space dx0 space distributions. that: au;u: hau;uix; u : hgn;uicn hf ;uix; u 2 dx; deriv understood distribut sense. e.g., laplac operator, bilinear form read au; v: r x ru rvdx. furthermore, homogen dirichlet boundari conditions, i.e., u 0 cd, usu- alli enforc strong way; function y satisfi boundari conditions. extens non-homoge- neou boundari condit straightforward. defin arbitrari extens eud dirichlet data, i.e., eud ud cd. next, defin function u0 : u eud zero trace cd solv (2) u0 right-hand v aeud; v: 3 fig. 1 main softwar abstract fempar relationship fempar: object-ori parallel finit element framework 123 let consid classic examples. exampl 3.1 (heat equation) let consid poisson problem r jru f u ud cd onu gn; n outward normal. let assum j 2 l1xdd, f 2 h1x, gn 2 h 1 2cn, ud 2 h 1 2cd. let consid extens eud 2 h1x eud ud cd. weak form problem read as: u0 2 h10x z x jru0 rvdx z x fvdx z cn gvdc z x jreud rvdx; v 2 h10x: solut u: u0 eud. exampl 3.2 (stoke problem) stoke problem con- sist find veloc field u pressur field p r lu rp f ; r u 0; (for example) u ud c, u 12 ru rut strain tensor. weak form problem consist find u0; p 2 x : h10x dl20x l z x u0 : v z x r vp z x qr u0 z x v f l z x eud : v z x qr eud; v; q 2 x , eud 2 h10x d extens dirichlet data, i.e., eud ud c. solut u: u0 eud. 3.2 space discret fe problem (2) infinite-dimension problem. order end comput one, introduc finite- dimension subspac approxim proper- ties. restrict fe scheme broad sens involv conform non-conform spaces. thus, aim explicitli build space x h (and yh) approxim properties. discret space sub- space origin on (conforming), i.e., x h x yh y, discret problem read as: uh 2 x h auh; vh vh; vh 2 yh: petrov-galerkin problem. particular case x h yh, galerkin problem. previou problem ill-pos choic fe spaces, e.g., discret space satisfi inf-sup condit indefinit problem [5]. cases, judici chosen perturb a; , repres ah; h respectively, stabil problem stabl optim convergent, circumv inf-sup condit restriction. gener case, fe space as: uh 2 x h ahuh; vh hvh; vh 2 yh; 4 replac continu bilinear form gener discret bilinear form. defin affin oper f huh ahuh; h 2 y0h; 5 state (4) as: uh 2 x h f huh 0. statement practic imple- mentat fe oper fempar (see sect. 11). order defin fe spaces, requir triangul t h domain x set fkg cells. triangu- lation assum conforming, i.e., neighbour cell k; k 2 t h, intersect k \ k k- face (k\d) cell (note k-face refer geo- metric entity, e.g. cells, faces, edg vertic d 3, sect. 3.14). practice, cell express particular type map set admiss geometri (polytopes, sect. 3.14). thus, element k 2 t h, assum ref- erenc cell kk diffeomorphismuk : k ! k. follows, usual us notat x: u1k x. definit function space reli refer function space follows: (1) defin function space refer cell k; (2) defin set function physic cell k function mapping; (3) defin global space assembl cell-bas space plu continu constraint cells. order present process, introduc concept refer fe, fe, fe space, respectively. 3.3 fe concept refer physic space abstract definit ciarlet, fe repres triplet fk;v;rg, k compact, connected, lipschitz subset rd, v vector space functions, r set linear function form basi dual space v0. element r so-cal dof fe. denot number moment nr. moment written ra 2 n r : f1; . . .; nrg. defin basi f/aga2n r v ra/b dab a; b 2 n r. function so- call shape function fe, one-to-on map shape function dofs. given s. badia et al. 123 function v, defin local interpol fe hand pkv : x a2n r rav/a: 6 easi check interpol oper fact projection. refer space, build refer fe k; v; r follows. first, consid bound set possibl cell geometries, denot k; definit polytop sect. 3.14. k, build function space v set dof r. consid exampl refer fe sects. 3.8, 3.9, 3.10. physic space, fe triplet k;v;r mesh cell k 2 t h reli on: (1) refer fe k; v; r, (2) geometr map uk k : ukk, (3) linear biject function map wk : v ! v. func- tional space physic space defin v : fwkv u1k : v 2 vg; us wk : v ! v defin wkv : wkv u1k . set dof physic space defin r: fr w1k : r 2 rg. given set shape function f/a : 2 n rg refer fe, easi check f/ak : wk/a : 2 n rg set shape function fe physic space. refer fe space v usual polynomi space. thus, ingredi defin base polynomials; sect. 3.4. analyt express basi shape function straightforward complic definit moments; topic cover sect. 3.5. that, consid build global (and conforming) fe space sect. 3.6, integr bilinear form correspond weak formul sect. 3.7. final provid exampl fe sects. 3.8, 3.9, 3.10. 3.4 construct polynomi space local fe space usual polynomi spaces. given order k 2 n set n k distinct point (nodes) r (we indistinctli repres node index posit xi), defin correspond set lagrangian polynomi fk0; . . .; kkg as: kmx : pn2n knfmgx xs pn2n knfmgxm xs : 7 defin lagrangian basi lk fki : 0 kg. set polynomi basi k-th order polynomials. note kmxl dml, 0m; l k. multi-dimension spaces, defin set node cartesian product 1d nodes. given d- tupl order k, defin correspond set node n-cube as: n k : n k1 n kd . analogously, defin multi-dimension lagrang basi lk fkm : m 2 n kg; kmx : pdi1 ki mi xi: 8 clearly, kt xs dst, s; t 2 n k . cartesian product construct lead basi local fe space usual n-cubes, i.e., space polynomi degre equal k respect variabl x1; . . .; xd. defin mono- mial d-tupl pax : pdi1x ai , polynomi space order k qk spanfpax : 0 ai ki; 1; . . .; dg. qk spanf : 2 lkg. definit polynomi space n-simplic slightli different. requir definit space polynomi degre equal k variabl x1; . . .; xd. involv cartesian product 1d lagrang polynomi (or monomials) truncat space, i.e., correspond polynomi space order k pk spanfpax : jaj kg, jaj : pd i1 ai. analo- gousli n-cubes, basi dual space pk valu set node ~n k : fs 2 n k1 : jsj kg. gener typic grad-conform fe n-simplices. 3.5 construct shape function basi analyt express shape function complic high order fe non-trivi defi- nition dofs, e.g., electromagnet applications. furthermore, code provid basi arbitrari high order, automat gener shape function implemented. explicit con- struction shape function obvious, proce follows. let consid fe defin fk;v;rg.4 first, gener pre-basi fwbgb2r span local fe space v, e.g., lagrangian polynomi basi (see sect. 3.4). hand, given set local dofs, proce follows. shape function written /a p b2n r uabw b , wb element pre- basis. definition, shape function satisfi ra/b dab a; b 2 n r. result, let defin cab : rawb. (use einstein notation): 4 section, differ refer physic spaces, e.g., symbol. case, follow develop usual perform refer fe level. fempar: object-ori parallel finit element framework 123 ra/b raubcwc rawcubc dab; compact form, cut i, ut c1. result, uab c1ba . shape function comput linear combin pre-basi functions. 3.6 global fe space conform finally, defin global fe space. conform fe space defin as: x h : fv 2 x : vjk 2 vg: main complic definit enforc con- formiti fe space, i.e., x h x . fact, con- formiti constraint motiv choic r andw, consequence, r. practice, conform constraint re-stat continu constraint fe dofs. general, constraint implicitli enforc global dof numbering, possibl gener adapt scheme non-con- form mesh and/or variabl order cells, requir involv constraints. let defin mh : fb;k : b 2 n rk ; k 2 t hg cartesian product local dof cells. defin global dof quotient space mh equiva- lenc relat . standard notation, given , equival class 2 mh respect repre- sent : fb 2 mh : bg, correspond- ing quotient set n h : fa : 2 mhg. set n h set global dof repres local-to-glob dof map. assum equival relat element b;k; b0;k 0 2 mh b;k b0;k 0, k 6 k 0.5 one-to-on map moment shape functions, oper allow defin global shape function /a p b;k / b k . assum choic satisfi conform constraint, i.e., x h spanf/aga2n h x . let consid infinite-dimension space ~x (1) x h ~x x (2) function v 2 ~x global dof 2 n h, local dof b; b0 2 rbv rb0 v, i.e., local dof relat global dof continu cells. global interpol defin as: pxhv : x k2t h pkv x k2t h x b2n rk rbv/bk ; v 2 ~x : 9 easi check fact projector. case, us project oper refer projector involv solut global fe system, e.g., base minim l2 h1 norm. below, provid detail choos local dof r, function map w, equival relat conform properti satisfi grad, div, curl-conform fe spaces. case non- conform methods, e.g., dg methods, readili considered. case, conform constraint required, lead flexibl def- init dofs. side, scheme requir numer perturb continu bilinear linear form (4) involv integr facet fe weakli enforc conformity. (facet d 1- faces, e.g., face 3d edg 2d). defin basi fe space x h yh fe machineri present above, fe function uh uniqu repres vector u 2 rjn hj uh p b2n h / bub. fact, problem (4) re- state as: u 2 rjn hj ah/b;waub hwa; 2 n h: end finite-dimension linear prob- lem, i.e., linear system. note general, trial space moment differ on test space, soon cardin same. matrix form, problem state as: solv au f; aab : ah/b;wa; fa : hwa: 10 assum bilinear form split cell contribut ah; p k2t h ak; , e.g., replacingr x p k2t h r k , construct matrix imple- ment cell-wis assembl process, follows: aa b x k2t h x a;b2n rk akab : x k2t h x a;b2n rk ak/bk ;w k: 11 fe affin oper (5) repres f huh : au f, i.e., repres matrix vector size jn hj. 3.7 numer integr general, local bilinear form state as: ak/bk ;w k z k f xdx; evalu f x involv evalu shape function derivatives. let repres jacobian geometr map jk : ouk ox . rewrit cell integr refer cell, consid 5 assumpt fact appli fe kind, local function space conform requir equival class cell level. s. badia et al. 123 quadratur rule q defin set points/weight xgp;wgp, follows: z k f xdx z k f uxjjk jdx x xgp2q f uxgpwxgpjjkxgpj: 12 here, main complic evalu f uxgp. construction, evalu func- tional requir evalu oa/ b k uxgp valu multi-index (idem test func- tions). usually, jaj 2 c0 fes, higher-ord deriv requir higher inter-cel continuity. second derivatives, sens broken cell- wise integrals, fact need method base stabil techniqu base pointwis evalu residu interior cell [46]. let consid case zero derivatives, i.e., evalu /bk ukxgp r/ b k ukxgp. valu shape function (time geometr map- ping) quadratur point determin follows: /bk ukxgp w/ bxgp; 13 shape function gradient comput as: r/bk ukxgp rw/ b u1k ukxgp rxw/bxgpj1k xgp; 14 elementari differenti rule invers function theorem equality; rx repres gradient refer space. thus, need provid valu jacobian, inverse, determinant, side, valu shape function w/b gradient rxw/b refer space, side, quadratur points, comput entri fe matrices; sec- ond order deriv treat analogously. quadratur rule k n-cube readili obtain tensor product 1d quadratur rule, e.g., gauss-legendr quadrature. symmetr quadratur rule triangl tetrahedra differ order found, e.g., [69]. case, creat arbitrarili larg quadratur rule n-simplices, consid so- call duffi transform [73, 74]. known, consid n-cube topolog k, gauss quadratur n point direct integr exactli 2n 1 order polynomials. e.g., lagrangian refer fe order p affin geo- metric map, choos n p ceiling1=2 p 1 direct integr exactli mass matrix. n-simplex meshes, us symmetr quadratur (if available) tensor product rule plu duffi transform [73, 74]. case base introduc chang variabl transform n-simplex integr domain n-cube, integr n-cube tensor product quadratures. worth note chang variabl introduc non-const jacobian. deter- minant jacobian order d 1 respect variable. integr mass matrix exactly, abl integr exactli polynomi order 2p d 1. therefore, need n p ceilingd=2 exactli integr mass matrices. 3.8 grad-conform fes: lagrangian (nodal) element section, consid character abstract fe technolog above. first, interest so-cal nodal fes, base lagrang polynomi dof base nodal values. let consid order components, i.e., k1: k; . . .; k.when refer geometri k n-cube, defin refer fe space vk : qk1. set node n k1 generated, e.g., equidist lagrangian nodes. let defin biject map set node n k1 f1; . . .; jn k1jg n r, i.e., local node numbering. set local dof n rk nodal values, i.e., ri : vxs, s 2 n k . clearly, refer fe shape function relat dof /i : k1 . hand, simpli wv : v. n-simplices, consid refer fe space pk span pre-basi fpax : 0 ai k; 1; . . .; dg set node ~n k (see sect. 3.4). set local dof n rk nodal values. pre-basi ele- ment shape functions, proce sect. 3.5 gener express shape function basi arbitrari order refer fe n-simplices. global fe space determin follow equival relation. set local dof n-cube mh : fs;k : s 2 n k1;k 2 t hg one-to-on map dof nodes; replac set node ~n k n-simplices. furthermore, s;k s0;k 0 iff xs xs0 . implement equival relation, thus, global numbering, reli ownership relat n-face dof (e.g., 3d dof belong vertex, edge, face) permut local node num- bere k k node f. sect. 3.14 details. global dof defini- tion, easi check global fe space function c0 grad-conforming. lagrangian moment involv point-wis evalua- tion function h10x 6 c 0x d[ 1, fempar: object-ori parallel finit element framework 123 interpol (9) defin space. instead, consid function interpol belong, e.g., space ~x : c0x. deal vector tensor fields, gener cartesian product scalar space follows. defin local fe space vk : qk1 d function map wv: v. vector case, local dof set repres mh : fi; s;k : 1 d; s 2 n k1;k 2 t hg, i; s;k i0; s0;k 0 iff i0 xs xs0 . analogously, shape function comput /a : p i;s;k k1 s ei; ei repres i-th canon basi vector rd . proce analog n-simplices. verif node posit straightforward. first, node s k, assign n-face owner f (e.g., vertex, edge, face, cell); cell dof replicated. given node s 2 n k1 cell k belong n-face f, determin index sf respect f k. analogously, node belong n-face cell k 0, repres s0f . hand, defin permut map pff;k;k 0; ; 15 that, given local index node n-face f respect k, provid index n-face f respect k 0 (see sects. 3.13 3.16 details). thus, xs xs0 iff pff;k;k 0; sf s0f . 3.9 div-conform fe present so-cal raviart-thoma fe vector field [5]; implement brezzi-douglas-marini fe analogous. case, order differ space dimension. let start raviart-thoma fe n-cubes. 2d, space read vk : qk1;k qk;k1, 3d read vk : qk1;k;k qk;k1;k qk;k;k1; raviart-tho- ma element fact consid dimension. basi r 3d compos type dofs, boundari interior dofs, defin 1 kf0k z f0 v n uf qdc; q 2 pk; 1 kkk z k v qdx; q 2 qk1;k;k qk;k1;k qk;k;k1; 16 respect 6 ; 2d case straightforward, replac space shape function interior moment qk1;k qk;k1. definit boundari facet involv map refer facet f0 facet f fe k, i.e., uf : f0 ! f. boundari moment associ function lagrangian space, thus, node index. result, boundari dof index node n k1 (for d 2) corre- spond facet f, i.e., moh : ff; s;k : f facet k; s 2 n k1;k 2 t hg. f; s;k f0; s0;k 0 iff f f0 xs xs0 . check xs xs0 holds, proce similarli lagrangian elements. shape function built sect. 3.5. consid lagrangian pre-basi v, comput shape func- tion change-of-basis. function map read follows: wkv : 1 jjk j jkv; 17 map wk u1k so-cal contravari piola transformation. check definit map assembl defin lead global fe space div-conforming; i.e., function continu normal compon inter-cel facets. thus, xh hdiv;x [5]. n-simplices, refer fe space vk : pk d xpk, k 0; 1; 2; . . ., basi r compos follow boundari interior dofs: 1 kf0k z f0 v n uf qdc; q 2 pk; 1 kkk z k v qdx; q 2 pk1 d: case, gener pre-basi lagrangian fe space functions, easili express span vector function compon select subset pk1. 3.10 curl-conform fe weak formul electromagnet problem involv function space hcurl;x. conform fe space hcurl;x preserv continu tangenti compon field. so-cal edg element (or nedelec elements) curl-conform fe [72]. raviart-thoma elements, edg element pre-basi n-cube involv differ order dimens component. 2d, space read vk : qk1;k qk;k1, 3d read vk : qk1;k;k qk;k1;k qk;k;k1. basi r compos type dof (in 3d), edge, face, interior dofs, defin as: 6 test function space definit moment consid respect correspond domain integration. s. badia et al. 123 1 ke0k z e0 v s ueqdk; 8q2pk1; 1 kf0k z f0 jt f vn uf qdc; 8q2qk2;k1 qk1;k2; 1 kkk z k v qdx; 8q2qk1;k2;k2 qk2;k1;k2 qk2;k2;k1; respectively, edg map ue defin face. boundari dof index triplet f;s;k, f edg face 3d, follow idea raviart-thoma elements. case, function map read follows: wkv : jtk v; 18 map wk u1k so-cal covari piola transformation, lead global fe space curl-conform [72], i.e., function continu tangenti compon inter-cel facets. n-simplices, space read as: vk : pk d sk; sk : fv 2 pk1 d : vx x 0 8 x 2 kg: 19 basi r 3d compos follow boundari interior dofs: 7 1 ke0k z e0 v s ueq dk; 8q 2 pk1; 1 kf0k z f0 jt f v n uf q dc; 8q 2 pk2 2 1 kkk z k v q dx; 8q 2 pk3 3: 2d, type dof required, relat facet (edg 2d) second interior dof own cell. raviart-thoma elements, pre-basi function lagrangian shape functions, express span vector function compon select subset pk1. refer [75] dis- cussion actual gener pre-basi space (19) fempar. 3.11 cartesian product fe multi-field problem problem govern pde involv field, e.g., navier-stok equat multi-phy- sic problem. let consid pde involv set unknown field u1; . . .; 2 x 1 . . . xn, defin cartesian product function spaces. proce above, defin fe space field space separately, lead global fe space x 1h . . . x n h defin composit fe spaces. defin global number dof multi-field case, consid dof equival relat field satisfi equival relat fe space field. cartesian product fe space defin volume-coupl multi-phys problem govern physic domain, i.e., differ physic defin domain coupl volum term formulation. however, multi-phys problem interface-based, i.e., coupl differ physic defin differ subdomain transmiss condit interface. case, e.g., fluid-structur problem (see, e.g., [7679]). cases, differ fe space defin differ part global mesh, i.e., set subdomain x1; . . .;xn domain x correspond fe space defined. 3.12 non-conform method now, consid global fe space conforming, i.e., x h x . alternatively, consid fe scheme conforming. origin bilinear form sens gener non-conform fe space x h, shall consid stabil bilinear form ah well-pos (stabl continuous) discret setting. general, scheme replac requir inter-cel continu conform weak imposit continuity. thus, inter-cel continu impos weakli penalty-lik terms. dg method scheme type [71]. sense, non-conform fe space simpler conform ones, conform required; flexibl definit local dof equival class concept needed, dof belong element. however, bilinear form usual requir integr facet terms, i.e., term type: x f2f h z f f xdx: integr facet term far complic cell terms. let briefli illustr simpl applic non- conform methods, fe discret poisson problem so-cal interior penalti (ip) 7 note jt f v instead jt f v n definit face moments, row jacobian matrix transform ax refer face f0 actual face f refer cell space test function invari rotations. fempar: object-ori parallel finit element framework 123 famili dg formul [71]. dirichlet boundari con- dition constraints, ux udx bound- ari c domain x, weakli imposed, natur kind formulations. global discret trial space x h compos function continu cell, discontinu cells, i.e., x h fuh 2 l2x : uhjk 2 x hjk h1k; k 2 t hg, discret test space yh x h. denot fxh f c h set interior boundari facet t h, respec- tively, discret weak form underli famili method read as: uh 2 xh x k2t h z k ruh rvh x f2fx h z f vh ffruhgg s x f2fx h z f uh ffrvhgg x f2fx h cjfj1 z f uh vh x f2fc h z f vhruh n s x f2fc h z f uhrvh n x f2fc h cjfj1 z f uhvh x k2t h z k fvh s x f2fc h z f udrvh n x f2fc h cjfj1 z f udvh 8vh 2 yh; 20 s fix constant character particular method hand, c facet-wis posit constant refer penalti parameter, jfj denot surfac facet; s c suitabl chosen bilinear form ahuh; vh left-hand (20) well-pos (stabl continuous) discret setting, result fe formul enjoi optim rate converg [71]. finally, denot k k cell share given facet, ffwhgg wh denot mean valu jump wh cell facets: ffwhgg wh w h 2 ; wh wh n wh n ; 21 n, n facet outward unit normals, wh , wh restrict wh facet, perspect k k, respectively. comput assembl dof relat interior node straightforward. regard facet terms, assum sit interior facet f 2 fxh , facet-wis matrices, f kk , f kk , afkk , f kk , computed. (the case boundari facet f 2 fch degener case cor- respond interior facet singl facet-wis matrix afkk computed; omit sort facet discuss order present short.) hold partial contribut facet correspond global entri coeffici matrix. entri of, e.g., afkk , defin (for particular problem hand) as: afkk ab z f /bk ffr/ kgg s z f /ak ffr/ b kgg cjfj 1 z f /ak / b k ; 22 indic b rang 1 number shape function n r k k, respectively. 3.13 facet integr mention sect. 3.7 case cell integrals, facet integr involv comput facet- wise matrix (22) gener comput analyti- cally. instead comput quadratur rules. general, bilinear form contain facet term state af/bk ;w k z f f xdf: consid refer facet f, map uf : f ! f refer physic space. let repres jacobian geometr map jf : ouf ox , valu rd1d. rewrit facet integr refer facet, consid quadratur rule q f defin set points/weight xgp;wgp, follows: afkk ab z f f xdx z f f ufxjjf jdf x xgp2q f ufxgpwxgpjjfxgpj: 23 jjf j defin as: jjf j duf dx 2 jjf j ou1f ox ou2f ox 2 ; 24 d 2; 3, respectively. express shape function gradi- ent physic space term on ref- erenc space comput cell-wis maps. thus, map uk uk refer cell k cell k k physic space, respectively, involv numer evalu s. badia et al. 123 interior facet integrals. consid refer facet f map uf refer facet f (analog uk k dimens refer space). defin quadratur rule xgp;wgp f. defin refer facet f k ukf f, map uf f f . map, defin quadratur xgp : ufxgp;wgp respect refer cell k. however, facet f (in general) differ orient depend cell reference, so, differ index assign facet quadratur point perspect cell, i.e., ukxgp 6 ukxgp general. adopt convent facet quadratur point identifi local number space k, local identifi translat local number space k. repres permut pgp ukxpgp ukx gp ufxgp: logic underli translat equival discuss sect. 3.16; fig. 2 explanatori illustration. result, u1k ufxgp x gp; u 1 k ufxgp x pgp: let consid evalu zero order deriv facets, i.e., evalu /bka ukaxgp r/bka ukaxgp 2 f;g, quadra- ture point belong quadratur refer facet f. note introduct w need non- conform methods, continu enforced, consid ident oper simplicity. valu shape function (time geometr mapping) facet quadratur point evalu follows: /bka ufxgp / b u1ka ufxgp; shape function gradient comput as: r/bka ufxgp rx/ bxgpj1k u 1 ka ufxgp: loss generality, let focu integr (22). replac mean valu jump oper definit (21), take account /bk r/ak vanish k k (by construct x h yh), respectively, end follow inte- gral comput numerically: 1 2 z f /bkn r/akdf : integr map refer facet f rd1, approxim follow sum quadratur points: 1 2 z f /bkn r/akdf 1 2 z f /bk u 1 k ufxgpn ufxgp rx/bxgpj1k u 1 k ufxgpjjfjdf 1 2 x gp2q /bkx pgpn xgp rx/bxgpj 1 k x q jjfxgpjwgp: 25 ideas, comput term relat facet integrals. furthermore, outward normal facet comput as: na 1oa duf dx duf dx 2 na 1oa ou1f ox ou 2 f ox ou1f ox ou 2 f ox 2 ; 26 d 2; 3, respectively, 2 f;g; o 0 1 enforc normal outwards. tangent vector(s) given facet easili comput normal vector. 3.14 polytop motiv fempar develop framework deal arbitrari space dimensions. permit readili implement space-tim formulations, pose 4d. higher-dimension appli- cation includ system pde pose phase space, e.g., 7d (includ time) vlasov-maxwel equat simul plasmas. section, provid mathemat abstract cell topolog base concept polytope. fig. 2 map requir facet integration. (only) quadratur point shown physic space locat x ufx1 uk x1 uk x2 , is, p1 2 case fempar: object-ori parallel finit element framework 123 abstract concept practic importance, allow develop algorithm code appli topolog fit framework. framework develop gener includ triangl quadrilater 2d, tetrahedra, hexahe- dra, prysms, pyramid 3d. furthermore, extend arbitrari dimensions, defin n-cube n-simplic topologies. polytop mathemat defin convex hull finit set points. consequence, polytop polyhedron. frame fempar, consid poly- tope express imag composit operators. definit topolog refer fe base idea [25]. main topolog inform consum fe code descript d-dim polytop boundari assembl d 1-dim polytopes, proceed recur- sive till 0-dim object obtain (vertices); us contract k-dim object object dimens k. lower-dimension entiti describ polytop boundari denot n-faces. usually, nomenclatur n-face fe restrict 3d problems. fempar follow exposi- tion, us dimension-independ nomenclatur order accommod higher-dimension problems. consid space dimens d 2 n d-dim poly- tope. defin d-face polytop itself. set d 1-dim polygon compos boundari polytop d 1-faces; d 1-face usual denot facets. proce recursively, i.e., defin- ing k 1-face polytop set facet k-face till reach 0-faces. 3d, 3-face call cells, 2-dim face faces, 1-dim face edges, 0-dim face vertices. herein, us term n-face denot objects. work, denot vef set n-face dimens lower space dimension, e.g., includ vertices, edges, face 3d. let introduc notation. repres set bitmap size m bm. bitmap 1; 1; . . .; 1 0; 0; . . .; 0 repres 1 0, respectively. given domain h rd us notat ah b, 2 r, b 2 rd denot domain fax b : x 2 hg. ej repres j-th canon basi vector rd . let defin direct extrus hj;a;b h respect direct ej type a; b. determin topolog extrusion, prysm-typ extrus (1) pyramid-typ extrus (0) (see [25]). b determin want perform a- extrus (1) do-noth (0). base this, follow definition. definit 3.3 (direct extrusion) given domain h rd, defin hj;a;b rd, b; 2 f0; 1g j 1; . . .; d, hj;a;0 : h; hj;0;1 : f1 zh zej : z 2 0; 1 g; hj;1;1 : fh zej : z 2 0; 1 g: direct extrus recurs defin polytop n-faces. n-face determin topolog t 2 bd, extrus e 2 bd, anchor vertex v 2 rd, recurs procedur follows. us direct extrus differ polytop n-face illustr figs. 3 4. observ lower dimension n-face direct extrus lead dimens larger n-face differ valu a. definit 3.4 (n-face) given t; e 2 bd v 2 rd, defin n-face h recurs wai follows. let h 0 : fvg; defin h: hd base follow recursion: h 0 ! h1 : h01;t0;e0 ! . . . ! hi1 : h i1;ti;ei ! . . . ! hd : hd1d;td1;ed1: 27 purposes, anchor vertex v 0/1 entries, thus, repres element v bd. result, n-face uniqu repres t; e; v. base definition, defin set d- dim polytop recursion. d-dim polytop given t, repres n-face t; 1; 0, i.e., origin 0 anchor vertex perform extrus directions. hand, vertex v (with 0/1 coordinates) n-face t; 0; v. exampl n-face construct procedur figs. 3 4. furthermore, figur n- face 3-cube 3-simplex, e v values. implement polytopes, us hass diagram base composit extrus anchor vertex bitmap label differ n-face polytope. codes, like fempar , topolog code bitmap t (e.g., 32-bit integer). fempar us geometri defin way, arbitrari space dimension. polytop definit lead follow geometries. 1-dim line segment topolog t 0 (1); ambigu 1d inherit higher dimensions. 2d, triangl topolog t 00 (or (01)) quadrilater topolog t 10 (or (11)). 3d, cube repres t 1; 1; 0 (or (1, 1, 1)), s. badia et al. 123 tetrahedra t 0; 0; 0 (or (0,0,1)), prysm t 1; 0; 0 (or (1,1,1)), pyramid t 0; 1; 0 (or (0,1,1)). cosserat 4d repres t 1; 1; 1; 0 (or (1,1,1,1)). general, 2k1 type k-dim topolog possible. n-cube express t 1 n-simplic t 0. given bitmap t bit a, defin bit oper modifi j bit t t:oja. given chain n-face (27), let assum hi1 repre- sent t; e0; v. extrusionhi : hi1i; ;a defin t; e0:oi1a; v. thus, chain (27) repre- sent follows. given topolog t, extrus e, anchor vertex v, start t; e0; v: t; 0; v proce recursively: t; e0; v ! t; e0:o0e0; v ! . . . ! t; e0:oiei; v ! . . . ! t; e0:od1 1; v t; e; v: 28 e.g., 3d, polytop (or 3-face) determin t 1; 1; 1 e; v 1; 1; 1; 0; 0; 0. chain (28) case read follows: (we omit t chain element recursion.) 0; 0; 0; 0; 0; 0 ! 0; 0; 1; 0; 0; 0 ! 0; 1; 1; 0; 0; 0 ! 1; 1; 1; 0; 0; 0: definit n-face, element chain geometr representation. start vertex 0, obtain line segment fx; 0; 0 : x 2 0; 1 g, squar fx; y; 0 : x; y 2 0; 1 g, final unit cube. previou definit us repres d-dim object n-faces. figs. 3 4. given n-face h t; e; v, want defin set sh n-face h. order so, introduc follow concepts. definit 3.5 (orient set extrusion) given set s fh : h 2 rdg, defin sj;a;b, b; 2 f0; 1g j 1; . . .; d as: sj;a;0 : s; sj;0;1 : fh; 0 ej;hj;0;1 : h 2 sg; sj;1;1 : fh;h ej;hj;1;1 : h 2 sg: definit 3.6 (set n-faces) given n-face t; e; v, obtain n-face recurs follows. let s0 : fvg; defin s : sd base follow recursion: s0 !s1: s01;t0;e0 ! . . .!si1 : sii1;ti;ei ! . . .!sd : sd1d;td1;ed1: 29 fig. 3 e v valu n-face (with except volume) 3-cube, topolog t 111 fig. 4 e v valu n-face (with except volume) 3-simplex, topolog t 000 fempar: object-ori parallel finit element framework 123 result n-face written t; e; v notat comment above. order defin chain (28) (i.e., base bitmap notation), note following. given n-face h t; e; v, n-face h ej t; e; v:oj1. ingredient, implement gener n-face n-face bitmap notation. want know facet n-face. us follow statement. given n-face h t; e; v correspond chain (28), i-th element boundari oh : ohi1i;ti1;ei1 following: oh ohi1; ei 1 0; oh fhi1; ohi1i;0;1g; ti 1 0; ei 1 1; oh fhi1;hi1 ei; ohi1i;1;1g ti 1 1; ei 1 1; 30 oh1 fh0;h0 e1g. definit facet 3d cube, follow faces: ((1, 1, 0); (0, 0, 0)) ((1, 1, 0); (0, 0, 1)) face (x 0 x 1 faces), ((1, 0, 1); (0, 0, 0)) ((1, 0, 1); (0, 1, 0)) face (y 0 y 1 faces), ((0, 1, 1); (0, 0, 0)) ((0, 1, 1); (1, 0, 0)) face (z 0 z 1 faces), have 6 face total. faces, us definit above, obtain d 2-face boundari d 1-face. idea polytope, n-cubes. dif- ferenc type extrus case. 3.15 node gener index fe space polynomi spaces, e.g., lagrangian poly- nomials. (let note div- curl-conform fe reli lagrangian polynomi definit pre-bas definit equival classes.) order express polynomials, defin set point (nodes). following, defin node gener given order arbitrari polytope, lexicograph notation. 8 definit 3.7 (set nodes) let consid polytop h 2 rd repres t; 1; 0. set n k equidist lagrangian node order k, lexicograph notation, gener recurs follows: n k : n kd, n pm1 fa; b : 2 n pb1tm m ; b 2 n p 1g; n q1 fa 2 n : qg: 31 given node 2 nd lexicograph notat assum equidist distribut nodes, space coordin xa 2 rd readili obtained, xa : a=k. note n-cube recov typic tensor product definit node correspond truncat subset node n-simplices. node gener considered, especi high-ord element (e.g., feket points). basic fe analysi ownership relat n-face nodes. particular, basic enforc continu fe enforc continu nodal values. order gener node polytop belong n-face, us follow construction. first, gener local set nodes, def- init above, n-face. given k-face t; e; v rd, consid refer k-dim polytop t0; 1; 0, t0 restrict t compon extru- ded, i.e., t0 : t mg map mg : f1; . . .; ! fj 2 f1; . . .; dg : ej 1g. next, defin local node n-face node refer polytope. defin n-face node local coordinates. finally, defin linear map refer k-dim polytop k-face. map defin k 1 independ conditions. defin enforc map map anchor vertex refer polytop k-face extrus anchor vertex directions: m0 v; me emgs; t 0s 0; me v emgs; t 0s 1: map linear, written as: mx a0 x1a1 . . . xkak: form constraint a0 v. constraints, get: me vt0 emg v ! vt 0s 1 emgs: thus, get: mx v xk s1 xsvt0 1 xsemg xs; 32 thus: 8 note fact order k scalar vector k 2 rd . principle, us vector-valu order sens n-cubes. implement fempar make us vector- valu order, entri polytop n-cubes. note us differ order differ direct basic defin high order raviart-thoma nedelec element n-cubes. follow presentation, consid scalar order case simplicity. s. badia et al. 123 mxi vi1 x fs 1; . . .; k : t0 0g xs xm1 g i: obtain express invers map m analogously. readili us map lexicograph coordinates. result, given k-face, defin node local number base lexicograph label refer k-face. local- to-glob lexicograph label (where global label d-dim base polytope) obtain appli map (32). 3.16 global dof number conform basic ingredi fe analysi imposit continu fe order build conform global fe spaces. process mathemat defin equival class dof (see sect. 3.6). example, function lagrangian fe space relat geo- metric nodes, impos continu function fe equival impos continu nodal valu spatial posit (see sect. 3.8). following, provid mechan identifi node differ cell share posit imple- ment requir equival class. situat slightli involv div-conform curl-con- form fe spaces. cases, determin dof node plu n-face ownership (see sects. 3.9 3.10, respectively). thus, equival class situat formul lagrangian fe (deter- node position) n-face separately. follow sect. 3.6, node cell trian- gulat repres (b, k), b local cell-wis index node k cell global index. given n-face f cell, node rep- resent b0;f;k, b0 n-face-bas local index. example, node 8 (cell-wis local index) cell fig. 6 determin node 1 (facet- wise local index) n-face 8 (see fig. 5). facet- wise local index determin coordin n-face. example, node n-face 8 fig. 6 order (8, 12) (i.e., 8 12). hand, node indic repres coordin lexicograph coordin system, present (31). example, node b 8 (b0 1 n-face 8) repres coordin s 4; 1 (s0 1 n-face). let consid n-face f triangulation, cell k (sourc cell) k (target cell) share n- face, node s0;f;k s0;f;k (with n-face- wise local indices). question answer is: node s0;f;k s0;f;k spatial position? question answer map pf (15) that, given posit node coordin f k, provid k. note map trivial struc- ture (possibl local adapted) n-cube meshes, local order node n-face base increas local index lead order cell con- tain n-face; mesh properli ori- ent case. however, 2d 3d unstructur mesh gener return properli orient meshes, fe code deal explicit construct applic permutations. note end orient mesh n-simplic simpl cell-wis permut (see, e.g., [72, sect. 5.5] [80]). read n-simplex meshes, mesh properli orient fempar proceed computation. true 2d n-cube meshes, 3d n-cube mesh properli orient gener [81]. let consid refer polytop k associ k k. general, n-face f differ n-face local index respect cells; correspond fig. 5 number convent n-face k quadrilater (left) statu vertices_n_fac facets_n_fac correspond number (right). n, p(n?1), l(p(n?1)-1) privat member variabl type(list_t) store number entities, start posit l(:) list associ entity, identifi associ list gather singl array, respect fempar: object-ori parallel finit element framework 123 refer n-face repres f f k k, respectively. general, map node n-face defin (32), invert (sinc linear rank). approach, map gener arbitrari dimens polytop topology. however, particular case 2d/3d n-cube meshes, implement proce- dure computation effici manner. par- ticular, requir permut (mappings) express term set tables, store set (filled) so-cal reference_fe_t abstract data type fempar. refer sect. 6.3 detail implement details. (recal n-simplic mesh actual requir procedur properli (re)oriented.) let consid case 3d n-cube meshes. vertic trivial node permu- tation needed. edg faces, reli follow concepts: rotat index: provid local index anchor vertex f respect coordin f. fe share edges, follow situations. edg anchor vertex seen elements, not. faces, anchor vertex 4 positions. call rotat repres map keep invari refer face f make anchor vertic sourc target cell coincide. orient index: given cell share n-face anchor vertex, orient index code map coordin n-face respect cell respect second one. 9 edges, map identity, cell share edg anchor node provid edge-wis node coordin nodes. faces, situat complex, involv 2 differ possibl situations. orient index equal 0 ident permut 1 swap indices. denot base face face lowest local index (face [011|000] fig. 3). next, consid cube share face, restrict follow scenario: (1) face base face cubes; (2) face anchor vertex cubes. trivial comput orient index cases. orient index gener case cube share face restrict (2), i.e., arbitrari face anchor vertex, obtain composit follows. face orient index base face, orient index equal 1, 0 otherwise. permut index: index obtain composit rotat orient indic (i.e., rang 1 2, 1 8 edg faces, respectively), codifi final map coordin cell composit rotat orient map. note composit possibl rotat orient cover possibl rel posit cell conform mesh. 4 implement polytope_t relat data type fempar, refer fe cell geometri defin polytope_t data type; list 1. input need defin polytop space dimens num_dimens topolog t 32-bit integ topology. fig. 6 number convent dof (scalar-valued) bi-cub lagrangian fe quadrilater (left) statu own_dofs_n_fac reference_fe_t cg (right, top) dg form (right, bottom) 9 following, consid unit cube share face. concept logic account real shape cell physic space. hand, note orient index invari cell share face select second cell. s. badia et al. 123 idea (27), (28), (29), creat set n-face polytop t; e; v (private) fill_polytope_chain tbp, turn invok (public) creat tbp. n-face polytop topology, uniqu determin 32-bit integ repres composit e; v. note order n-face base e; v mix n-face differ dimens non-consecut general. thus, consid order base n- face dimension, e; v. set n-face gener recurs (29) store n_- face_array, arrai size number_n_faces. arrai particular provid e; v associ n- face. invers map (from e; v actual numbering) store ijk_to_index array. possibl iter facet n-face, base (30). create_facet_iter tbp polytope_t creat facet_iterator_t instanc given n-face. facet_iterator_t defin list 2. n-face e; v store root, topolog extract polytop pointer member variable. iter facet describ integers, compon coordinate, idea (30). complex travers facet code facet_iterator_next facet_iterator_ has_finished. list 2. facet_iterator_t data type. list 1. polytope_t data type. fempar: object-ori parallel finit element framework 123 regard implement node fempar, provid node_array_t data type repres set node defin (31); list 3. construct polytop order. provid creat tbp, perform (31) result node node_arrai arrai member vari- able. number node consecut number increas lexicograph index. node arrai provid lexicograph label integer. invers store ijk_to_index. total number node store num_nodes. finally, space coor- dinat node store coordinates. provid node_iterator_t object (see list 4), iter node n-face (s- tore n_face) (31) (32). pointer node_arrai base polytope. internally, goe node n_face (use (31)) (the current node store displacement), translat base polytop node number (32) (store coordinate); coordin comput demand call tbp node_iterator_cur- rent_ijk. own_boundari logic allow iter node consid n-face open close set. note creat tbp node_array_t reli node_iterator_t. 5 polynomial_t abstract fempar, definit shape function hard- coded, usual fe codes. approach sever limitations: (1) practic high order discretizations, code written arbitrari order; (2) involv huge number code line analyt express shape function given set avail order (see discuss [82]); (3) allow dimension-independ code. instead, consid framework base concept sect. 3.5, consid pre-basis, defin moments, perform chang basis. pre-basi defin product 1d function (e.g., cartesian product), 1d function gener written term (arbitrary) order. machineri gener 1d function restrict moment polynomi function variable, lagrangian polynomials, monomials, b-splines, implement extend choices. product 1d function cartesian product 1d lagrang polynomi (or monomials), defin qk space n-cubes, reduc combin monomi defin pk space n-simplices. list 3. node_array_t data type. list 4. node_iterator_t data type. s. badia et al. 123 definit refer fe function space reli polynomial_t data type list 5, repres polynomi variable, i.e., px pk i0 aix k. thus, 1d polynomi defin term order k set k 1 coeffici faigki0, store order coeffici array, respec- tively. differ type extens polynomial_t consid far, lagrange_polyno- mial_t monomial_t. gener lagrangian polynomi sect. 3.4, co- effici arrai order entri coordin node entri coeffici 1 pn2n knfmgxmx (7). monomial_t extens repre- sent xk k order. trivial case polynomial_t optim purpos uniqu defin order (the coeffici arrai needed). consid polynomial_basis_t data type, set (array) (polymorphic) polynomials. point, defin lagrang polynomi monomi variable. lagrange_polyno- mial_t monomial_t provid bind generate_basi gener lagrangian monomi basi polynomials, given order k. result subroutin polynomial_basis_t includ polynomi polynomi space dimension. case lagrangian basis, imple- ment basi lk sect. 3.4, bind monomi simpli implement fxigki0. step gener higher dimension spaces. consid type spaces. space gener cartesian product 1d spaces, implement data type tensor_pro- duct_polynomial_space_t. data type defin number space dimens polynomial_basis_t space dimensions. data type appli combin 1d spaces. e.g., case 1d lagrang base (possibl differ order node dimension), lead list 5. polynomial_t data type relat data types. fempar: object-ori parallel finit element framework 123 multi-dimension basi (8). thus, data type lagrangian 1d base gener lagrangian fe space n-cube cells, i.e., qk space polynomials. 10 furthermore, consid trun- cated_tensor_product_polynomial_space_t extens gener lagrangian fe space n-sim- plices, i.e., pk space polynomials. case, generate_basi tbp monomial_t creat monomi 1d base direct order directions. otherwise, result multi-vari function sense. next, combin 1d monomi involv term jaj k (see sect. 3.4), gener pre- basi fe space tetrahedra, i.e., pk space polynomials. note abstract represent polynomi space defin refer fe local space. however, consid 1d lagrangian basi tensor product polynomi n-cubes, result basi shape function basis. case lagrangian n-simplices, change-of-basi needed, procedur sect. 3.5 take nodal valu moments. sect. 9.5, defin shape function basi case div-conform fe arbitrari order. idea appli grad-conform lagrangian fe n-simplic curl-conform fe general, includ sake brevity. 6 reference_fe_t abstract section, introduc reference_fe_t data type. data type oo represent stan- dard mathemat definit refer fe present sect. 3.3, namely, refer cell geometri k, function space v, set dof r defin it. reference_fe_t central abstract fe librari judici design extens reusable. particular, accommod lagrangian fes, (more involved/general) space like raviart-thoma edg fes, dg methods, b-spline patches. extens reusabl design reference_fe_t allow to, e.g., easili incorpor new local function space origin considered, have rewrit (and recompile) code ground set method provid reference_fe_t. end, fempar, reference_fe_t abstract data type serv templat equip set member variabl defer bind subclass set implement (i.e., override), respectively, order complet descript concret fe space hand. definit reference_fe_t data type, classif member variabl differ categori (correspond ingredi ciarlet definition), enumer relev regular defer bindings, shown list 6. 10 analogously, gener serendip element chang gener multi-dimension space term 1d ones. s. badia et al. 123 list 6. reference_fe_t abstract type, classif member variables, enumer relev regular defer bindings. fempar: object-ori parallel finit element framework 123 section structur follows. member variabl aforement categori cover sects. 6.16.3, respectively. sect. 6.4, discuss oo design pattern chosen fempar creation reference_fe_t poly- morphic instances, argument uniqu defin subclass data type; line mathemat definition. sect. 6.5, enumer- at briefli subclass refer- ence_fe_t current avail fempar. note section self-contain defer bind reference_fe_t cover here. involv interact data type oo design, describ section interact exposed. code comment list 6 serv tabl content articl section defer bind covered. 6.1 refer cell topolog refer cell k polytope. therefore, follow sect. 3.14, describ topology, code set d bits, d dimens polytope. refer cell topolog gener poly- tope_t describ sect. 4, offer method like composit local number n-faces. polytop topolog includ triangl quadrilater 2d, tetrahedra, hexahedra, prysms, pyramid 3d. member variabl charg descript ref- erenc cell topolog k shown line 510 list- ing 6. user provid topolog dimens polytop defin k, store member variabl topolog num_dimensions, respectively. set getter return basic information, relat data gener them, e.g., number n-face boundari cell store num_n_fac member variable. list vertex identifi n-face list facet (of dimens n 1) n-face store ver- tices_n_fac facets_n_face, respectively; fig. 5 illustr member variabl data type list_t fempar store tra- vers lists. fempar data type list_t store set (vari- able-sized) list integ identifiers, entity; particular scenario, entiti n-faces. shown fig. 5, current implement data type us compress storag layout as, e.g., compress storag format spars graphs. order preserv encapsula- tion data hiding, list_t offer rich set tbp let user set (step step) new list_t instance; type provid list_iterator_t type let sequenti read/writ integ identifi list associ entity. code snippet list 7 illustr iter print identifi vertic belong n-face identifi n_face_lid. number n-face dimens easili comput ptr_n_faces_x_dim. note ptr_n_faces_x_dim list_t instance, adopt convent n-face number lowest highest dimension, p arrai list actual need (see fig. 5). exampl fig. 5, valu arrai f1; 5; 9; 10g, 4 vertic (dimens 0), 4 facet edg (dimens 1), 1 cell (dimens 2). 6.2 refer fe space given cell topology, differ definit function space set dof possible, e.g., on nodal lagrangian grad-conform refer fe sect. 3.8, raviart-thoma div-conform refer fe sect. 3.9, curl-conform nedelec refer fe sect. 3.10. member variabl refer- ence_fe_t requir function space v support k encompass line 1316 list 6. list 7. user-level code illustr print screen (local cell) vertex identifi belong n-face (local cell) identifi n_face_lid. s. badia et al. 123 local fe space v determin member variabl fe_type, (in cases) field_type, order. fe_typ uniqu identifi concret fe space hand. possibl valu provid mean public paramet constant fe_type_lagrangian, fe_type_raviart_thomas, fe_type_ned- elec correspond reference_fe_t imple- mentor current support fempar; sect. 6.5 addit detail those. field_typ identifi type physic field discretized, i.e., scalar, vector-valued, etc. fe space inher vector-valu as, e.g., raviart-thoma edg fes. however, lagrangian fe discret scalar, vector, tensor-valu fields, field_typ provided. assum v parameter respect order, store order. values, gener addit data, e.g., number shape function store num_shape_functions. example, (scalar-val- ued) bi-quadrat (2d) tri-quadrat (3d) lagrangian fes, field_typ scalar, num_compon equal 1, order equal 2, num_shape_- function equal 9 27, respectively. 6.3 set local dof addit data requir set dof r v. particular, member variabl encompass line 1923 list 6 serv purpose. conform member variabl determin whe- ther global fe space x h conform respect infinite-dimension space x , i.e., xh x not. n-face own dof, requir enforc conform global fe space equival class (see sect. 3). e.g., lagrangian fes, set .true. result grad- conform global fe space, set .- false. result discontinu space dg meth- ods. conceptu possibl set .true. cell fals others, lead cdg method [83]. hand, continu member variabl determin x , tell x admit trace operator. roughli speaking, tell enforc type continu discret level preserv conformity, e.g., full, tangential, normal trace h1x, hcurl;x, hdiv;x, respectively. valu continu .false. x l2x, continu required. continu .false., conform .true.. continu bare (see discuss paragraph). valu conform gener own_dofs_n_fac member variabl type list_t. member variabl stores, n-face, dof owns; fig. 6. cg methods, notion ownership relat geometr location. dg fes, node function geometr locat boundari cell, own cell, consid interior dofs, global conform enforced. arrai heavili gener global dof numbering. 11 hand, dofs_n_fac member variable, determines, given n-face, set dof respect shape function non-zero n-face. continu member variabl (currently) dg method parallel distributed-memori environ- ments. particular, order decid associ global dof identifi node interfac facet ghost cell (and abl defin non- singular sub-assembl matric dd method [84] dg discretizations). dofs_n_fac member variabl continu .true. global dof number generated, triangul subclass (see sect. 7) order extract coordin node vertex, edge, face (use dofs_n_fac member variabl reference_fe_t instanc describ geometri cell). example, fig. 6, list cor- respond n-face identifi 8 dofs_n_fac {4,8,12,16}. reference_fe_t data type plai crucial role algorithm charg assign global dof iden- tifier node function distribut interior triangul cell boundari n-faces. (thi algorithm, cover sect. 10, ground notion equival class introduc sect. 3.) particular, function-lik (regular) bind refer permute_dof_lid_n_fac (see line 32 list 6) implement map pf (15). function take input so-cal permut index sect. 3.16, local index node n-face given dimens (e.g., 3d, 0 vertices, 1 edges, 2 faces) perspect sourc cell, return local index node n-face perspect target cell. 12 11 consid level dof numbering: cell-wis dof number (refer local dofs), subdomain-wis dof number (refer global dofs), domain global dofs. number created/requir fempar. serial environments, match. 12 note respons determin permut index lai reference_fe_t, abstract fempar repres mesh comput domain; sect. 7. fempar: object-ori parallel finit element framework 123 particular transform appli global dof identifi assign n-face node sourc cell, want transfer n-face node target cell; sect. 10.3. binding, implement reference_fe_t, ultim reli own_dof_permutations(:) member variable; line 23 list 6. allocat arrai index n-face dimens (i.e., 1 edges, 2 faces). n-face dimens larger 0, contain rank-2 allocat arrai (i.e., type(allo- catable_array_ip2_t) base type array), serv lookup tabl implement aforement transformation. particular, row index local index node identifi n-face perspect sourc cell, column permut index; sect. 3.16. entri correspond row column tabl provid local index node n-face perspect target cell. lookup tabl fill fill_own_dofs_permuta- tion defer bind reference_fe_t. note binding, permute_dof_lid_n_- face, declar overrid bind list 6 purpose. lets, e.g., subclass reference_fe_t conjunct (properli oriented; sect. 3.16) n-simplex mesh implement own_dof_permutations(:) member variabl alloc filled, return ident transformation. 6.4 creat reference_fe_t polymorph instanc central oo softwar reli abstract data type approach chosen creat polymorph instanc runtime. simplicity, fempar follow so-cal simpl factori design pattern [85]. take form singl stand-alon function, call make_reference_fe, select dynam type polymorph instanc return runtim base valu dummi argument topolog fe_type. (for example, assum topolog hexahedron fe_type_lagrangian, select dynam type hex_lagrangian_ref- erence_fe_t, i.e., concret data type implement lagrangian-typ fe space n-cubes.) returning, call defer bind refer- ence_fe_t, call create, respons leav reference_fe_t fulli function state. interfac defer bind shown list 8. remark field_typ free paramet lagrangian fe (i.e., particular refer- ence_fe_t subclass). words, field_type_vector raviart-thoma edg elements. note despit fix set dummi argu- ment interface, proven suffici fulli subclass current avail fempar; sect. 6.5. however, event needed, extens mind, singl paramet dictionari \key; value[ pair instead; fempar reli implement data type kei string (typic denot parameter), valu scalar arbitrari rank arrai intrins user-defin types. 13 6.5 enumer reference_fe_t subclass complex data type hierarchi root reference_fe_t fempar, judi- ciousli design code re-us main driver. (for example, lagrangian fe space n-cube n-simplic share member variabl code gather common base data type.) sake brevity, work cover implement data type hierarchi (except detail given sects. 5 9.5). however, 13 data type implement fpl softwar packag [86]. list 8. signatur creat bind reference_fe_t. s. badia et al. 123 completeness, conveni enumer ref- erence_fe_t subclass that, present, avail hierarchy. subclasses, lai leav hierarchy, follow ones: hex tet_lagrangian_reference_fe_t. space polynomi arbitrari degre k n-cube (i.e., tensor-product like space qk) n- simplic (i.e., pk), respectively, discret scalar-valued, vector-valu tensor-valu fields; sect. 3.8. select ownership relationship node function n-face appro- priat (see sect. 6.3), fe space global continuous, entir discontinu cell boundaries. hex tet_raviart_thomas_refer- ence_fe_t. vector-valu raviart-thoma fe arbitrari degre k n-cubes, n-simplices, resp., suitabl mix laplacian problem fluid flow problems. global fe function space (in conform variant) continu normal compon cell faces; sect. 3.9 details. hex tet_nedelec_reference_fe_t. vector-valu curl-conform nedelec fe arbitrari degre k n-cubes, n-simplices, resp., suitabl electromagnet problems. global fe function space (in conform variant) continu tangenti compon cell faces; sect. 3.9 details. void_reference_fe_t. softwar artifact repres fe space dof all, cell interiors, boundari n-faces. sort softwar resourc proven extrem effici for: (1) numer solut pde subdomain origin discret domain (which align cell boundaries); (2) numer solut pde xfem-lik dis- cretiz techniqu (which ground fe space assign dof cell exterior embed domain); (3) simplifi implement discret method pde problem involv coupl interfac level, e.g., fluid- structur interaction. apart reference_fe_t subclasses, conclud develop hierarchi beta version code, b-spline [8], schedul developments, div-conform fe [7]. 7 descript physic domain: triangulation_t abstract central abstract fe numer simul code describ triangulation/mesh t h physic domain x rd problem posed. (in practice, mesh gener x introduc geo- metric error, mesh fact approxim domain xh). fempar, abstract call tri- angulation_t. flexibility, code reus mind, abstract data type. sect. 7.1, introduc triangulation_t, mechan provid subclass order preserv encapsul data hiding, let subclass store access data efficiently. completeness, sect. 7.2, intro- duce detail underli implement particular concret subclass triangulation_t. 7.1 abstract triangul represent softwar implement section, present abstract (conceptual) repre- sentat triangul fempar expos user- level applic librari softwar abstract ground (see, e.g., sect. 10). conceptu represent provid set abstract deriv data type (and method bound them) converg result experi accommod wide rang state-of-the-art fe discret solver techniqu singl framework, desk- tops/laptops, high-end distributed-memori supercom- puter (see sect. 2). sake brevity, work restrict subset represent provid support implement high-ord conform non- conform fe discret ground conform mesh serial comput environment. stress, however, actual (complete) represent incorpor concept express mesh distributed- memori environ (e.g., set cell subdomain divid local cell layer cell own remot subdomains, denot ghost cells). provid support implement high-ord hp-adapt (i.e., local refined, non-conform meshes) conform non-conform fe (use hang node constraint [82] subfac integr facet cell differ refin level, respectively) implement xfem-typ techniqu (see [60] refer therein); provid implicit represent geometri domain, background mesh abl know cell interior, exterior cut domain, case, fempar: object-ori parallel finit element framework 123 provid coordin intersect points. extra express come form addit data type extend set method data type cover section. stress, however, on cover section. abstract represent triangul proven high expressivity, claim, however, triangul represent univer- salli applic implement arbitrari numer discret solver techniques. design extra extens foreseen satisfi requirements. triangul represent encompass topolog geometr data. triangul con- ceiv partit x set cell (d-faces). cell uniqu identifi global identifi rang cell gid 1; . . .; num cells.14 apart cells, triangul compos set lower dimen- sional objects, i.e., set k-faces, k 0; . . .; d 1. refer element set vefs, pro- vide d 3 case, compos vertices, edges, faces. object set uniqu identifi global identifi rang vef gid 1; . . .; num vefs.15 apart cell vefs, triangul encompass adjac data. sort data describ n-face mesh relat other. denot f set n-face mesh, fk set k- faces, fi f k i-th n-face (of arbitrari dimension) i-th k-face (of fix dimens k), respectively. conform meshes, mainli relev type adjac relationships, compo- sition (m-face k-face m\k) neighbourhood (m-face given k-face m[ k). follow [87], set m-face adjac fki , denot fki hfmi (i.e., oper hi select set m-face adjac left). triangu- lation conform fempar abstract represent abl provid composit data f3i hfi, neighbourship data fihf3i, is, n-face compos cell cell n-faces. triangul includ geometri data. cell geometri repres map uk polytop k refer space physic space (see sect. 3). map repres function scalar fe space (e.g., ground high-ord lagrangian fe b-splines), dof valu vector node coordin (i.e., point_t instances) physic space. core softwar design charg provid triangulation-rel data cover far abstract data type name triangulation_t. (the rational data type abstract clear cours section.) data type defin shown list 9. triangulation_t conceiv templat subclass conform. hand, compos (minimal) set member variabl encompass data common triangulation. particular, triangul embed num_dimensions-dimension space, compos total number num_cel (num_dimensions- dimensional) cell num_vef vefs, respectively; line 35 list 9, respectively. hand, triangulation_t equip set defer method subclass triangulation_t implement; line 1118. rational underli method requir elaboration, discuss sequel.14 note actual conceptu represent triangu- lation fempar differ local (to subdomain) cell identifi global cell identifi (among triangul domain) distributed-memori context. second sort identifi code long precis integers, i.e., inte- ger(igp), order accommod simul 231 1 global cells. 15 mention case cells, actual conceptu represent triangul fempar differ local (to subdomain) vef identifi global vef identifi (among triangul domain) distributed- memori context. on long precis integers. s. badia et al. 123 order construct conceptu view triangu- lation_t suitabl user (and library) code needs, fempar reli so-cal iter oo design pat- tern [88]. iter data type provid sequenti travers set object (conceptually) compris triangulation_t mesh- like container. differ iter avail- able, relat differ set object traversed. example, cell_iterator_t provid travers set compos cells, vef_iterator_t compos vefs.16 softwar design, iter creat freed set public tbp provid triangulation_t; line 1118 list 9. thus, example, expres- sion triangulation%create_cell_iter- ator(cell) creat iter cell client-spac instance, triangulation%free_- cell_iterator(cell) free it. iter sequenti travers object increas order global identi- fiers. however, note triangulation_t sub- class complet free decid intern label objects. 17 reader note mini- mal set member variabl list 9 (among others), softwar design want provid complet flexibl concret subclass triangu- lation_t respect intern layout (topolog geometry) data provided. end, triangulation_t abstract class defer decis subclasses. clear separ data handl (i.e., store accessed) privat data structur (member variables) under- ly triangulation_t subclasses, concep- tual/abstract view triangulation_t expos fempar users. view render triangulation_t easili access understandable. public interfac triangulation_t client code design stabl time, intern triangulation_t subclasses, however, allow (and subject to) chang time (e.g., order accommod optimizations, addit require- ments, etc.). price dynam run-tim polymor- phism, triangulation_t subclass design strongli strive preserv encap- sulat data hide store access data efficiently. thus, e.g., triangulation_t sub- class charg handl structured/uniform mesh simpl domain decid explicitli store cell- wise global vef identifiers, vertex coordin mesh, instead provid implicitli demand function global cell identifier. apart encompass logic underli actual travers object set hand, iter follow crucial responsibility. follow softwar concept accessor present [17], abl teas data relat current object seat global arrai rest privat data structur compris intern correspond triangulation_t subclass. explicitli store, e.g., global vef iden- tifier current cell. instead, know fetch 16 completeness, let mention triangulation_t offer travers subset object conveni select acceler purposes. example, triangulation_t provid iter vertices, edges, face lai interfac subdomains, call itfc_vef_iterator_t (i.e., subset set object travers vef_iterator_t) subclass suitabl parallel distributed-memori environments. 17 thus, e.g., triangulation_t subclass intern label global identifi vef dimens increas order result travers order. potenti chang time low-level implement user program reli triangulation_t associ iter assum reli on. list 9. triangulation_t abstract data type. fempar: object-ori parallel finit element framework 123 correspond triangulation_t sub- class data structur suitabl user needs. pro- vide respons triangulation_t subclass decid intern layout data, iter abstract data type well, tbp deferred/virtual. justifi method line 1118 list 9 deferred, corre- spond iter dummi arguments, polymorph allo- catable. ultim respons concret subclass triangulation_t decid execut time dynam type polymorph variabl created. let discuss rational underli design iter cell vefs. data type defin list 10, set actual replac correspond uniqu identifi set object travers iter hand, i.e., cell vef. fig. 7, illustr implement partial (selected) subset bind data types. creat bind set_iterator_t take input polymorph triangulation_t instanc traversed, leav iter posit object set, i.e., state readi start sequenti travers objects; fig. 7. method (like free) intend directli call user. instead, triangulation_t client reli defer bind triangulation_t pre- sent list 9. init, next, has_fin- ish bind let client posit iter object set, object, check object travers not, respectively; fig. 7. actual set (deferred) tbp triangula- tion_t iter highli depend type object pointed. briefli discuss tbp set correspond cell vef iter provid support subset triangul conceptu rep- resent focus on. particular enumer list 11. fig. 7 implement partial (selected) subset bind set_iter (see list 10) list 10. triangulation_t set (either cell vef) iterators. s. badia et al. 123 tbp line 812 list 11 charg provid data relat composit relationship f3i hfi. particular, get_num_vef bind return number vef boundari mesh (i.e., cardin composit relationship). given local index vef cell (within rang 1; . . .; num vefs), get_vef posit vef_itera- tor_t instanc input point vef, get_vef_gid, return global identifier; get_vef_lid perform invers translat get_vef_gid. finally, get_vefs_gid let cli- ent obtain global identifi vef current cell shot provid user-spac pointer integ array. semant tbp subclass cell_iterator_t allow alloc provid pointer, associ exist (internal) memori (for increas perform memori leak avoidance). tbp line 15 list 11 provid support implement transform procedur describ sect. 3.16. particular, bind invok cell_iterator_t instanc posit sourc cell, given cell_iterator_t posi- tion target cell, n-face local identifi cells, return permut index; sect. 3.16. stress rotat orient indic comput tbp previou paragraph. example, order deter- rotat index, extract global id anchor vertex n-face target cell (by call list 11. subset defer tbp cell_iterator_t vef_iterator_t data type (follow-up list 10). fempar: object-ori parallel finit element framework 123 get_vef_gid), search global id set vertic compris n-face target cell (use iter correspond sublist ver- tices_n_face; sect. 6.1). however, prefer provid special defer bind purpos order leav room optim triangu- lation_t subclasses. example, case subclass work orient meshes, get_permutation_index implement return permut index correspond ident transformation. case subclass triangulation_t intend remain static (or adapt infrequently) cours simul process (see, e.g., sect. 7.2), benefici perform precalcul possibl permut indic set lookup tables, re-us wai have perform aforement search again. tbp line 1820 charg provid cell geometri related-data. particular, get_refer- ence_f return polymorph pointer refer- ence_fe_t instanc describ space function map uk belongs. get_num_nod get_nodes_coordin return number node describ geometri cell, associ coordin physic space, respectively. instead pointer user-spac arrai associ intern storag (a get_vef_gids), get_nodes_coordi- nate take user-spac (pre-allocated) arrai type point_t instances, fill (becaus reason clear sect. 8.3). assum reference_fe_t bi-linear lagrangian fe quadrilateral, get_- num_nod return 4 (one node cell-vertex), get_nodes_coordin coordin physic space vertices. triangulation_t subclass let cli- ent classifi cell sets. set global identifi integ number, name set_id. method get_set_id set_set_id let caller associ set current cell, retriev set cell current associated. cell set identifi primarili (although only) fe_space_t set-up; sect. 10. particular, instruct determin reference_fe_t instan- ce us cell belong set. example, assum want solv scalar, single- field pde problem subdomain origin domain (that assum align cell boundaries), us differ sets. cell interior subdomain, second exterior. associ e.g., linear lagrangian refer fe cell set, void_reference_fe_t cell second set; sect. 6.5. sit given vef, tbp line 3637 charg provid data relat adjac rela- tionship fihf3i. particular, get_num_- cells_around return cardinality, get_cell_around return cell set. precise, tbp posit instanc cell_iterator_t input point cell set identifi index rang 1; . . .; num cell around. order cell vef list arbitrary, code reli triangulation_t assume, e.g., order increasingli global cell identifiers. hand, get_num_nod get_nodes_coordin return number point vef (includ lower- dimension on boundary), associ coordin physic space, respectively; line 4041. adopt convent node (locally) label (within input/output arrai point coordin filled) accord refer coor- dinat cell vef, i.e., cell obtain vef%get_cell_around(1,cell). tbp line 4448 let client determin vef interior domain boundary, vef dimens (e.g., 3d, return 0, 1, 2 vertices, edges, faces, respectively) retriev set vef current associated, associ new set it, respectively. set case vef primarili codifi boundari condit pde problem hand, discuss sect. 10.4. point posit user- level code exploit softwar design cover far. particular, list 12 split set triangul cell disjoint sets, contact boundari domain, interior. s. badia et al. 123 7.2 exampl triangulation_t subclass rational section, discuss particular subclass triangulation_t intern organ order effici provid triangulation-rel data mean softwar abstract present sect. 7.1. sub- class static_triangulation_t. static_- triangulation_t codifi conform mesh, set scratch begin simulation, remain unalt process. hand, static_cell_iterator_t static_vef_iterator_t non-abstract data type extens cell_iterator_t vef_it- erator_t, respectively. overrid set defer method ones, on teas data relat current object seat global arrai rest privat data structur compris intern static_ triangulation_t. singl approach layout data given triangul subclass. seek accept- abl trade-off memori consumption, comput time requir set up, updat (if applies), access triangul data, frequenc oper perform guid intern organi- zation. example, [87], storag layout pre- sented, memori comput cost comput possibl adjac relationship evalu 3d. one, call one-level represen- tation, defin f1i hf0i, f2i hf1i, f3i hf2i, f0i hf1i, f1i hf2i, f2i hf3i (neighbourhood information). words, store vertic edge, edg face, face cell, edg vertices, face edges, cell faces. second one, call circular representation, defin composit inform f1i hf0i, f2i hf1i, f3i hf2i (a above), neighbourhood inform f0i hf3i (cell vertices). import properti storag layout completeness, i.e., possibl determin adjac loop entir mesh. storag requir uniform mesh cube domain nc cell 48nc (for hexa- hedra) 24nc (for tetrahedra) former, 32nc (for hexahedra) 16nc (for tetrahedra) latter. however, oper count determin adja- cencies, independ nc, high. example, case one-level representation, obtain cell vertex requir 48 (for hexahedra) 140 (for tetrahedra) operations, oper need obtain cell facets. case circular representation, queri involv 148 (for hexahedra) 299 (for tetrahedra) operations, respec- tive [87]. (we recal kind adjac requir fempar present sect. 7.1.) differ storag data layout follow triangul deal.ii librari [17], essenti defin composit data f1i hf0i, f2i hf1i, f3i hf2i (refer hierarch cell repre- sentat author library), neigh- bourhood data f3i hf2i store cell-wis (i.e., given cell store identifi cell neighbour face cell). besides, (potenti non-conforming) triangul librari conceiv (and explicitli list 12. user-level code illustr usag data type associ tbp support fempar conceptu triangul representation. fempar: object-ori parallel finit element framework 123 represented) collect trees, cell coarsest conform mesh (gener deal.ii simpl domains, read file file for- mats) form roots, children branch parent cells, form binary-trees, quad-tre oct- tree d 1; 2; 3 spatial dimensions, respect [17]. ancestor (i.e., so-cal inac- tive cells) leaf cell tree (i.e., so-cal activ cells) stored, on actual form partit domain. apart hierarchi cells, deal.ii triangul maintain hierarchi k- face k 1; . . .; d 1. complex data struc- ture justifi author reasons. first, allow effici implement adapt mesh adapt (includ coarsen refinement). hierarchi n-face aid process handl so- call hang node constraint requir build con- form fe space non-conform meshes. second reason implement (geometric) multigrid precondition ground adapt tree. particular, precondition requir dof associ inact cells. thus, inact n-face explicitli exist triangulation. case, structur hard gener maintain, fit integr parallel octre librari [89], like p4est [90]. hierarchi gen- erat scratch mesh adapt step. how- ever, base experience, hierarchi need effici implement adapt refinement. second reason, i.e., implement serial hierarch multigrid solver deal.ii, prob- abli complic hierarch represent mesh. hierarch cell represent deal.ii proven success implement highli complex hp-adapt fe discret [82] reduc memori consumpt f3i hfi, restrict global vef identifi cell (a frequent oper fe codes), significantli expens storag layout oper requir permut refer coordin cell own vef restrict to; appli restrict global dof identifi cell dof store n-face-wise. furthermore, non-complet storag layout. par- ticular, neighbourship data fihf3i comput user mean loop cells. besides, prevent librari support loop facet mesh, access neighbour cells, natur oper implement dg methods. experience, facet-loop base integr dg term (versu cell-loop based) lead softwar significantli easier use, design complex underli facet integr hidden user (see sect. 9). finally, effici hierarch local mesh adapt (within subdomain), sever drawback costli set (from scratch) given initi conform coars mesh (thi mitig reduc coars mesh resolution, price potenti lose geometri model accuracy), and, distributed-memori envi- ronment, costli regener adapt non-conform forest tree re-distribut step process dynam load-balanc [90]. indeed, [89], report second costli oper simul pipeline, linear solver step. static_triangulation_t data type explic- itli store composit data f3i hfi, neigh- bourship data fihf3i intern (private) member variables. 18 memori consumpt complet storag layout 52nc (hexahedra) 28nc (tetrahedra), twice one-sid cir- cular represent [87]. price increas memori consumption, static_triangulation_t abl provid requir adjac data o1 arithmet complexity. besides, cell-bas storag composit relationship perfectli suit migrat parallel distributed-memori environments. hand, perman storag data layout reduc exploit fact neighbourship data requir specif part code. example, unstructur mesh gener usu- alli provid composit data f3i hf0i. case, static_triangulation_t requir neigh- bourship data f0i hf3i (plu refer cell topolog data encompass reference_fe_t instanc map cell; sect. 6.1) order set composit data f3i hf1i f3i hf2i. need triangulation_t subclass suitabl distributed- memori computers, others, set data structur requir perform nearest neighbour exchang dof nodal valu subdomains. (we stress process requir global identifi interfac dof consist subdomain share dof .) scenario, adjac data requir n-face lai inter-subdomain interfac (and interior). evalu facet integr (a design fempar, sect. 9) requir f2i hf3i f1i hf2i, 2d 3d, respectively. us adjac data need implemen- tation advanc numer discret schemes, e.g., 18 note f3i hf3i simpli f3i stored. s. badia et al. 123 implement nodal-bas shock detector monoton fe [58, 59]. aforement rea- sons, decid design static_triangula- tion_t perman store data, stress softwar design triangul subclass free offer method set destroi data demand reduc perman data storage. static_triangulation_t data type, toge- ther select set bindings, defin shown list 13. go detail, main point remark respect type intern layout data. first, reli wai intrins fortran allocat arrays. sort data structur perfectli suit particular case static_triangulation_t, static nature. stress, however, effici data structur (i.e., abl mitig effect frequent/costli allocat- abl arrai re-allocations) conveni support mesh adapt (e.g., link list, better data locality, data structur semant close std:vector c?? standard templat library, fact fempar includ brevity). second, increas data local cell vef sequenti travers (and effici memori hierarchi modern architectures) data store cell-wis vef- wise local arrays, global arrai index global cell vef identifiers. collect reference_fe_t polymorph instanc store reference_fes(:) arrai (see line 4 list 13). instanc uniqu iden- tifi (within local scope static_triangula- tion_t) posit array. given cell global identifi cell_gid, fe space func- tion cell map uk belongs, describ reference_fe_t instanc identifi cell_to_ref_fes(cell_gid) collection; line 7. member variabl store composi- tion data f3i hfi encompass line 1011 list 13. state above, global vef identifi store cell-wise, lst_vefs_gids(:) array, turn (indirectly) address ptr_vefs_x_cell(:) array. particular, on assign vef cell cell_gid start end posit ptr_vefs_x_cell(cell_id) ptr_ vefs_x_cell(cell_id?1)-1 lst_vefs_ gids(:), respectively. thus, e.g., implement (overridden) get_num_vef tbp static_ cell_accessor (see list 12), determin list 13. intern static_triangulation_t select set bindings. fempar: object-ori parallel finit element framework 123 number vef boundari current cell ptr_vefs_x_cell(cell_id?1)-ptr_vefs_x_ cell(cell_id). hand, member vari- abl store adjac data fihf3i encom- pass line 1415 list 13. global identifi cell vef vef_gid start end posit ptr_cells_around(vef_gid) ptr_cells_around(vef_gid?1)-1 lst_ cells_around(:), respectively. geometry-rel data handl member variabl line 1820. particular, set static_triangulation_t global number node global fe space describ geometri mesh intern built. (the process gener number ident describ sect. 10.3, omit present short.) particular, global node identifi restrict cell cell_gid start end posit ptr_ nodes_gids(cell_id) ptr_nodes_gids(- cell_id?1)-1 lst_nodes_gids(:), respec- tively. global node identifi (indirectly) address global arrai node coordin line 20. cells_set_ids(:) vefs_set_ids(:) arrai store user-provid cell vef set identifi (see sect. 7.1), respectively, vefs_at_boundary(:), correspond vef lai boundari domain not. finally, static_triangulation_cr bind set new static_triangulation_t instance. option creat static_triangulation_t fempar, depend mesh structur unstructured. case, fempar provid machineri auto- matic gener triangul simpl domain (e.g., unit cube), current brick (quadrilater hexahedral) cells. function implement exploit tensor product structur space, number cell vef lexicograph order. second wai creat static_triangulation_t instanc mesh data file, e.g., gid mesh gener [91]. 8 evalu cell integr section, data structur requir perform numer integr local matrices. order comput cell integr (12), need (among others) function evalu shape function deriv quadratur point physic cell determin jacobian quadratur point refer cell. turn, evalu shape function deriv physic cell reli evalu (and possibl evalu jaco- bian) refer cell (see, e.g., (13) (14)). note evalu w requir addi- tional information; ident lagrangian ele- ment requir jacobian refer cell vector-valu shape function (see (17) (18)). following, present set data type contain information. evalu cell integr involv data type quadrature_t repres quadratur q, in- terpolation_t, store valu shape function deriv (either refer physic space) quadratur point q, cell_map_t describ map refer physic cell uk (e.g., jacobian-rel data). addi- tionally, data type cell_integrator_t provid machineri comput interpolation_t cor- respond physic space ref- erenc space cell_map_t cell triangulation. follow sections, cover softwar abstractions. 8.1 numer quadratur data type fempar repres arbitrari quadratur rule call quadrature_t defin shown list 14. list 14. quadrature_t data type. s. badia et al. 123 list 14, coordinates(:,gp) weights(gp) store, respectively, xgp 2 rnum dim wgp, gp 1; . . .; num quadratur points. readili observ interfac creat bind- ing quadrature_t design simpli placehold quadratur point coordin associ weights. indeed, bind essenti alloc coordinates(:,:) weights(:). code ultim decid distribut quadratur point k set associ weight actual bound reference_fe_t implementor defer bind interfac shown list 15. reference_fe_t subclass current avail fempar select default gaussian quadratur exactli integr mass matrix term (within imple- mentat bind list 15) invok fill_*_gauss_legendr method line line 13 14 list 14. quadratur sole deter- mine attribut reference_fe_t implementor hand (it topolog order). 19 however, demand situations, e.g., integr trilinear weak form, user provid desir quadratur degre degre option dummi argument. gener scenario on current cover (e.g., non-gaussian quadrature) addressed, interfac modifi option paramet dictionari pass instead. 8.2 evalu refer cell shape function comment introduct section, comput cell integr (12), need evalu shape function deriv physic cell, turn reli evalu refer cell (see, e.g., (13) (14)). valu shape function deriv set quadratur point provid quadrature_t instanc store interpolation_t data type present below. data type store data refer physic space. let start evalu shape function refer space. local fe space k actual depend particular reference_fe_t implemen- tor hand. consequently, function offer defer bind abstract type. interfac bind declar list 16. subroutin overrid concret subclass charg comput shape function valu deriv quadratur point refer space store raw-data contain type interpolation_t (to discuss later section). let remark point relat interface. first, bind typic call once, data pre-comput store pass interpo- lation_t dummi argument repeatedli re-us transform valu actual cell; sect. 8.4. list 15. interfac create_quadratur defer bind reference_fe_t. list 16. interfac create_interpol defer bind reference_fe_t. 19 known, consid n-cube topolog k, lagrangian refer fe order p affin geometr map, need 1d gaussian quadratur p 1 points. tetrahedr mesh duffi transformation, need n p ceilingd=2 integr exactli mass matric (see sect. 3.5 details). fempar: object-ori parallel finit element framework 123 second, bind design function evalu quadratur point singl call, instead follow (much) finer granular approach function evalu quadratur point call. 20 third, stress actual implement defer bind fempar comput shape function valu deriv refer space, let caller select decid comput second deriv shape func- tions, provid expens comput requir particular scenarios; sect. 3.7. indeed, code implement featur cross-cut nature, reflect interfac data type cell (and face) integr function split. omit (and rest sections) detail second deriv (and option computation) order present simple. let discuss rational underli in- terpolation_t. data type expos user fempar. instead intern low- level contain let data type involv implement cell integr exchang sort data subject consideration. ultim respons concret reference_fe_t subclass decid data actual laid member vari- abl interpolation_t. thus, reference_fe_t data type access modifi inter- polation_t. current flavour, interpola- tion_t concret (i.e., non-abstract) data type fix set multi-rank allocat arrai member variabl store shape function valu derivatives. example, store shape function valu 3-rank array, reference_fe_t implementor choos indices, left right, refer com- ponent shape function, shape function, quadratur point, respectively. reference_fe_t subclass is, however, complet free lai data arrays, flexibl extensi- biliti softwar design accommod fe space realiz resides. this, proven suffici (efficiently) implement fe space cur- rentli avail fempar, includ scalar, vector, tensor-valu lagrangian fe (where higher-rank space determin tensor product scalar spaces, shape function non-zero component), genuin vector-valu fe space (where compon shape function non-zero). 8.3 geometr map basic build block map uk refer cell k coordin corre- spond actual cell k triangul physic space; sects. 3.2 3.3. example, abl pull gradient shape function refer physic space (14) jaco- bian transform evalu quadratur points, evalu sourc term quadratur point real space. jacobian requir transform integr physic refer space (12) comput piola transform div curl-con- form fe space (see (17) (18)). deriv type cell_map_t fempar design placehold data requir provid sort services. declar shown list 17. rational underli inherit relationship cell_map_t base_map_t clear sect. 9. 20 (and places) try maxim granular defer bind effici reasons. reader awar call defer bind granular approach expensive, apart prevent number potenti compil optim enabl former. s. badia et al. 123 creat bind cell_map_t take input quadrature_t instanc set integr point jkxgp, j1k xgp, jjkxgpj evalu (see list 17). geometry-rel data store jacobian(:,:,gp), inv_jacobian(:,:,gp), det_jacobian(gp) allocat arrai member variabl cell_map_t, respectively, alloc binding. apart quadrature_t instance, cell_map_t requir descript (discrete) space function uk belongs. fempar support map uk belong abstract fe space (e.g., high-ord polynomi fe space spline-bas spaces). reference_f dummi argument poly- morphic type reference_fe_t serv purpose. (we note dynam run-tim polymorph particular context let re-us cell_map_t, e.g., arbitrari cell topology.) turn inform reference_fe_t provid cell_map_t shape functions, derivatives, (on demand) sec- ond order deriv quadratur point (in ref- erenc space). interpol member variabl (see list 17) reference_f exchang sort data cell_map_t create_interpol bind (see list 16) creat bind latter. creat tbp cell_map_t design call once, updat tbp cell_map_t is, however, design call multipl times, cell k triangulation. pre-condit up- date nodes_coordinates(:) scratch member variabl (see list 17) load coordin real space node describ geometri k (store point_t instances). pre-condit fulfilled, uk express linear combin reference_fe_t shape function nodes_coordinates(:) correspond- ing coeffici expansion. stage, coor- dinates_quadrature_points(:), store coordin quadratur point real space, jacobian(:,:,:), easili computed. finally, inv_jacobian(:,:,:) det_jacobian(:) comput jacobian(:,:,:) straightforward numer algorithms. 8.4 evalu shape function physic space user code evalu cell integr (12), need value, gradient, curl, diverg shape function integr point physic space, provid want unburden fempar user complex have explicitli appli map trans- formations. comment sect. 3, map transform shape function /ax refer fe space physic space /ax wk/a u1k , depend particular fe list 17. cell_map_t data type. fempar: object-ori parallel finit element framework 123 space hand; sects. 3.8, 3.9, 3.10 details. reason, actual code perform transfor- mation actual bound cell_map_t, reference_fe_t, defer bind interfac declar list 18. interpolation_reference_cel input dummi argument apply_cell_map (see list 18) obtain bind list 16 invok reference_fe_t instance. output dummi argument interpola- tion_real_cel hold shape function deriv evalu quadratur point physic space (see (13) (14)). assum that, input, interpolation_real_cel contain data re-comput mesh cell, e.g., valu shape function integr point lagrangian fes; discuss relat updat bind strategi follow order fulfil requirement. leav room optim implement defer bind (on subclasses), quantiti re- comput cell. reference_fe_t subclass us cell_map_t instanc (pass apply_- cell_map binding, list 18) placehold data requir provid map transform required. stress, however, interpolation_t low level structur design data type fempar user interact with, reason clear sect. 8.2. therefore, need introduc addit data type softwar design, call cell_inte- grator_t, that, services, abl fetch raw data interpolation_t field data type (i.e., scalars, vectors, tensors) user easili famil- iariz with. data type declar shown list 19. list 18. interfac apply_cell_map defer bind reference_fe_t. list 19. cell_integrator_t data type. s. badia et al. 123 instanc cell_integrator_t creat quadratur rule (where shape function deriv evaluated) polymorph ref- erence_fe_t instanc describ refer fe space hand; interfac creat bind list 19. stage, reference_f creat interpolation_reference_cel member vari- abl cell_integrator_t create_inter- polation; list 16. clone interpolation_reference_cel inter- polation_real_cell, copi content latter. let cell_integrator_t fulfil later pre-condit dummi argu- ment apply_cell_map. creat bind associ polymorph pointer reference_f member variabl reference_fe_t instanc provid input. pointer requir later updat get_* bind (see discuss sequel). updat bind cell_integrator_t simpli invok apply_cell_map polymorph reference_f member variable, instanc cell_map_t provid input update, interpolation_t member variabl actual argu- ments, respectively; list 18 19. leav cell_integrator_t instanc invok state abl provid servic primarili design for. offer get_values, get_gradients, get_diver- gences, get_curls, etc., gener bindings. note cell_integrator_t design handl scalar, vector, tensor-valu refer- ence_fe_t instanc (see sect. 6.2). purpos mind, aforement gener bind overload subroutin appropri inter- face type fes. example, sub- routin overload get_gradi case scalar-valu fe declar implement shown list 20, vector_field_t repres d-di- mension rank-1 tensor; interfac corre- spond vector-valu fe differ base type gradient allocat arrai dummi argument, base type tensor_field_t (i.e., data type repres d-di- mension rank-2 tensor). let remark import point respect subroutin overload gener bind cell_integrator_t. first, note actual argument pass place of, e.g., gradients(:,:) dummi argument list 20, intend actual declar code written user fempar. provid fempar support variabl degre fe differ triangul cell (see sect. 10), allo- catabl attribut gradients(:,:) dummi argument unburden user complex have (pre)alloc array, associ variabl degre fes. example, input, size gradients(:,:) suffici hold data provid cell_integrator_t instanc correspond reference_fe_t current triangul cell, re-alloc appropri size. second, bind design function evalu quadratur point singl call, justifi dummi argument rank-2 allocat array. 21 point, let note subroutin subject consider ultim reli (defer bind of) reference_fe_t; see, e.g., line 5 list 20. recal refer- ence_fe_t mediat process requir retriev data interpolation_t; sect. 8.2. 8.5 cell integr user code exampl point discussion, posit user code evalu entri (current cell) local matrix exampl 3.1 present sect. 3.1. code sketch list 21. code bound subclass discrete_integration_t abstract data type present sect. 11.2 suitabl galerkin discret poisson problem. 21 repres design decis seek maxim granular call defer bind code effici reasons. list 20. code implement get_gradients_scalar bind cell_integrator_t ultim reli defer bind reference_fe_t name. fempar: object-ori parallel finit element framework 123 reader note list 21 fempar offer express syntax let user code weak form wai resembl mathemat expres- sion. user charg explicitli write express numer integr refer cell, i.e., explicitli implement quadratur point summat (loop) handl determin jacobian quadratur point weight (12). however, evalu shape function gradients, curls, etc., quadratur point phys- ical space (e.g., express (13) (14)) complet hidden user. achiev featur modern program languag call oper over- loading. (we refer [67] detail exposit mechan fortran2003.) common (contraction) oper- ation tensor provid mean overload intrins library-defin operators. example, operator(*) gener interfac (correspond * intrins operator) overload singl contract rank-1 tensors, multipl rank-1 tensor scalar let code compile. crucial design requir seek code effici dynam memori allocation/dealloc involv partial evalu sub-express proce (in order dictat oper associ prioriti rule fortran). order fulfil requirement, data type repres vector tensor declar entri store arrai member variabl size known compil time. size store library-level paramet constant space_dim, defin maximum number space dimens physic space physic problem posed. default, fempar prepar deal 3d simulations, code written 2d simul perform space_dim equal 3, price extra storag computation. 22 higher dimension problem consid compil fempar larger valu space_dim. apart avoid dynam memori allocation/dealloc eval- uation weak forms, solut follow advantages: (1) need explicitli number dimens member variabl data type repres vector tensors; (2) limit loop implement tensor contract oper known compil time, enabl compil optimiza- tions. final stress prefer solut usag fortran2003 parameter data type [67] lack support featur popular compil wide avail high-end comput environments. 9 evalu facet integr section cover data type (and interactions) evalu integr facet triangul ground on. integr facet-wis matric vector (see, e.g., (23)) involv evalua- tion shape function gradient neighbour cell quadratur point facet phys- ical space jacobian facet map refer- enc space. describ sect. 8, quantiti comput neighbour cell valu refer space jacobian cell mapping. evalu interior facet requir compu- tation permutationpgp (see (25)) provid coordin system cell surround facet align physic space. 22 fact, 2d problem pde involv curl oper requir space_dim equal 3. list 21. user-level code illustr usag cell integr data structur order comput element matrix exampl 3.1 present sect. 3.1. s. badia et al. 123 fempar assembl process global linear underli discret weak problem (20) involv loops, cell facets, respectively. loop, cell-wis matrix ak vector fk comput cell. hold partial contribu- tion cell correspond entri global coeffici matrix right-hand vector, respectively. data structur involv effici comput cover sect. 8. loop, assum sit interior facet f 2 fxh , facet-wis matrices, afkk , f kk , f kk , afkk comput (see sect. 3.12). fig. 8 uml class diagram data type numer evalu facet integr ground fempar: object-ori parallel finit element framework 123 depict fig. 8 complet uml class diagram data type involv evalu facet integr relationships. data type user ultim interact quadratur t, hold facet quadratur point weights, facet map t, handl (i.e., stores, updates, provides) geo- metric relat data facet neighbour cell k k, and, finally, facet integr t, store updat shape function valu derivatives, provid shape function values, gradients, curls, etc., k k evalu facet quadratur point real space. rest data type fig. 8 auxiliari data types, expos user, aid implement correspond services. reader readili observ fig. 8 softwar design data type provid support evalu- ation cell integrals, i.e., quadrature_t, cell_- map_t, cell_integrator_t (see sect. 8), re-us larg extent evalu facet inte- grals. rest section, method invok order control respect life cycl context facet integr differ on invok context cell integrals; see, e.g., signatur create_re- stricted_to_facet bind cell_integra- tor_t fig. 8 compar creat bind list 19. 9.1 numer quadratur data type quadrature_t design placehold facet quadratur point xq associ weight wq. however, code ultim decid distribut xq refer facet f coordin system, set wq, bound refer- ence_fe_t, particular defer bind interfac shown list 22. refer sect. 8.1 rational underli degre option dummi argument defer binding. 9.2 geometr map facet_maps_t data type fig. 8 handl geometr facet map geometr cell mappings. facet map repres facet_map_t, cell map cell_- map_t; sects. 9.2.1 9.2.2, respectively. 9.2.1 facet map illustr fig. 8, facet_maps_t composed, others, singl instanc type facet_map_t. member variabl (and associ code) common facet_map_t cell_map_t fac- tore superclass base_map_t (see list 17). facet_map_t handl data relat facet map uf , includ facet outward unit normal (see fig. 8). extra 2-rank real allocat arrai member variable, outward_unit_normals(:,:), store facet out- ward unit normal (with respect k convention) evalu facet quadratur point real space, requir (25); nxgp simpli obtain nxgp nxgp. let facet_maps_t control life cycl facet_map_t instance. creat bind- ing facet_map_t take quadrature_t instanc facet quadratur points. jfxgp jjfxgpj evalu quadratur point store jacobian det_jacobian member variables, alloc bind outward_unit_normals(:,:). apart quadrature_t instance, facet_map_t requir descript discrete, lower dimension space function refer facet f uf belongs. ref_fe_geo dummi argument cre- ate, polymorph type reference_fe_t, pro- vide purpose; particular, facet_maps_t send reference_fe_t k actual argument ref_fe_geo dummi argument order compli describ convent normals. interpolation_t member variabl list 22. interfac create_facet_quadratur defer bind reference_fe_t. s. badia et al. 123 facet_map_t (see list 17) ref_fe_geo exchang facet_map_t shape function val- ue derivatives. end, reference_fe_t equip create_facet_interpola- tion defer bind (see signatur list 23) comput quantiti refer facet f. theupdat bind offacet_map_t intend call facet loop iteration, i.e., facet triangulation. pre-condit bind nodes_coordinates(:) scratch member arrai facet_map_t (see list 17) load coordin real space node lai facet. 23 updat bind take input dummi argu- ment quadrature_t instanc real paramet reorientation_factor order adjust sign facet normal (see (26)). update, quadra- ture_points_coordinates(:) jaco- bian(:,:,:) easili comput basi shape function derivatives, respectively. hand, det_jacobian(:) outward_unit_nor- mals(:,:) comput jacobian(:,:,:). state (24), (26). 9.2.2 neighbour cell map facet_maps_t data type compos instanc type cell_map_facet_restrict _t; fig. 8. instanc handl data relat touka , or-. let refer instanc cell_map_facet_restrictiona, polymorph reference_fe_t instanc ka ref_fe_geoa. turn, cell_map_facet_re- strictiona compos cell_map_t instanc facet ka. provid actual facet f potenti local identifi fa ka rang fa 1; . . .; num facetska, have cell_ map_t instanc facet surround cell let hold (pre)calcul instanc result eval- uat k shape function deriv facet quadratur point facet refer system. end, creat bind cell_map_- facet_restrictiona invok (from corre- spond facet_maps_t) facet quadratur q andref_fe_geo input actual arguments. walk possibl local facet identifi correspond cell, local facet identifier, invok special version creat bind correspond cell_map_t instance, name create_restrict _to_facet (that addition requir local facet identifier); fig. 8. thereference_fe_t ultim respons exchang sort data cell_- map_t. servic particular provid cre- ate_interpolation_restricted_to_facet defer bind reference_fe_t, signatur defin list 24. list 23. signatur create_facet_interpol defer bind reference_fe_t. list 24. signatur create_interpolation_restricted_to_facet defer bind reference_fe_t. 23 easili fulfil call get_nodes_coor- dinat bind vef_iterator_t list 11. fempar: object-ori parallel finit element framework 123 seen far, thecreat bind offacet_maps_t design call right actual loop tri- angul facets, set scratch data. cover possibl scenario correspond potenti val- ue local facet identifi surround cell (even scenario actual expos triangulation). updat bind facet_maps_t, however, intend call sit particular facet f triangulation, updat cell_map_t instanc cell_map_facet_re- strictiona correspond particular scenario hand, i.e., particular combin local facet identifi f andf facet onwhich updated.to end, updat bind facet_maps_t receiv local identifi facet_lid (see fig. 8) call updat bind cell_map_facet_restrict cell_map_facet_restrict facet_ lid=facet_lid(1) facet_lid=facet_lid (2), respectively. updat bind cell_map_ facet_restriction_t pick cell_map_t correspond facet_lid invok updat bindingof latter.westress specializedversionof bind requir context facet integration, i.e., version discuss sect. 8.4 cell integr re-us here. 24 updat process, cell_map_- facet_restriction_t regist cur- rent_facet_lid privat member variable, valu suppli facet_lid dummi argument. let facet_maps_t extract later cell_map_- facet_restrict updat cell_map_t instances; discuss facet_integrator_t sequel. 9.3 evalu shape function physic space data type remain cover facet_integrator_t; fig. 8. data type counterpart cell_integrator_t (see sect. 8.4) case facet integrals. particular, store updat shape function valu derivatives, provid values, gradients, curls, diverg respect field k k evalu facet quadratur point real space. observ fig. 8, overal design close facet_maps_t, cell_integrator_facet_restriction_ t cell_integrator_t instanc compos of, plai role counterpart scope facet_maps_t (i.e., cell_map_facet_restric- tion_t cell_map_t, respectively). are, however, major differ two. first, facet_integrator_t deal (e.g., creat from) polymorph reference_fe_t instanc (see ref_fea dummi argument creat bind fig. 8) onwhich global fe space functionsx h,yh ground on. example, creat bind cell_ integration_facet_restrict invok create_restricted_to_facet bind cell_integrator_t facet f k. comput given facet /akxgp, r/ kxgp defer bind create_interpola- tion...to_facet reference_fe_t present list 24. second, facet_integrator_t unburden user complex underli fact coordin system k k align real space. end, equippedwith privat lookup permut table, call qpoints_perm(:,:) fig. 8, let translat facet quadratur point iden- tifier local number space k k. tabl alloc fill creat bind facet_integrator_t, particular reference_fe_t defer bind call fill_qpoints_permutations. given facet quadratur identifi gp facet permut index pi (see sect. 3.16), qpoints_perm(gp,pi) store valu pgp (see (25)). permut index store current_permutation_index facet_integrator_t, extract permuta- tion_index dummi argument theupdat binding. turn, paramet extract arrai facet_permutation_indices(:) fe_spa- ce_t list 27 (see sect. 10). note n-sim- plices, consid renumb facet orient cell share it, comment sect. 3.16. case, fill_qpoints_permuta- tion fill tabl ident permut columns. note re-orient n-simplic lead mappingsuk jjk j\0, problem soon take absolut value, e.g., (12). 9.4 facet integr user code exampl order grasp data structur cover far actual practice, fortran pseudocod snippet list 25 show user space code charg 24 note that, sect. 8.3, nodes_coordinates(:) member variabl cell_map_t instanc load coordin physic space geometri node cell surround facet. s. badia et al. 123 evalu integr (22) interior facet loop facets. bound subclass discrete_integration_t abstract data type present sect. 11.2 suitabl non-conform dg discret poisson problem. pair worth note remark list- ing 25. first, get_values() bind facet_integrator_t line 14 return permut k shape function values, i.e., shape_val- ues_ k(b,gp) actual store /bkxpgp. second, so-cal fe_space_t abstract (to cover sect. 10) charg creat facet integr data structur loop initi updat facet loop iter (see line 9). therefore, user actual directli deal data type bind interact illustr fig. 8. example, evid facet-loop base inte- gration conveni implement dg methods, resembl blackboard express (see, e.g., (20)). 9.5 change-of-basi implement reference_fe_t subclass section, provid detail present change-of-basi requir comput shape func- tion basi implement reference_fe_t sub- class. particular, implement raviart-thoma div-conform fe n-cube sect. 3.5 (see sect. 3.9 details). pre-basis, e.g., qk1;k;k qk;k1;k qk;k;k1 3d, gener- at subroutin called; see, e.g., evalua- tion pre-basi line 31 list 26. list 25. user-level pseudocod illustr usag facet integr data structur order comput integr (22) interior facet loop facets. fempar: object-ori parallel finit element framework 123 present comput boundari moment (16) list 26; interior moment simpler omit sake brevity. implement boundari moment requires: (1) creat refer- ence_fe_t implement qk1 d1 line 16, (2) facet quadratur refer facet line 24, (3) evalu refer fe quadratur point interpolation_t line 25. requir lagrangian (first order) fe repres geometri line 20. next, loop facet cell comput valu shape function cell facet quadrature, store interpolation_t instanc line 31. ingredients, comput boundari moment pre-basi function (see line 43) assembl change-of-basi matrix. interior moments, need invert change-of-basi matrix line 54. point, shape function basi linear combin pre-basi functions. thus, call fill_interpol bind correspond refer fe, creat pre-basi interpolation_t instanc appli change-of-basi matrix comput shape function basis, i.e., list 26. implement change-of-basi requir raviart-thoma divconform fe n-cubes, follow procedur present sect. 3.5. s. badia et al. 123 placehold evalu shape function deriv (at set quadratur point interpol created) stored. note ownership dof chang process. boundari moment (integr function facets) belong correspond facet, interior moment belong cell. vertic edg dof case. definit ownership skip brevity. 10 integr global dof handling: fe_space_t abstract section, introduc softwar abstraction, refer- red fe_space_t, repres (in gener scenario) mathemat concept global fe space x h x1h . . . x n h obtain mean cartesian product global fe space x ih correspond 1; . . .; nfield field unknown involv pdes; sects. 3.6 3.11. x ih describ combin of: (1) approxim xh physic domain x provid triangulation_t, i.e., mesh-lik contain cell xh partitioned, boundari lower-dimension objects, adjac relationships; sect. 7; (2) descript nfield refer fe associ triangul cell ground reference_fe_t; sect. 6. basic build block equip fe_space_t tool requir provid follow crucial services. 25 hand, charg handl (i.e., generating, storing, fetching) global enumer dof correspond x ih take account notion conformity; e.g., sects. 3.6 6.2. hand, handl data structur requir evalu integr cell facet (see sects. 8 9, respectively). particular, judici set them, orchestr respect life cycl interactions, unburden user (to larg extent) complex (among others) inher high order fes. oo design fe_space_t (a data type fempar, e.g., triangulation_t) strongli strive preserv encapsul data hide store access data effici (i.e., wai leverag data local effici exploita- tion modern memori architectures). user- friendli view fe_space_t implicitli (re)con- struct data type (associ interfac inter- actions) cover sect. 10.2. approach follow intern fe_space_t. 10.1 intern organ fe_space_t section, sketch intern fe_spa- ce_t organ order effici deliv servic outlin above. simplicity, restrict our- selv simplifi version fe_space_t that, larg extent, captur spirit actual counterpart fempar. declar simplifi data type shown list 27. 26 25 stress, however, set servic provid fe_space_t actual restrict two. 26 note fe_space_t actual fempar. data type hierarchi root base_fe_space_t, includ simplicity. hierarchy, have, e.g., fe space concret suitabl serial parallel distributed- memori environments. shown list resembl serial_fe_space_t. fempar: object-ori parallel finit element framework 123 collect reference_fe_t polymorph instanc store reference_fes(:) array. instanc uniqu identifi (within local scope fe_space_t) posit array. global fe space correspond given field, identifi f_id rang 1; . . .; num field (with list 27. intern fe_space_t select set bindings. s. badia et al. 123 num_field equal nfield above), describ by: (1) triangul member variabl (the rational under- ly polymorph clear sect. 10.2; (2) restrict cell provid refer fe space defin reference_fe_t instanc identifi field_cell_to_ref_fes(f_id,c_id) collection; c_id assum posit integ 1; . . .; triangulation%get num cell uniqu identifi cell. member variabl handl global dof number encompass line 1827 list- ing 27. global dof identifi store cell-wise, field-wis cell, lst_dofs_gids(:) array, turn (indirectly) address ptr_dofs_x_fe(:,:) array. particular, on assign local node relat field f_id cell c_id start end posit ptr_dofs_x_fe(- f_id,c_id) ptr_dofs_x_fe(f_id?1, c_id)-1 lst_dofs_gids(:), respectively, f id\num fields, posit ptr_dofs_x_- fe(f_id,c_id) ptr_dofs_x_fe(1,- c_id?1), respectively, f id num fields. number dof global fe space correspond field (exclud subject strong boundari conditions) store num_dofs_x_- field(:) array. member variabl line 15 store refer data type describ block layout current select (i.e., chang demand) global matrix right-hand vector linear (or sequenc them) requir solut pde hand. role block_layout_t global dof number gener process illus- trate sect. 10.3. data structur let fe_space_t handl evalu cell integr declar line 2329 list 27. set_up_cell_integr bind set them. method intend call user program right cell integr loop. ensur (scratch) data comput final form refer cell pre-comput triangul cell minim number integr data structur requir particular scenario hand. end, fe_space_t equip arrai contain quadrature_t, cell_map_t cell_integra- tor_tobject (seelin 24, 26, 28, respectively),which indirectli address hash_table_t member variableswith correspond names. 27 requir fe_space_t supports, e.g., non-conform fe space variabl order cell. uniqu identifi (dynam gener scope fe_space_t) assign integr object created. hash_table_t instanc letfe_space_t transform uniqu identifi contain arrai posit fromwhich integr object fetched. set_up_cell_integr method loop cells. sit cell, determin appropri quadratur cell associ uniqu identifier. (see discuss paragraph details.) quadratur gener (i.e., hash tabl lookup fails), new quadratur creat free posit cells_quadra- tures(:) arrai container, new identifier-posit pair insert hash table. otherwise, quadratur fetch array. process repeat cell_map_t cell_integrator_t instances. on uniqu determin combin uniqu identifi quadrature_t created/fet- ched reference_fe_t instanc current cell (see sect. 7). hand, cell_integrator_t instanc associ field current cell; cell_integra- tor_t instanc correspond field uniqu deter- mine uniqu identifi quadrature_t created/fetch reference_fe_t associ field (see sect. 8.4). therefore, uniqu identifi cell_map_t cell_integra- tor_t instanc requir evalu cell integr current cell easili determin combin on correspond instanc created. recal uniqu identifi refer- ence_fe_t instanc current cell, c_id, given field, f_id, retriev refer- ence_fe_id=field_cell_to_ref_fes(f_id, c_id), reference_fe_t instanc reference_fes(reference_fe_id). allocat arrai member variabl line 23 (with entri triangul cells) user order (optionally) determin degre quadratur triangul cell. member variabl alloc initi (dure fe_space_t creation) reserv flag instruct set_up_cell_integr us automat (default) strategi decid degre quadratur cell. default strategi reli defer bind reference_fe_t, name get_default_quadrature_degree, typi- calli return quadratur degre mass matrix term integr exactli (see sect. 8.1). 28 strategy, 27 term hash tabl reflect usual meaning, i.e., associ arrai map kei values. 28 stress, however, particular reference_fe_t subclass hand freedom implement differ strategi required. fempar: object-ori parallel finit element framework 123 particular, walk reference_fe_t instanc cell, (polynomial) refer cell function space maximum order ultim respons creat quadratur invoc create_quadratur defer binding. alternatively, user explicitli select quadratur degre cell. case, create_quadratur invok creat quadratur degre given correspond entri cell_quadratures_degree(:); sect. 8.1. case (i.e., default explicit quadratur degree), uniqu identifi reference_fe_t instanc current cell quadratur degre gener uniqu identifi quadratur created/fetched. hand, line 3238 list 27 encom- pass data structur requir evalu (both boundari interior) facet integrals; sect. 9. close rational underli cell coun- terpart follow set data structures. set_up_facet_integr bind loop facets. sit facet, determin appropri facet quadrature_t rule. quadratur degre default user-defin (via allocat arrai member variabl line 32). determin uniqu identifi quadratur rest facet- integr data structures, creat necessary, handl interactions. topolog cell share facet quadratur degre gener uniqu identifi facet quadratures. member variabl line 4142 provid support implement so-cal fe_facet_iter- ator_t data type cover sect. 10.2. finally, member variabl num_- fixed_dof list 27 fe_space_t count dof subject strong boundari conditions; sect. 10.4. 10.2 conceptu view fe_space_t follow idea present sect. 7.1, fe_space_t offer number iter provid travers objects, uniform data access internals. apart iter cell vefs, fe_space_t provid travers facet mean so-cal fe_- facet_iterator_t data type. iter essen- tialli requir implement evalu jump term in, e.g., error estim dg method user-friendli manner. reason clear cours sec- tion, design goal fulfil fe_space_t itera- tor abl provid access data counterpart triangulation_t iter (see sect. 7.1), abl effici avoid duplic code bound ones. example, fe_cell_iterator_t design abl provid coordin (in physic space) node describ geometri cell, apart global dof identifi it. let discuss design iter cell vef (a follow lines). data type defin list 28, set actu- alli replac cell vef. shown list 28, fe_set_iterator_t hold polymorph pointer fe_space_t instanc provid data access. dynam polymor- phism exploit extens code reus mind. type extens fe_space_t (e.g., suitabl distributed-memori environments), target polymorph pointer, enabl reus data code bound list 28. fe_space_t set (either cell vef) iter composit relationship counterpart triangula- tion_t iter (set_iterator_t). s. badia et al. 123 fe_set_iterator_t extensions. special relev list 28 composit relationship data type defin set_itera- tor_t, i.e., triangulation_t iter counterpart (see sect. 7.1). let fe_set_iterator_t fulfil aforement design goal, i.e., provid superset data class compos of, abl access data store triangul scope. fe_set_iterator_t reus set_iterator_t code underli sequenti travers object set. indeed, tbp fe_set_iterator_t, init, next, has_finish tbp fe_set_iterator_t simpli implement wrapper counterpart set_iterator_t. (we remark possibl provid fe_space_t deliber set share triangulation_t consist global number cell lower-dimension objects.) point import remark set_iterator_t instanc fe_set_itera- tor_t aggreg polymorph (see line 3 list- ing 28). state sect. 10.1 (in particular, line 12 list 27), fe_space_t instanc creat polymorph triangulation_t instance. creat bind fe_set_iterator_t extract fe_space_t, call create_cell_iter- ator bind (see sect. 7.1), ultim charg determin dynam type set_it- erator_t member variabl fe_set_iterator_t (apart leav iter posit object set). let fe_space_t (and associ iterators) re-us type extens trian- gulation_t (e.g., suitabl distributed-mem- ori comput and/or h-adaptivity). likewise, free bind fe_set_iterator_t reli free_cell_iter bind triangula- tion_t order safe dealloc dynam memori alloc perform creation.w stress that, case triangulation_t iterators, creat free tbp intend directli call user. instead, triangulation_t provid set (public) tbp (a differ iterators) pur- pose. example, express fe_space%create_fe_cell_iterator(fe_- cell_iterator) creat iter polymorph fe_cell_iter client-spac instance, fe_space%free_fe_cell_iterator(fe...) charg safe dealloc polymorph instance. implement fe_facet_iterator_t base close rational cell vef iterators, subtl differ though; list 29. provid fe_facet_iterator_t kind fe_vef_iterator_t, provid set data access method (e.g., cell share facet). however, restrict travers vef actual facets, abl provid data requir implement jump term facets. shown list 29, fe_facet_iterator_t extend fe_vef_iterator_t. automat equip data access method latter. hand, overrid method con- troll sequenti travers item set restrict facets, i.e., create/free/first/ next/has_finish list 29. implement method reli member variabl facet_- gid, facet_gids(:) member variabl fe_space_t; line 41 list 27. given facet global identifi facet gid, facet_gids(- facet_gid) hold global vef identifi correspond- ing facet. list 29. fe_facet_iterator_t data type. fempar: object-ori parallel finit element framework 123 actual set tbp fe_space_t iter highli depend type object point to. com- pleteness, briefli discuss tbp set correspond cell facet iterators, provid support implement servic fe_space_t focus on. particular shown list 30. list includ gener tbp line 35 68, discuss sect. 11.1. tbp line 1828, 5061 list 30 let user fetch fe_space_t integr data associ current cell facet point to, respectively. hand, update_inte- gration bind line 6 47 perform list 30. fe_cell_iterator_t facet counterpart. s. badia et al. 123 comput requir updat data structur hold shape function valu deriv eval- uat (current) cell facet (quadratur points) physic space. bind implement shown list 31. finally, get_permuta- tion_index tbp fe_facet_iterator_t let caller obtain permut index (see sects. 3.16 9.3 details). implement method reli facet_permutation_indices(:) member variabl fe_space_t; line 42 list- ing 27. given facet global identifi facet gid, facet_permutation_indices(facet_gid) hold permut index correspond facet. decid perman store facet permut indic perform reasons. reus (e.g., transient and/or nonlinear pde problem) overhead associ comput travers facet triangulation. updat cell_map_t instanc (associ cell point fe_cell_iterator_t instanc subroutin invoked) perform line 12 list 31. follow loop number field pde hand order updat cell_integrator_t field line 17. updat requir nodes_coordinates(:) scratch member variabl load coordin physic space node describ geometri cell hand (see sect. 8.3). particular fulfil line 10. coordin fetch actual store triangulation. however, fe_cell_iterator_t satisfi queri provid compos cell_iterator_t instance; list 28 accompani discussion. point, reader capabl grasp fe_facet_iter- ator_t counterpart subroutin implemented, omit order present short. go list 30, bind line 16 let user fetch field-wis global dof identifi fe_space_t associ node function current cell interior vefs. (the bind line 913 list 30, however, assist fe_space_t gener global dof number usag illustr sect. 10.3.) bind implement list 32. list 31. implement update_integr bind fe_cell_iterator_t. list 32. implement get_fe_dof bind fe_cell_iterator_t. fempar: object-ori parallel finit element framework 123 list 32, p_1d_ip_array_t assum data type singl member variable, call p, declar pointer rank-1 integer(ip) array. field, subroutin locat region lst_dofs_gids(:) member variabl correspond field current cell, associ correspond pointer fe_dofs(:). expens sacrif type safeti (in fortran mechan declar pointer read-only), avoid costli re-alloc user-level allocat arrai need case non-conform fe space highli vari degre polynomi space cells. end up, get_vef bind list 30 set fe_vef_iterator_t instanc point corre- spond vef cell. consequence, navig cells, vefs, cell vefs, etc., fe_space_t iter wai round. 10.3 global dof number gener section, discuss fe_space_t coordin build block cover far order gener global enumer dof describ global fe space x h : x 1h . . . x n h gener multi-field system pdes. process encompass gen- erate_global_dof_numb bind fe_s- pace_t (see list 27). code method shown list 33. block_layout dummi argu- ment let caller custom global dof number- ing generated. 29 hand, data type specifi block user want split (discrete) pde hand. particular, user select gener dof number suitabl monolith block storag linear algebra data structures, block_layout%get_num_blocks() return number larger one, respectively. hand, block_layout_t specifi map field blocks, block_layout%get_block_id(- field_id) return block identifi field identifi field_id map to. provid block linear algebra data structur fempar address row/column identifi local block, block_layout equip subroutin input necessari gener block-awar global dof number- ing, dof belong field block number first, follow on second, on. note block_layout_t hold insid dof block (see sect. 11.3). quantiti comput generate_- global_dof_numb (see discuss sequel). subroutin list 33 start check actual gener global dof numbering. global dof number avail (see predic line 9), avail suitabl input block_layout (see predic line 10). bulk generate_global_dof_num- bere concentr privat helper tbp fe_space_t call fe_space_count_dof fe_space_list_dofs; line 14 15 list- ing 33, respectively. code bind shown list 34 35, respectively. comput number dof field block, charg actual gener global dof identifiers. list 33. generate_global_dof_numb bind fe_space_t. 29 refer list 43 accompani text sect. 11 descript member variabl tbp block_lay- out_t. section, restrict relev global dof number process. s. badia et al. 123 line 631 list 34 charg comput number dof field, lines-3438, block. line determin number dof block accumul correspond field map block (comput lines). line ground notion owner cell vef; cell owner vef (1) lai boundari former, (2) cell (1) hold order iter cell present them, (3) vef own dof global fe space subject consideration. 30 (logical) work arrai owner_cell_per_vef_visited(:) keep track owner cell vef visit (or not) travers nest loop cell (see outer loop line 12), vef current cell (see inner loop line 16). sit cell, algorithm count dof associ node function logic place interior current cell (see line 14). loop vef current cell. owner cell current vef visit yet, current cell owner, current cell regist owner cell, dof associ node function logic place vef current cell count line 22. provid non-conform fe space dof vefs, skip loop vef cell acceler process case (see claus line 15 list 34). algorithm shown list 35 charg actual gener global dof identifiers. work arrai owner_cell_gid_per_vef(:,:) store owner cell global identifi vefs. hand, vef_lid_in_owner_cell(:,:) arrai acceler lookup tabl store vef local identifi (i.e., vef_lid) correspond owner cell visited, -1 otherwise. arrai index vef global iden- tifier (i.e., vef_gid). sit cell, algorithm alloc global dof identifi node function associ interior current cell start fields_current_dof(field_id), i.e., freeli avail global identifier; line 27. loop list 34. count_dof bind fe_space_t. 30 requir introduc includ concept void fe multi-field problem field defin domain (see sect. 6.5). fempar: object-ori parallel finit element framework 123 vef current cell. current vef visit yet, current cell owner, cell local identifi vef cell regist correspond work arrays. global dof identifi associ node function vef owner cell alloc line 32 (a start fields_current_dof(- field_id)). hand, current vef visited, global dof identifi associ node function vef current cell fetch correspond on owner cell line 39. bind call line encod per- mutat describ sect. 3.16. reader observe, list 35 ground (private) helper bind fe_cell_iterator_t that, cell level, aid gener global dof numbering; line 913 list 30. bind ultim reli ref- erence_fe_t instanc map cell tri- angulation; sect. 10.1. particular, sit cell, reference_fe_t instruct fe_cell_iterator_t associ node function interior cell, lower-dimension boundari object accord notion conform underli fe space hand; sects. 3.6 6.2. example, implement gener- ate_own_dofs_vef_numb bind imple- ment shown list 36. code list 36 extract list_iterator_t own_dofs_n_fac member variabl list 35. list_dof bind fe_space_t. s. badia et al. 123 reference_fe_t instanc current cell field_id. iter let travers node function own vef local identifi vef_lid (see sect. 6.2), determin (relative) posit lst_dofs_gids(:) global dof identifi alloc node functionals. note logic predic line 16 evalu .true. dof hand actual free, i.e., subject boundari condit impos strong form; sect. 10.4. finally, like stress error check statement major optim appli single-field single-block case shown code list section order present simpl possible. present fempar. par- ticular, aforement case, global dof number gener singl loop cell (instead two). line 14 list 33 avoided, defer comput number dof field block line 15. hand, need gener global dof number scratch available, permut old new number comput appli lst_dofs_gids(:) singl sweep cells. optimization, how- ever, present fempar, frequent case applic requir chang on-the-fli block-layout pde hand. 10.4 strong imposit boundari condit section, discuss mechan fe_s- pace_t provid order support strong imposit boundari conditions. order grasp mechan need fe_space_t design provid them, briefli introduc approach chosen fempar order handl type boundari conditions. us term fix dof refer dof sit boundari valu constrain (i.e., subject strong boundari conditions), term free dof refer remain ones. simplicity, let restrict laplacian problem inhomogen dirichlet boundari condit ux udx cd discret grad-conform fes. 31 discret solut uh 2 x h split part uh uh ehud, where: uh x a2ffre dofsg ua/ x a2ffix dofsg 0/a ehud x a2ffre dofsg 0/a x a2ffix dofsg uda / a: nodal valu ua actual unknown problem hand. ehud discret dirichlet data exten- sion, understood project dirichlet data extens eudx introduc sect. 3.1. nodal valu uda select ehud suitabl boundari fe approxim udx (e.g., boundari fe interpolation). 32 linear solv order comput nodal valu uh written as: list 36. implement generate_own_dofs_vef_numb bind fe_cell_iterator_t. 31 stress, however, approach discuss sequel handl strong imposit boundari condit applic complex problem discretizations, e.g., maxwel equat discret curl-conform fe spaces. 32 assum discret dirichlet data extens zero free dofs, gener situat accommodated. fempar: object-ori parallel finit element framework 123 x b2ffree dofsg a/a;/bub /a; f x c2ffix dofsg a/a;/cudc 8a 2 ffree dofsg; 33 coeffici matrix row free dofs, right-hand fe discret linear form (3); sect. 3.1. order assembl (33), process describ sect. 8 slightli modified. sweep tri- angul cell required. sit given cell k, element matrix ak vector fk comput usual. however, rows/column correspond fix dof ak assembl global matrix. appli entri fk . however, fk updat assembl order reflect contribu- tion strong boundari condit (see right-hand (33)). fortunately, user fempar unburden subtleties. hidden assembl gener bind fe_cell_iterator_t; list 30 39. apart ad contribut current cell global coeffici linear right-hand side, bind charg comput contribut fk strong dirichlet boundari conditions. pose addit requir fe_space_t. particular, (1) handl global enumer free fix dofs, abl distinguish kind dofs; (2) offer suitabl set bind project/interpol udx boundari ehud. order satisfi (1), fe_space_t split set dof free fix dofs, dof subset label separ f1; 2; . . .; jffree dofsgjg, f1;2; . . .; jffix dofsgjg, respectively. (thi implement expos fempar users.) turn, free fix dof valu actual store differ arrays, address separ correspond global identifi set, respectively; sect. 10.5. process associ global identifi free dof cover sect. 10.3. corre- spond fixeddof verymuch resembl free dofs. is, however, restrict vertices, edges, face triangul lai boundary, equip support user let process awar dof sit boundari actual fixed. fix dof global enumer process occur initi set-up fe_space_t; creat gener bind list 27. process ground differ ingredients. hand, user determinec sub-region set associ vef sit boundari (see sect. 7.1). example, user decid us set identifi 1 2 split vef belong tocd andcn, respectively. hand, abstract data type, call condi- tions_t, extend fempar users, let user custom strong imposit boundari conditions. particular, regard fix dof global enumer process, data type offer defer bind given set identifier, provid logic compon mask. compon pde system, mask provid dof associ vef mark set identifi fix free. fe space dof-to-compon associ (e.g., raviart-thoma nedelec fes), compon mask taken account, rest neglected. hand, 2), fe_space_t provid set method let user interpolate/project udx boundari ehud number suitabl ways. ehud ultim store instanc fe_function_t data type; sect. 10.5. boundari projector involv solut boundari mass matrix problem integr boundari facet evaluated; sect. 9. again, bind reli conditions_t abstract data type. particular, given boundari vef set identifier, defer bind data type return user-defin (scalar- valued) function impos compon pde hand. case raviart-thoma nedelec fes, d scalar-valu function correspond compon reconstruct vector-valu function, tan- gential normal component, respect imposed. 10.5 global fe function restrict triangul cells/facet section, introduc conveni softwar abstract oo design, refer fe_func- tion_t, repres global fe function uh 2 x : x1h . . . x n h. data type subset tbp (in particular, relev present section) present list 37. list 37, free_dof_valu fixed_dof_valu store uh ehud, respectively; sect. 10.4. polymorph member variabl type array_t; sect. 11.1. rely- ing set defer bind offer array_t, code bound fe_function_t written independ entri concret implement array_t laid memory, enabl code re-us larg extent. example, scalar_array_t concret realiz array_t us monolith storage, block_array_t s. badia et al. 123 store entri organ block (see sect. 11.1 details). hand, fixed_dof_valu member variabl static type scalar_array_t; sect. 11.1. 33 fix dof belong differ field assign intermix global identifiers, significantli simplifi enumer process. par- ticular, singl sweep boundari object suffices, contrast list 33, sweep cell requir order gener block-awar global num- bering. experience, turn block storag data structur suitabl distributed- memori environ strictli requir store ehud, prevent overhead associ run-tim polymorph deal fixed_dof_values.34 fe_function_t instanc creat fe_space_t instanc (to belongs); signatur creat bind list 37. bind select dynam type free_dof_values, storag layout, accord current select pde hand; block_layout member variabl list 27. entri free_dof_val- ue determin number ways. unknown problem solv (e.g., precondit iter linear solver spars direct solver), comput express involv fe_function_t instances, e.g., uh vh, uh vh wh, uh; vh;wh 2 x h. (indeed, fempar offer express syntax global fe function ground overload operators.) apart these, fe_space_t offer pair gener bindings, refer interpol project, comput dof nodal valu uh interpol (use express (9)) project (e.g., global l2 projec- tion) fe space user-defin function u(x). 35 gener bind overload differ regular bind suitabl scalar, vector, tensor-valu functions, respectively. interpol bind fe_space_t written independ refer fe tbp associ refer- ence_fe_t comput local interpol (6). apart softwar represent global fe function, fe code typic need mechan that, sit cell facet triangulation, provid values, gradients, etc. global fe function uh u1h . . . unh evalu quadratur point physic space. end, fempar offer set data types, refer cell_fe_function_type_t facet_fe_- function_type_t, type=scalar,vec- tor,tensor, repres restrict uih given triangul cell facet, respectively. code snippet fig. 9 illustr usag data list 37. fe_function_t data type. 33 parallel environments, processor store fix dof valu belong associ subdomain. 34 algorithm charg comput ehud requir differ storag layout scalar_array_t (e.g., block storag and/or suitabl distributed-memori computers), and/or restrict fix dof ehud correspond given field (or set fields). case, ehud scatter place forth temporari work space appropri layout algorithm hand charg comput entri (e.g., serial parallel distributed-memori boundari mass problem iter solver). turn high perform penalti provid algorithm requir perform sweep boundari facet (e.g., order assembl boundari mass matrix). sweep, fix dof question count identified. 35 analyt scalar, vector, tensor-valu function support fempar class scalar_function_t, vector_function_t, tensor_function_t, respec- tively. implement analyt scalar function f x fempar, user extend scalar_function_t method get_- value, get_gradi (if used), etc., analyt expres- sion, given point t repres x. proce analog vector tensor fields. data type simpl omit descript here. fempar: object-ori parallel finit element framework 123 types, assum uih belong global fe space vector-valu functions. worth note remark code snippets. first, updat bind data type reli gather_nodal_valu bind fe_- function_t; list 37. equip cell/facet fe function abil restrict (gather) nodal valu uih global local arrai (store privat scratch data cell/facet fe function data types), take care strong boundari conditions. second, updat bind requir procedur that, given shape functions, derivatives, etc., evalu quadratur point physic space, nodal valu uih restrict current cell, provid shape function values, gradients, curls, etc., fe function quadratur points. servic provid reference_fe_t set evaluate_fe_function... defer bind line 6368 list 6. note fe_- function_t extract set data cell_integrator_t facet_integrator_t instanc access fe_cell_iterator_t fe_facet_iterator_t (provid input update), respectively. third, facet fe function provid uih values, gradients, etc., facet quadratur point perspect surround cells. sens function uih belong non-conform fe spaces, discontinu cell bound- aries. facet fe function cope fact coordin system surround cell align physic space, differ local num- bere assign facet quadratur point perspect cell; sect. 9.3 exposi- tion strategi follow solv issue. 11 build fe affin oper section, introduc softwar abstract construct algebra problem (10) sect. 3 relies. softwar abstractions, rela- tionship, depict fig. 10. main design goal underli propos softwar architectur follows. seek code reusabl extensibility, fempar user dispos uniqu entri point data type associ bind order build fe linear system, matter scalar pdes, matter linear algebra data structur hold linear entri scalar (mono- lithic) blocked, matter laid memori (centralized, distributed-memory). fempar, uniqu entri point data type refer fe_affine_operator_t. mathematically, fe_affine_operator_t repres affin oper (5), obtain discret weak formul linear(ized) problem (4). introduc sect. 3.6, oper repres (after defin base trial test fe spaces) f defin (10). solut fe problem root oper (a soon fe problem nonsingular). order seek aforement goal, fe_affine_operator_t reli abstract data type, refer assembler_t (see fig. 10). nutshell, assembler_t offer set fe-assembl tailored, data structur neutral, defer tbps, e.g., assembl contribut cell facet integr linear coeffici matrix and/or right-hand f. subclass assembler_t on ultim respons deal detail underli fig. 9 user-level code snippet illustr usag cell_fe_function_type_t (left) facet_fe_function_type_t (right) data type s. badia et al. 123 particular linear algebra data structur hand. on offer fe-assembl neutral interfac inject new entri add contribut them, softwar piec reusabl separable, e.g., parti softwar project (not necessarili fe-oriented) standalon softwar subsystem. fempar offer rich set linear algebra data structures, e.g., data structur organ blocks, enabl implement block precondition multiphys problem (see, e.g., [4345]). apart requir handl linear coeffici matrix right-hand system, fe_affine_operator_t interact data type requir deliv life cycl (i.e., auto-gener- ation). particular, f entri comput accord express (10). express involv fe space (fe_space_t) discret (bi)- linear form problem hand. express softwar second ingredient, introduc dis- crete_integration_t abstraction; fig. 10. structur section follows. sect. 11.1, present assembler_t abstract data type, rational underli design linear algebra structur ground on. next, sect. 11.2, intro- duce discrete_integration_t abstract data type ultim charg perform inte- gration (bi)linear form assembl discret affin operator. particular implement data type (i.e., subclass) galerkin approxi- mation stoke problem. finally, fe_affine_- operator_t data type describ sect. 11.3. 11.1 linear algebra data structur associ assembl linear algebra fempar reli pair data type hierarchi root mathemat abstract linear algebra oper vector, repres softwar mean linear_operator_t vector_t abstract data types, respectively. abstract data type let number linear algebra algo- rithm fempar (e.g., iter linear solver block precondition pde systems) express independ actual implement con- crete matrix vector data structur used, block layout (if any), storag (e.g., dens spars storag format) memori layout (e.g., local distributed-mem- ory), enabl code re-us extens larg extent. abstract express syntax allow con- struction complex express involv oper oper and/or vector provided. enabl implement new algorithm compact manner. however, linear algebra algorithm discuss postpon work, descript data type associ method hierarchi restrict necessari assembl fe affin operator. sparse_matrix_t data type intermedi level hierarchi root linear_- operator_t. crucial data type fempar, repres scalar, non-distributed, spars matrix. design follow idea present [92]. design fig. 10 uml class diagram fe_affine_operator_t abstract relationship fempar class fempar: object-ori parallel finit element framework 123 (re)us state oo design pattern [88] hide actual spars matrix storag format user. follow pattern, sparse_matrix_t compos polymor- phic member variabl (declared) type base_sparse_matrix_t. dynam type chang runtim (via re-allocation). dynam type repres storag hand used. current subclass base_sparse_matrix_t includ coo_sparse_matrix_t, csr_sparse_matrix_t, csc_sparse_matrix_t, correspond coordi- nate list (coo), compress spars row (csr), compress spars column (csc) spars matrix storag format [93], respectively. life cycl sparse_matrix_t instanc follows. user invok creat tbp, sole specifi size matrix, i.e., number row columns. method, however, trigger number subsequ actions. particular, alloc dynam type correspond coo format, leav readi inject addit contri- bution entri matrix. com- pressed, format ideal shape inject addit contribut entri matrix. simpli push member arrai grow dynam integration/assembl loop (via judici realloc strategi trade cost memory). spars storag formats, csr storag implement csr_sparse_matrix_t data type (also type extens base_sparse_matrix_t), memori efficient, requir predefin sparsiti pattern, precomputed. suit dynam build process matrix. point reader note that, inflex storag formats, typic need accur estim maximum number nonzero row (or column) memori efficient. estimation, however, larg upper bound complex scenario (e.g., hp-adapt method 3d, others). build process finishes, user method special design leav sparse_ma- trix_t instanc readi (e.g., perform oper it). involv compress process, duplic entri sum up, filter (a select user) transform coo storag format storag format user actual requir (e.g., csr). simplicity, refer stage compress matrix. sparse_matrix_t instanc final state, possibl insert add contribut entries, far belong sparsiti pattern result build process. thus, e.g., transient and/or nonlinear problem solv triangul domain change, assembl coo format perform nonlinear iter time step. shown far, softwar architectur sparse_matrix_t (current future) storag format possibl singl framework. flexibl conveni main reasons. first, given storag format like uni- formli better perform possibl oper architectures. second, fempar interoper- abil extern softwar dramat increases. new library, us storag format, integrated, new extens base_sparse_- matrix_t added, leverag dozen thousand line code written. apart sparse_matrix_t, spars matrix data type available, suitabl handl block and/or dis- tributed-memori computers. data type essenti compos wai sparse_matrix_t instances. example, block_sparse_matrix_t compos nblocks2 sparse_matrix_t instances; fig. 10. it, however, provid set special tbp appli block case, e.g., get_block tbp let client retriev sparse_matrix_t instanc corre- spond given block matrix. counterpart sparse_matrix_t vector case refer scalar_array_t. repres scalar, non-distributed, linear algebra vector, entri store explicitli simpl (fortran intrinsic) allocat array. however, provid exploit sparsity, code bound data type significantli simpler bound sparse_- matrix_t. equip pair gener bindings, signatur come differ flavours, order insert add contribut vector. likewise, vector-lik data type avail suitabl handl block and/or distributed-memori computers. example, block_array_t compos nblock scalar_array_t instances; fig. 10. apart linear algebra data structur far, need addit data type assembler_t, offer fe-assembl tailor signatur fe_affine_- operator_t. interfac defer tbps, extensions, e.g., scalar_assembler_t block...assembler_t, implement, shown list 38. assembler_t gener handl storag layout charg isol fe_affine_operator_t implement details. purpos mind, compos (polymor- phic) matrix_t (polymorphic) array_t instance. turn abstract data type root matrix arrai data type seen far, respectively. set s. badia et al. 123 defer tbp abstract data type design (on purpose) suffici rich handl life cycl concret matrix arrai instances. high heterogen concret subclass ma- trix_t array_t preclud it. set tbp is, particular, restrict alloc memori entries, initi entri given valu (e.g., initi zero), dealloc intern memory. oper requir fe_affine_operator_t deploy life cycle. bulk life cycl concret sub- class matrix_t array_t handl subclass assembler_t. be, provid assembler_t subclass on awar concret detail correspond ma- trix_t array_t subclasses. besides, this, overcom overhead associ dynam run- time polymorphism, provid bind fine-grain call tbp inject ad contribut matrix arrai determin compil time. go list 38, observ assem- bly_arrai (resp., assembly_matrix) take intrins fortran arrai (resp., rank-2 array) dummi argument element vector (resp., matrix). besides, get global dof identifi singl cell, correspond cell surround facet (see line 23, 35 36 list 38). case scalar_assembler_t, implement tbp provid scalar_array_t order add contribut entri correspond tbp sparse_matrix_t. case block_assembler_t, implement loop blocks, obtain refer current block get_block tbp, correspond tbp previou case. assembly_arrai assembly_matrix tbp fe_cell_iterator_t fe_ facet_iterator_t data type implement assembl tbp (see line 35 68 list 30 sect. 10.2). completeness, list 39 list 38. assembler_t abstract data type defer tbps. fempar: object-ori parallel finit element framework 123 signatur tbps. on actual user type extens dis- crete_integration_t, describ sect. 11.2. finally, compress_storag defer tbp assembler_t let fe_affine_operator_t signal build process linear algebra data struc- ture finish compress final stage. stress softwar architectur present section provid uniform assembl interfac client complet independ underli imple- mentat linear algebra data structures. subclass assembler_t charg manag block (if any), sparse_matrix_t charg manag storag schemes. 11.2 discret integr fe oper section, introduc abstract data type discrete_integration_t (see list 40). defin gener integr binding, over- load integrate_galerkin inte- grate_petrov_galerkin defer tbps, depend number fe_space_t instanc pass (see, e.g., line 8 list 40 interfac cor- respond galerkin case). user want implement fe problem extend data type overwrit tbp (galerkin petrov-galerkin) user-defin subclass. overridden method, user implement evalu entri f numer integr discret bilinear linear form (10) (see sect. 3). base experience, integr fe code exhibit huge level flexibility. time want consid new set pde new express discret bilinear form, compon modified. abil integr gener time integr scheme requir function arbitrari number steps, deal nonlinear prob- lem involv need evalu fe function integr discret forms, includ variabl physic coeffici bodi forc term determin analyt functions. result, rigid level eliminated. indeed, discrete_in- tegration_t abstract data type forc sub- class adher signatur defer tbp overload integrate, member variabl subclass forc handle. design previous sketched, user absolut flexibl design discrete_integration_t subclass, ad attribut method requir integr assembl discret forms, e.g., ad arbitrari number fe_function_t *_func- tion_t instanc (and correspond setter driver level) physic properties, previou time step values, solut previou nonlinear iteration, etc. integr cell-wis term (bi)linear form accomplish travers cell fe_cell_iter instanc (see sect. 10.2), list 39. interfac assembl tbp set (either cell facet) iterators. s. badia et al. 123 access (1) cell integr data (see sect. 8) requir comput local cell contribut (11) (2) local-to-glob dof number need assembl global linear algebra data structures. analogously, integr facet terms, e.g., on (20) dg formulations, requir us fe_- facet_iterator_t instanc travers facet integr correspond facet terms. method integr call execut numerical_setup tbp fe_affine_opera- tor_t. fact fe_affine_operator_t decid invok galerkin petrov- galerkin integration, depend fe space pass actual argument (the second optional) creat bind (see line 15 list 42). analogously, fe space(s) pass actual argument(s) integrate_* bindings, need integr step (see line 8 list 40 galerkin case). illustr purposes, present list 41 exampl extens discrete_integration_t. show implement defer procedur in- tegrate_galerkin approxim stoke problem galerkin method. data type exampl driver present sect. 12 inf-sup stabl taylor-hood mix fe method (see list 41). 36 comment above, integr (bi)linear form requir cell integr machinery, provid fe_space_t creation fe_cell_iterator_t line 19 list 41. apart control loop cell (line 24 62), fe_cell_iterator_t provid numer quadra- ture, turn requir number integr point (line 31), associ weight (line 32). provid determin jacobian cell map (line 32), shape function gradient line 28 30 (see (13) (14)). implement (bi)linear form close blackboard expression, make compact, simple, intuitive. possibl definit vector_field_t, tensor_- field_t data types, correspond express syntax avail fempar. carefulli discuss sect. 8.5, achiev oper over- load differ vector tensor operations, e.g., contract scale operations. symmetric_- (use line 35 38), double_contract (use line 40) trace helper stand-alon function (use line 36 49) offer tensor oper easy.w note implement efficient, oper dynam memori allocation/deallocation. finally, fe_cell_iterator_t offer tbp assembl element matrix vector assembl impos strong dirichlet condit (line 66) perturb (3) (see sect. 10.4). dirichlet data extract fe_function_t repres ehud, attribut concret discrete_integration_t. non-conform fe spaces, formul requir loop facet integr dg terms. written similar fashion tool describ sect. 9. example, stokes_galerkin_integration_t extens attribut force, line 56 integr list 40. abstract data type discrete_integration_t defer tbps. 36 note stoke subclass discrete_integra- tion_t list 41 implement galerkin approxim problem independ fe space used. re-us conform inf-sup stabl mix fe method, e.g., taylor-hood, conform crouzeix-raviart, mini element, etc. choic mix fe space determin user driver, build cartesian two-field fe space. fempar: object-ori parallel finit element framework 123 list 41. implement bind overrrid integration_galerkin tbp discrete_integration_t galerkin approxim stoke problem. s. badia et al. 123 right-hand side. vector field describ instanc vector_function_t data type. 11.3 fe affin oper abstract (simplified) declar fe_affine_opera- tor_t data type shown list 42. fe_affine_operator_t creat singl fe_space_t instance, petrov-galerkin formulations; second instanc option and, passed, galerkin method used, i.e., fe space trial test spaces. user (optionally) configur desir block layout. given cartesian product fe space x1h . . . x nfield h multi- field problem nfield field (see sect. 3.11), block layout repres partit field subsets. 37 describ argument arrai field_block size num_field equal nfield, indic block field assigned; default, one-block case used. e.g., stoke problem exampl 3.2, consid monolith block layout block includ veloc pressur field (field_blocks=[1,1]), one-field block (field_blocks=[1,2] [2,1]). additionally, user provid addit inform diagon blocks, (1) block symmetr not, (2) symmetr storag want block not, (3) block posit definite, semi-posit definite, indefinite. user option- alli provid arrai logic field_coupl (of size num_field num_fields); posit i; j determin matrix entri relat trial/test function fe space fe space j zero (in case, coupl false) not. stoke problem galerkin method, entri fals (no coupling) pressure-pressur entry. arrai provided, case default field coupled. impli memori con- sumption, e.g., store zero entri pressure- pressur block stoke problem. block layout inform store data type block_layout_t, sketch list 43, store arrai field_block field_coupling. creat bind creat fe_affine_op- erator_t. store block-wis dof number gener fe_space_t instance, instruct pass block_layout_t38 call tbp generate_global_dof_num- bering, describ sect. 10.3. fe_affine_operator_t hold polymor- phic pointer assembler_t instance. dynam type select creation phase depend number blocks, storag layout required, (parallel serial) environment. finally, polymorph pointer instanc declar type discrete_in- tegration_t store (see line 11 list 42). creation phase, fe_affine_operator_t readi setup. thank design linear algebra data structur fempar, requir symbol setup, i.e., precomput (potential) sparsiti list 42. fe_affine_operator_t data type. 37 actual order field cartesian fe space determin user creation multi-field fe space, consist implement discret weak form. see, e.g., creation mix taylor-hood fe space line 1121 list 46, field veloc field second pressur field, integr weak form, e.g., line 34, 37, 42 list 41, number respected. 38 block-wis number creat independ dof num- bere block. thus, dof differ block block-wis dof label. fempar: object-ori parallel finit element framework 123 pattern. numerical_setup tbp line 17 list 42 call integrate_galerkin tbp discrete_integr pointer trial_fe_spac associ inte- grate_petrov_galerkin otherwise, discuss sect. 11.2. 12 driver exampl stoke problem section, softwar architectur driver program approxim solut stoke problem. end, implement galerkin fe method ground static (i.e., non-adaptable) conform mesh inf-sup stabl fe spaces. particular, con- sider conform fe space vh qh, vh grad- conform lagrangian space order k 1, qh, grad-conform lagrangian space order k, i.e., mix taylor-hood fe [5]. 39 fempar user decid design softwar architectur main driver program. driver program follow typic stage need simul pipelin base fes. seek uniformity, architectur present list 44 45 recommend fempar users. main pro- gram unit reli number driver-level modul units, fempar librari develop user specif problem hand. modul defin driver-level deriv data type tbps. central deriv data type, call stokes_- driver_t example, design drive necessari steps. particular, offer public tbp, call run_simulation, driver program reli perform actual simulation. driver program simpl concis shown list 44. main data type driver, stokes_driver_t, shown list 45. equip set member variabl type describ previou sections; comment right-hand member variable. data type solver_t line 11 exist fempar such. actual complet set data type provid interfac high-end parti spars direct solvers. besides, develop abstract implement iter linear solver (in- cluding, e.g., conjug gradient gmre krylov subspac solvers). converg solver acceler advanc precondition ground multilevel balanc domain decomposit con- straint (mlbddc) precondition [34, 37]. descrip- tion linear solver softwar subsystem deserv consider space postpon futur work. example, understood data type provid necessari servic requir implement solve_system tbp line 20 list 45. data type stokes_conditions_t line 9 extend con- ditions_t sect. 10.4. encod strong dirichlet boundari condit data particular operator. member variabl parameter_list (see line 4) paramet dictionari \key; value[ pairs. imple- mentat provid stand-alon extern softwar librari call fpl [86]. member variabl stokes_paramet (see line 3) user-defin data type encapsul interact command line parser provid flap softwar packag [94]. implement tbp line 14, pars argument given user command line, transfer aforement parameter_list member variable. run_simul tbp (call main program line 8 list 44) implement help privat tbp line 1721 list 45. setup_triangul tbp invok creat tbp static_triangulation_t. depend command-lin paramet values, user select automat gener structured/uniform triangul list 43. block_layout_t data type. 39 pressur field belong l2x. thus, discontinu pressur fe space consid well. l2x-conforming. case of, e.g., conform crouzeix-raviart mix fe. s. badia et al. 123 simpl domain (e.g., unit cube), current brick (quadrilater hexahedral) cells, read mesh data file, e.g., gid unstructur mesh gener [91]. fe space built setup_fe_spac tbp, sketch list 46. arrai base type p_reference_fe_t, data type wrap polymorph pointer refer- ence_fe_t instance, alloc line 8 list 46. reference_fe_t instanc veloc pressur field creat call make_refer- ence_f line 11 21, respectively; sect. 6.4. interpol order numer scheme read command-lin line 5. select order equal k 1 k line 11 21, respectively. dummi argument continu determin x admit trace operator. particular example, con- sider continuity=.false. want us discontinu pressur space. creat tbp fe_space_t (line 35) perform composit refer fe build cartesian product space x h. finally, set_up_cell_integr tbp fe_space_t line 38 set data struc- ture requir evalu cell integr list 40. implement setup_fe_affine_op- erat bind shown list 47. invok creat tbp fe_affine_operator_t line 6. state monolith storag global coeffici matrix (line 13), symmetr (line 9), want symmetr storage, i.e., store upper triangl (line 8), fact indefinit (line 10). definit field_coupl line 14 reflect pressur diagon block null. pass instanc fe_space_t line 11 instanc subclass stokes_integration_t line 12. set oper line 27, creat fe_function_t instanc line 18. line 19, mean servic provid fe_space_t, interpol analyt function prescrib boundari veloc field (retriev stokes_conditions), fix strong dirichlet dof fe_function_t instanc hand. result, fe function repres ehud, zero extens free dofs; sect. 10.4. fe function pass stokes_integration_t instanc line 24. finally, trigger oper auto-construct line 27. list 44. main program solut stoke problem. list 45. main data type stoke driver. fempar: object-ori parallel finit element framework 123 solve_system tbp (see line 20 list 45) invok direct precondit iter solver obtain free dof nodal valu fe function (see sect. 10.5). provid this%solut input solve_system vanish free dof (see discuss previou paragraph), common practic fempar driver save space re-us space devot free dof this%solut store free dof nodal valu solut problem hand. stress solver fempar solv free dofs. experience, decis dramat simplifi develop preconditioners, provid develop take care strong dirichlet boundari conditions. finally, write_solut tbp (see line 21 list 45) charg gener simul result data file later visual using, e.g., visit [95] paraview [96]. end, write_solu- tion reli format independent, extens abstrac- tion, refer output_handler_t. let user regist arbitrari number fe function (togeth correspond fe space function gener from) cell data arrai (e.g., materi prop- erti error estim indicators), output appropri format later visualization. responsibilities, (abstract) data type gener data written (potenti parallel-distributed) file neutral, cell-ori data structures, deal (potentially) non-conform (discontinuous), variabl degre fe space cells. user select appli differenti oper fe function, divergence, gradient curl, involv calcul perform cell, custom cell output (e.g., belong interior geometri unfit fe simulations) implement cell iterators. gener actual data file appropri format charg implement (extensions) output_handler_t. fempar current offer implement output_handler_t (although implement grow commun fempar develop given extens softwar architectur designed). vtk_output_han- dler_t let user gener data standard- open model vtk [97]. current reli lib_vt- k_io [98], (by now) actual exploit parallel mpi i/o instead us naiv singl file mpi task scheme. vtk_output_handler_t list 46. implement setup_fe_spac bind stoke problem. s. badia et al. 123 recommend option serial comput parallel comput moder number pro- cessors. second one, xh5_output_handler_t, let user gener data xdmf [99]. xdmf separ descript raw data, refer light data, data itself, refer heavi data. light data express set xml- base construct suit repres distributed- memori data structur fempar. xdmf turn sup- port heavi data store hdf5 [100]. hdf5 is, others, data model file format design parallel i/o data challeng mind. mean set support open sourc libraries, refer par- allel hdf5 libraries, fempar take advantag underli distribut file have deal high complex lower-level implemen- tations, raw mpi i/o. particular, ser- vice provid xh5for [101], stand-alon softwar library, develop scratch, let user read/writ parallel partit fem mesh take advantag collective/independ mpi-io provid phdf5 librari effici gener vast data typic result large-scal scientif comput simulation. 13 conclus work, thoroughli describ approach follow fempar order abstract softwar numer approxim problem govern pde fe methods. mathemat framework fe split number (mathemat motivated) deriv data type interaction, result well-separated, robust, stabl set customiz softwar abstract develop wide applic fe solvers. tool equip fempar user machineri need perform step simul pipeline, includ mesh import/generation, dof enumeration, evaluation/ assembl algebra linear equat fe integration, solut linear system, output comput result appropri format later visualization. order achiev goal, softwar architectur fempar thoroughli design mean advanc oo softwar re-engi- neer techniqu (includ recurr applic oo design pattern [85, 88]) order increas eas use, extensibility, flexibility, reusability. fempar softwar architectur implement latest oo featur fortran03/08 standard, namely, inform hide data encapsulation, inherit type extension, dynam run-tim polymorphism. version fortran standard wide (and robustly) support compil typi- calli avail high-end comput environments. judici set program techniqu let achiev reason trade-off extens perfor- mance, avoid case comput overhead frequent associ abstract oo soft- ware libraries. list 47. implement setup_fe_affine_oper bind stoke problem. fempar: object-ori parallel finit element framework 123 softwar abstract cover work include: definit refer fes, reli concept polytop defin cell topolog arbitrari dimensions, machineri defin multi-dimen- sional polynomi function arbitrari order easi automat way, gener procedur gener shape function base local dofs. global fe space abstraction, reli refer fe(s) triangul physic domain. respons defin local-to-glob dof numbering, respect conform (if needed). fe space provid tool numer integr (bi)linear forms, e.g., map- ping refer physic space, etc., cell facet (for dg methods). fe affin oper gener discret origin problem (probabl linear step). fe solut root (a soon problem well-posed) operator. operator, trial test function discret (bi)linear form problem hand defined, repres matrix vector entri comput numer integr fe space. fempar 4 year team 10 research differ research institu- tion universities. initi oo re-design, deriv data type (attribut bindings) gradual modifi accommod new featur considered, fix express limit depen- denci knot origin design. softwar architec- ture converged, certainli subject futur change, proven capabl satisfi number user softwar require- ments, applic problem involv complex advanc featur (e.g., develop grow geometri 3d print technology). con- sider steadi regime, attain year development, tremend man-month power effort, proof softwar abstract fempar practic relev prospect user developers, research want learn oo implement fe methods. motiv decis author promot librari commun softwar project, open extern user new collaborators, publish librari public git repositori [42], write article. particular, architectur describ correspond public releas fempar, assign git tag fempar-1.0.0. public releas fempar 300k line (mostly) fortran code. thus, document like one, detail descript servic pro- vide librari motiv underli softwar design, valuabl resourc com- plement sourc code, overwhelm itself. paper, restrict construct fe oper body-fit fe spaces. however, major (and uniqu compar fe sci- entif softwar packag avail internet) cornerston fempar abstract oo framework implement wide applic highli scalabl multilevel dd solvers. 40 let framework highli coupl numer integr data struc- ture application, hand, highli customizable, other, deriv optim pre- condition particular structur discret oper hand, tackl new problem challenges, leverag distributed-memori implement idea [37] framework ground on. cus- tomiz build block framework includ fine-grid coarse-grid dof aggregation, constraint matrix underli imposit continu coars dof function coars objects, weight oper underli inject continu discontinu spaces, kind solver dirichlet, neumann constrain local prob- lems, coarsest-grid global problem [103]. how- ever, postpon discuss solvers, preconditioners, data structur suitabl parallel dis- tributed-memori computers, exot dis- cretiz techniqu fempar, like b-spline xfem methods, subsequ works. acknowledg author want thank jesu bonilla, oriol colomes, eric neiva, hieu nguyen, marc olm, vctor sande, francesc verdugo (in alphabet order) strong commit fempar project, implement softwar describ work, thorough review preliminari version document. resourc need develop sci- entif librari librari like fempar feasibl excel research funding. sense, sb sincer thank support european research council start grant no. 258443comfus: comput method fusion technolog fp7 program relat proof concept grant no. 640957fexfem: free open sourc extrem scale finit element softwar proof concept grant no. 737439nuwasim: nuclear wast deep repositori simul h2020 program. sb gratefulli acknowledg support receiv catalan govern icrea academia research program. complianc ethic standard conflict author declar conflict interest. 40 indeed, multilevel dd solver fempar 2014 high-q club scalabl european codes, maintain julich supercomput center [102]. s. badia et al. 123 open access articl distribut term creativ common attribut 4.0 intern licens ( tivecommons.org/licenses/by/4.0/), permit unrestrict use, distribution, reproduct medium, provid appropri credit origin author(s) source, provid link creativ common license, indic chang made. refer 1. guo b, babuska (1986) h-p version finit element method. comput mech 1(1):2141 2. ainsworth m, oden jt (2011) posteriori error estim finit element analysis. wiley, new york 3. melenk jm, wohlmuth bi (2001) residual-bas posteriori error estim hp-fem. adv comput math 15(14):311331 4. nedelec jc (1980) mix finit element r3. numer math 35(3):315341 5. brezzi f, fortin m (1991) mix hybrid finit element methods. springer, berlin 6. arnold dn, falk rs, winther r (2006) finit element exterior calculus, homolog techniques, applications. acta numer 15:1155 7. neilan m, sap d (2016) stoke element cubic mesh yield divergence-fre approximations. calcolo 53(3):263283 8. hugh tjr, cottrel ja, bazilev y (2005) isogeometr analysis: cad, finit elements, nurbs, exact geometri mesh refinement. comput method appl mech eng 194(3941):41354195 9. cockburn b, gopalakrishnan j, lazarov r (2009) unifi hybrid discontinu galerkin, mixed, continu galerkin method second order ellipt problems. siam j numer anal 47(2):13191365 10. demkowicz l, gopalakrishnan j (2010) class discontinu- ou petrov-galerkin methods. i: transport equation. comput method appl mech eng 199(2324):15581572 11. ang j, barrett r, benner r, burk d, chan c, cook j, donofrio d, hammond s, hemmert k, kelli s, le h, leung v, resnick d, rodrigu a, shalf j, stark d, unat d, wright n (2014) abstract machin model proxi architectur exascal computing. in: co-hpc14 proceed 1st intern workshop hardwaresoftwar co-design high perform computing. ieee, pp 2532 12. gropp w (2015) mpi?x exascale? keynot intern high perform comput forum, tianjin, china 13. kale lv, krishnan s (1993) charm??: portabl concurr object orient base c??. acm sigplan 28(10):91108 14. bauer m, treichler s, slaughter e, aiken (2012) legion: express local independ logic regions. in: proceed intern confer high perform computing, networking, storag analysis, sc 12, lo alamitos, ca, usa, ieee societi press, pp 66:166:11 15. kaiser h, heller t, adelstein-lelbach b, serio a, fei d (2014) hpx: task base program model global address space. proceed 8th intern confer partit global address space program models, pga 14, new york, ny, usa, acm, pp 6:16:11 16. janin bennett pi, robert clai pm, baker g, gamel m, hollman d, knight s, kolla h, sjaardema g, slattengren n, teranishi k et al (2015) asc atdm level 2 milestone# 5325: asynchron many-task runtim analysi assess- ment gener platforms. technic report sand2015-8312, sandia nation laboratori 17. bangerth w, hartmann r, kanschat g (2007) deal. iia general- purpos object-ori finit element library. acm tran math softw 33(4):24 18. bangerth w, davydov d, heister t, heltai l, kanschat g, kronbichl m, maier m, turcksin b, well d (2016) deal. ii library, version 8.4. j numer math 24:135141 19. aln m, blechta j, hake j, johansson a, kehlet b, logg a, richardson c, ring j, rogn me, well gn (2015) fenic project version 1.5. arch numer softw 3(100):923 20. bauman p, stogner r (2016) grins: multiphys framework base libmesh finit element library. siam j sci comput 38(5):s78s100 21. cantwel cd, moxei d, comerford a, boli a, rocco g, mengaldo g, grazia d, yakovlev s, lombard je, ekelschot d, jordi b, xu h, mohami y, eskilsson c, nelson b, vo p, biotto c, kirbi rm, sherwin sj (2015) nektar??: open- sourc spectral/el framework. comput phy commun 192:205219 22. moos (multiphys object-ori simul environ- ment) framework. 23. mfema free, lightweight, scalabl c?? librari finit element methods. 24. hecht f (2012) new develop freefem??. j numer math 20(34):251265 25. dedner a, nolt m (2012) construct local finit element space gener refer elements. in: dedner a, flemisch b, klofkorn r (eds) advanc dune. springer, berlin, pp 316 26. balai s, abhyankar s, adam mf, brown j, brune p, buschelman k, dalcin l, eijkhout v, gropp wd, kaushik d, kneplei mg, mcinn lc, rupp k, smith bf, zampini s, zhang h, zhang h (2016a) petsc web page 27. balai s, abhyankar s, adam mf, brown j, brune p, buschelman k, dalcin l, eijkhout v, gropp wd, kaushik d, kneplei mg, mcinn lc, rupp k, smith bf, zampini s, zhang h, zhang h (2016b) petsc user manual. technic report anl-95/11revis 3.7, argonn nation laboratori 28. balai s, gropp wd, mcinn lc, smith bf (1997) effici manag parallel object orient numer soft- ware libraries. in: arg e, bruaset am, langtangen hp (eds) modern softwar tool scientif computing. birkhaus press, berlin, pp 163202 29. falgout rd, yang um (2002) hypre: librari high perfor- manc preconditioners. in: comput scienceicc 2002. springer, berlin, pp 632641 30. heroux ma, bartlett ra, howl ve, hoekstra rj, hu jj, kolda tg, lehoucq rb, long kr, pawlowski rp, phipp et, saling ag, thornquist hk, tuminaro rs, willenbr jm, william a, stanlei ks (2005) overview trilino project. acm tran math softw 31(3):397423 31. trilino project. 32. toselli (2006) dual-prim feti algorithm edg finite- element approxim 3d. ima j numer anal 26(1):96130 33. dohrmann cr (2007) approxim bddc preconditioner. numer linear algebra appl 14(2):149168 34. badia s, martn af, princip j (2015) scalabl inexact balanc domain decomposit constraint overlap coarse/fin corrections. parallel comput 50:124 35. efendiev y, hou ty (2009) multiscal finit element methods: theori applications. springer, new york 36. klawonn a, lanser m, rheinbach o (2015) extrem scalabl nonlinear domain decomposit method ellipt fempar: object-ori parallel finit element framework 123 partial differenti equations. siam j sci comput 37(6):c667 c696 37. badia s, martn a, princip j (2016) multilevel balanc domain decomposit extrem scales. siam j sci comput, pp c22c52 38. zampini s (2016) pcbddc: class robust dual-prim method petsc. siam j sci comput 38(5):s282s306 39. badia s, olm m (2017) spacetim balanc domain decom- position. siam j sci comput 39(2):c194c213 40. brune p, kneplei m, smith b, tu x (2015) compos scalabl nonlinear algebra solvers. siam rev 57(4):535565 41. falgout r, friedhoff s, kolev t, maclachlan s, schroder j (2014) parallel time integr multigrid. siam j sci comput 36(6):c635c661 42. fempar: finit element multiphys parallel solvers. gitlab.com/fempar/fempar 43. elman hc, silvest dj, wathen aj (2005) finit element fast iter solvers: applic incompress fluid dynamics. oxford univers press, oxford 44. badia s, martn af, plana r (2014) block recurs lu pre- condition thermal coupl incompress induc- tionless mhd problem. j comput phy 274:562591 45. cyr e, shadid j, tuminaro r (2016) teko: block precondi- tion capabl concret exampl applic navier stoke mhd. siam j sci comput 38(5):s307s331 46. colom o, badia s, codina r, princip j (2015) assess variat multiscal model larg eddi simul turbul incompress flows. comput method appl mech eng 285:3263 47. colom o, badia s (2016) segreg rungekutta method incompress navierstok equations. int j numer method eng 105(5):372400 48. colom o, badia s, princip j (2016) mix finit element method convect stabil larg eddi simu- lation incompress turbul flows. comput method appl mech eng 304:294318 49. colom o, badia s (2017) segreg rungekutta time integr convection-stabil mix finit element scheme wall-unresolv le incompress flows. comput method appl mech eng 313:189215 50. badia s, codina r, plana r (2013a) uncondition converg stabil finit element approxim resist magnetohydrodynamics. j comput phy 234:399416 51. badia s, plana r, gutierrez-santacreu jv (2013b) uncondi- tional stabl oper split algorithm incom- pressibl magnetohydrodynam discret stabil finit element formul base projections. int j numer method eng 93(3):302328 52. plana r, badia s, codina r (2011) approxim inductionless mhd problem stabil finit element method. j comput phy 230(8):29772996 53. smolentsev s, badia s, bhattacharyai r, buhler l, chen l, huang q, jin hg, krasnov d, lee dw, le vall em, mistrangelo c, munip r, ni m-j, pashkevich d, patel a, pulugundla g, satyamurthi p, snegirev a, sviridov v, swain p, zhou t, zikanov o (2015) approach verif valid mhd code fusion applications. fusion eng de 100:6572 54. badia s, codina r, plana r (2015) analysi uncondi- tional converg stabil finit element formul incompress magnetohydrodynamics. arch comput method eng 22(4):621636 55. badia s, hierro (2015) discret maximum principl discontinu galerkin methods. comput method appl mech eng 286:107122 56. badia s, hierro (2014) monotonicity-preserv stabil finit element approxim transport problems. siam j sci comput 36(6):a2673a2697 57. hierro a, badia s, ku p (2016) shock captur techniqu adapt finit elements. comput method appl mech eng 309:532553 58. badia s, bonilla j (2017) monotonicity-preserv finit ele- ment scheme base differenti nonlinear stabilization. comput method appl mech eng 313:133158 59. badia s, bonilla j, hierro (2017) differenti monotonicity- preserv scheme discontinu galerkin method arbi- trari meshes. comput method appl mech eng 320:582605 60. badia s, verdugo f (2017) robust scalabl domain decomposit solver unfit finit element methods. arxiv:1703.06323 [math] 61. chiumenti m, neiva e, salsi e, cervera m, badia s, davi c, chen z, lee c (2017) numer model experiment valid select laser melt (submitted) 62. badia s, martn af, princip j (2013) implement scalabl analysi balanc domain decomposit meth- ods. arch comput method eng 20(3):239262 63. badia s, martn af, prncipe j (2013) enhanc balanc neumannneumann precondit comput fluid solid mechanics. int j numer meth eng 96(4):203230 64. badia s, nguyen h (2016) balanc domain decomposit constraint perturbation. siam j numer anal 54(6):34363464 65. badia s, martn af, nguyen h (2016) physics-bas balanc domain decomposit constraint heterogen prob- lems. work paper preprint 66. badia s, martn a, princip j (2014) highli scalabl parallel implement balanc domain decomposit con- straints. siam j sci comput 36(2):c190c218 67. adam jc, brainerd ws, hendrickson ra, main re, martin jt, smith bt (2009) fortran 2003 handbook. springer, london, 68. rouson d, xia j, xu x (2011) scientif softwar design: object-ori way, 1st edn. cambridg univers press, new york 69. ern a, guermond j-l (2004) theori practic finit elements. springer, berlin 70. brenner sc, scott r (2010) mathemat theori finit element methods. springer, softcov reprint hardcov 3rd ed. 2008 edn 71. quarteroni (2014) numer model differenti prob- lems. springer milan, milano 72. monk p (2003) finit element method maxwel equa- tions. clarendon press, oxford 73. duffi m (1982) quadratur pyramid cube inte- grand singular vertex. siam j numer anal 19(6):12601262 74. dunav da (1985) high degre effici symmetr gaus- sian quadratur rule triangle. int j numer meth eng 21(6):11291148 75. olm m, badia s, martn af (2017) simul high tem- peratur superconductor experiment validation. arxiv: 1707.09783 [physics] 76. badia s, quaini a, quarteroni (2008a) modular vs. non- modular precondition fluid-structur system larg added-mass effect. comput method appl mech eng 197(4950):42164232 77. badia s, nobil f, vergara c (2008b) fluid-structur partit procedur base robin transmiss conditions. j comput phy 227(14):70277051 s. badia et al. 123 78. badia s, quaini a, quarteroni (2008c) split method base algebra factor fluidstructur interaction. siam j sci comput 30(4):1778 79. badia s, nobil f, vergara c (2009) robinrobin precondi- tion krylov method fluid-structur interact problems. comput method appl mech eng 198(3336):27682784 80. rogn m, kirbi r, logg (2009) effici assembl h(div) h(curl) conform finit elements. siam j sci comput 31(6):41304151 81. agelek r, anderson m, bangerth w, barth w (2017) ori- ent edg unstructur two- three-dimension meshes. acm tran math softw (to appear) 82. bangerth w, kayser-herold o (2009) data structur requir hp finit element software. acm tran math softw 36(1):131 83. badia s, baig j (2013) adapt finit element simul incompress flow hybrid continuousdiscontinu galerkin formulations. siam j sci comput 35(1):a491a516 84. dryja m, galvi j, sarki m (2007) bddc method dis- continu galerkin discret ellipt problems. j com- plex 23(46):715739 85. freeman e, robson e, sierra k, bate b (eds) (2004) head design patterns. oreilly, sebastopol 86. fplfortran paramet list. 87. beall mw, shephard ms (1997) gener topology-bas mesh data structure. int j numer meth eng 40(9):15731596 88. gamma e, helm r, johnson r, vlissid j (1995) design pat- terns: element reusabl object-ori software. addison- wesley, boston 89. bangerth w, burstedd c, heister t, kronbichl m (2012) algorithm data structur massiv parallel gener adapt finit element codes. acm tran math softw 38(2):14:114:28 90. burstedd c, wilcox lc, ghatta o (2011) p4est : scalabl algorithm parallel adapt mesh refin forest octrees. siam j sci comput 33(3):11031133 91. gidth person pre post processor. com 92. filippon s, buttari (2012) object-ori techniqu spars matrix comput fortran 2003. acm tran math softw 38(4):23:123:20 93. saad y (2003) iter method spars linear systems, 2nd edn. societi industri appli mathemat 94. flapfortran command line argument parser poor people. 95. child h, brugger e, whitlock b, meredith j, ahern s, pugmir d, biaga k, miller m, harrison c, weber gh, krishnan h, fogal t, sanderson a, garth c, bethel ew, camp d, rubel o, durant m, favr jm, navratil p (2012) visit: end-us tool visual analyz larg data. in: high perfor- manc visualization-en extreme-scal scientif insight, pp 357372 96. ayachit u (2015) paraview guide: parallel visual application. kitwar inc, clifton park 97. schroeder w, martin km, lorensen (1998) visualiza- tion toolkit: object-ori approach 3d graphics, 2nd edn. prentice-hall, inc., upper saddl river 98. lib_vtk_iopur fortran (2003?) librari write read data conform vtk standard. lib_vtk_io 99. xdmfextens data model format. org/index.php/main_pag 100. hdf group. hierarch data format version 5. www.hdfgroup.org/hdf5, 20002017 101. xh5forxdmf parallel partit mesh input/output hdf5. 102. brommel d, wyli bjn, fring w (2015) juqueen extrem scale workshop 2015. technic report fzj-2015-01645, julich supercomput center 103. dohrmann cr (2003) precondition substructur base constrain energi minimization. siam j sci comput 25(1):246258 fempar: object-ori parallel finit element framework 123 fempar: object-ori parallel finit element framework abstract introduct fempar project fe framework boundari valu problem weak form space discret fe fe concept refer physic space construct polynomi space construct shape function basi global fe space conform numer integr grad-conform fes: lagrangian (nodal) element div-conform fe curl-conform fe cartesian product fe multi-field problem non-conform method facet integr polytop node gener index global dof number conform implement polytope_t relat data type polynomial_t abstract reference_fe_t abstract refer cell topolog refer fe space set local dof creat reference_fe_t polymorph instanc enumer reference_fe_t subclass descript physic domain: triangulation_t abstract abstract triangul represent softwar implement exampl triangulation_t subclass rational evalu cell integr numer quadratur evalu refer cell shape function geometr map evalu shape function physic space cell integr user code exampl evalu facet integr numer quadratur geometr map facet map neighbour cell map evalu shape function physic space facet integr user code exampl change-of-basi implement reference_fe_t subclass integr global dof handling: fe_space_t abstract intern organ fe_space_t conceptu view fe_space_t global dof number gener strong imposit boundari condit global fe function restrict triangul cells/facet build fe affin oper linear algebra data structur associ assembl discret integr fe oper fe affin oper abstract driver exampl stoke problem conclus acknowledg refer