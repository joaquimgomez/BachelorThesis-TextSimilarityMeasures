refficientlib : effici load-rebalanc adapt mesh refin algorithm high-perform comput physic mesh | siam journal scientif comput | vol .
39 , .
2 | societi industri appli mathemat copyright  siam .
unauthor reproduct articl prohibit .
siam j. sci .
comput .
c 2017 societi industri appli mathemat vol .
39 , .
2 , pp .
c65c95 refficientlib : effici load-rebalanc adapt mesh refin algorithm high-perform comput physic mesh joan baig camilo bayona abstract .
paper present novel algorithm adapt mesh refin compu- tation physic mesh distribut memori parallel set .
propos method develop nodal base parallel domain partit node mesh belong singl processor , wherea element belong multipl processor .
main featur algorithm present paper capabl handl multipl type element two three dimens ( triangular , quadrilater , tetrahedr , hexahedr ) , small amount memori requir per processor , parallel scalabl thousand processor .
present algorithm also capabl deal nonbalanc hierarch refin , multirefin level jump possibl neighbor element .
algorithm deal load rebalanc also present , allow us move hierarch data structur processor load unbalanc kept accept level time simul .
particular featur propos algorithm arbitrari renumb algorithm use load rebalanc step , includ graph partit space-fil renumb algorithm .
present algorithm pack fortran 2003 object orient librari refficientlib , whose in- terfac call allow use comput physic code summar .
final , numer experi illustr perform scalabl algorithm present .
key word .
adapt mesh refin , adapt , finit element , finit volum , finit differ- enc , high-perform comput , parallel , load rebalanc am subject classif .
68u01 , 68u20 doi .
10.1137/15m105330x 1 .
introduct .
discret partial differenti equat use solv mani type practic problem engin physic .
prob- lem , solut lead wide rang spatial scale spread compu- tation domain .
case , numer solut obtain coars mesh often inaccur , perform comput use fine mesh impracti- cal consid requir comput effort .
adapt mesh refin ( amr ) method deal issu produc effici mesh capabl resolv- ing wide rang scale .
method local adjust mesh improv solut minim comput effort .
develop parallel amr method justifi order solv problem contain larg number unknown typic requir use huge amount comput resourc .
parallel refin method allow us exploit calcul capabl provid rapid evolv parallel com- puter cluster .
howev , parallel refin method lead distribut mesh submit journal  softwar high-perform comput section decemb 17 , 2015 ; accept public ( revis form ) novemb 17 , 2016 ; publish electron march 30 , 2017. http : //www.siam.org/journals/sisc/39-2/m105330.html fund : work partial support spanish govern elastic-flow project dpi2015-67857-r .
first author  work support spanish govern ramon cajal grant ryc-2015-17367 .
second author support doctor scholarship re- ceiv colombian government-colciencia .
centr internacion de metod numer l  enginyeria ( cimn ) , edifici c1 , campus nord upc c/ gran capita s/n , 08034 barcelona , spain , universitat politecnica de catalunya , jordi girona 1-3 , edifici c1 , 08034 barcelona , spain ( jbaig @ cimne.upc.edu , cbayona @ cimne.upc.edu ) .
c65 ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp http : //www.siam.org/journals/sisc/39-2/m105330.html mailto : jbaig @ cimne.upc.edu mailto : cbayona @ cimne.upc.edu copyright  siam .
unauthor reproduct articl prohibit .
c66 joan baig camilo bayona structur , complex frequent data access necessari , memori consumpt high .
addit , dynam evolut inform amr constitut anoth major challeng : requir grow number collect communic oper , therefor easili scalabl massiv parallel comput .
includ possibl redistribut workload processor order maxim util comput resourc signific increas communic demand .
henc , effici algorithm data structur be- come backbon parallel amr method , distribut collect structur dynam modifi without requir sever global communic prefer design .
first approach parallel amr method block-structur method .
method refin parallel mesh use singl sequenti map , therefor suitabl complex geometri nonstructur mesh .
tree-bas meth- od altern regular impos block-structur method .
tree data structur , name quadtre octre , hierarch data structur construct axis-align line plane .
data structur use search procedur hierarch structur reduc complex search .
first applic tree data structur algorithm parallel domain decomposit effici partit mesh ( see , exampl , camp- bell et al .
[ 7 ] ) .
later , data structur , balanc algorithm , adapt refin algorithm distribut octre mesh develop [ 19 , 20 ] .
etre li- brari [ 22 ] collect algorithm address oper octree-bas mesh database-ori framework .
code demonstr good scalabl par- allel effici .
furthermor , octre develop implement octor parallel mesh tool [ 21 ] , could generat static unstructur mesh processor also perform dynam refin execut time .
scalabl test address 62,000 processor use hexahedra give overal good perform .
multigrid solver exploit balanc mesh algorithm octree-bas mesh implement dendro softwar [ 17 ] .
code scale thousand processor .
applic multipl implemen- tation base octre data structur develop [ 16 , 15 ] possess good adapt perform .
instead quadrilater cube-shap domain describ tree data structur , wider varieti geometri describ forest-of-octre base mesh .
approach first introduc amr method deal.ii softwar [ 3 ] , code replic global mesh processor , henc limit scalabl processor .
fulli distribut algorithm han- dling forest-of-octre mesh follow step .
burstedd et al .
[ 5 ] work dynam amr base distribut forest-of-octre geometri .
first work support high-ord discret non-cartesian geometri , led encapsul algorithm p4est librari [ 6 ] .
good , strong , weak scale result 224,000 core obtain p4est work paral- lel adapt refin librari mesh compos quadrilater hexahedr element [ 3 ] .
later , isaac , burstedd , ghatta [ 11 ] focus balanc struc- ture propos subtre balanc algorithm .
weak scale time improv requir less memori previous balanc algorithm p4est .
paper describ general adapt finit element framework un- structur mesh demonstr suitabl perform larg scale parallel comput .
algorithm current focus h-refin ; extens algorithm hp-refin matter futur work .
contrari paral- ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c67 lel refin algorithm , method present develop nodal base parallel domain partit ; , node mesh belong singl proces- sor , wherea element belong multipl processor node belong differ subdomain .
remot node set overlap element call  ghost  point .
pose challeng parallel communic , sinc neighbor parallel domain need kept updat .
henc , local element , point , edg , face , connect store data structur eas- ili access modifi .
refin oper load balanc procedur handl structur .
best knowledg , libmesh [ 14 ] similar approxim .
how- ever , complet unstructur method work cost store explicit connect mesh , parallel partit scheme libmesh store mesh inform processor , associ overhead limit scalabl 100 processor .
jansson , hoffman , jansson [ 12 ] also im- plement general adapt finit element framework unstructur tetrahedr mesh without hang node , suitabl larg scale parallel computa- tion .
author present strong scale result linear 1,000 processor incompress flow solver .
contrast , main contribut propos refin framework follow : 1 .
hierarch adapt refin algorithm nodal base partit distribut memori machin present .
algorithm allow us suc- cessiv refin unrefin comput mesh order adapt requir simul .
2 .
distribut structur handl two- three-dimension unstructur mesh compos triangular , quadrilater , tetrahedr , hexahedr element .
approach capabl describ complex geometri perform nonuniform refin .
3 .
propos distribut scheme processor store local inform partit distribut mesh .
reduc memori consumpt allow scale thousand processor .
4 .
parallel refin procedur base hierarch data structur refin element mesh use effici search neighbor element interprocessor level .
data structur contain parent children pointer use , new refin level success ad subtract comput mesh .
5 .
result mesh nonconform hang node side two level refin meet .
contrari adapt refin method , algorithm propos enforc balanc restrict re- finement level adjac element : jump refin level neighbor element arbitrarili larg .
6 .
parallel refin process , propos algorithm deal element node identif across processor use global element global point identifi structur .
ensur global number structur general nodal element inform transfer neighbor processor effici manner .
7 .
balanc processor  load , use dynam parallel repartit framework chang ownership mesh node load unbal- anc reach certain threshold , transfer associ element correspond processor .
contrari algorithm load rebal- anc hierarch amr , algorithm propos independ ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
c68 joan baig camilo bayona renumb strategi load rebalanc process .
particular , graph partit scheme space-fil method load rebalanc use propos algorithm .
propos algorithm pack adapt refin librari call refficientlib .
call librari made simpl possibl easili coupl exist finit element , volum , differ code .
sever numer test carri order assess perform propos method .
first group test correspond simul driven experi illustr capabl method generat comput mesh differ physic problem .
poisson heat transfer problem solv bidimension three-dimension element .
incompress flow past cylind also test order appli amr incompress navierstok equat .
second group experi , weak scalabl test uniform refin load balanc case high-perform comput environ present .
paper organ follow .
section 2 distribut refin structur mesh partit strategi , distribut data structur , initializa- tion refin procedur , describ .
section 3 refin step describ .
classif , local refin , hang node , export ex- ternal flat mesh algorithm present .
load rebalanc global renumb procedur includ section 4 .
extern call user interfac refficientlib librari extern comput physic solver present section 5 .
numer experi scalabl test present section 6 .
final , section 7 conclus state .
2 .
distribut refin structur .
section describ dis- tribut structur amr method .
domain partit strategi explain first , parallel develop .
introduc main data structur initi step parallel amr method .
2.1 .
mesh partit .
algorithm describ paper design work distribut memori parallel machin .
idea librari take care step necessari refin , extern driver ( instanc , finit element solver ) see result mesh nonhierarch flat grid .
domain partit strategi mesh nodal base , mean node assign uniqu processor , element belong multipl processor node one subdomain .
concept point node refer node mesh , although node general use deal point element , point use treat independ entiti .
point belong given subdomain denot local point .
refin , node assign singl processor , first layer node belong neighbor processor also store current processor .
neighbor point call ghost point .
element belong multipl processor node multipl subdomain .
defin processor respons element processor own node element lowest global node number .
figur 1 show initi domain partit mesh seen differ pro- cessor .
advantag strategi processor store local inform subdomain .
processor store local numer sub- domain point , global number point must also save order locat communic point processor .
parallel refin method construct partit mesh .
sinc mesh need seen flat mesh extern driver , node element ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c69 fig .
1 .
initi mesh inform .
left : global mesh .
point element ( circl ) number global .
right : mesh , partit two subdomain .
color denot processor inform belong .
point element ( circl ) number local domain .
note element number ( 2 ) , ( 3 ) , ( 6 ) , ( 10 ) global mesh share two subdomain .
distribut structur use calcul remot neighbor contribut share element .
( see onlin version color . )
fig .
2 .
intern hierarch mesh seen one processor .
order illustr refin exampl , share element mesh figur 1 refin .
left : initi level 0 mesh .
right : refin level 1 mesh .
renumb strategi need order abl move extern , flat mesh intern ( refin ) hierarch mesh vice versa .
figur 2 present exampl hierarch refin mesh .
two level refin display seen intern refin one processor .
mesh depict figur 3 seen extern driver .
note element mark asterisk (  ) figur 2 appear flat mesh consid processor : extern flat mesh , first layer flat node neighbor consid , intern hierarch mesh , also element hierarch neighbor consid .
element hierarch neighbor element share parent element belong processor .
element mark asterisk (  ) figur 2 hierarch neighbor , although none node assign processor , element share parent rest level 1 element processor .
call element share parent sibl element .
2.2 .
distribut data structur .
algorithm describ section 3 implement use collect data structur allow us effici ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
c70 joan baig camilo bayona fig .
3 .
refin mesh seen extern driver .
left : extern flat mesh .
right : extern flat mesh seen processor denot blue color .
( see onlin version color . )
access modifi inform defin mesh .
implement general done object-ori manner , effici actual storag memori sometim use flatten storag , part object store array list .
denot storag structur csr , refer compact spars row storag use mani comput physic applic .
data structur encapsul class , call refin .
refin procedur communic perform class .
data structur part refin class briefli explain follow :  gnpoin total number point intern mesh .
 gnelem total number element intern mesh .
 npoin number point intern mesh local proces- sor .
includ local ( belong current processor ) point ( npoinloc ) first layer hierarch neighbor local point ( npoinghost ) .
 npoinloc number point intern global mesh belong current processor .
 npoinghost number point intern global mesh first layer hierarch neighbor local node .
data requir current processor .
 nelem number element intern mesh requir current processor .
includ element local node also element local node relev hierarch refin process .
 elementlist list element local number , size nelem .
local element need store contain  elementtyp .
item identifi element type ( triangl , quadri- later , tetrahedra , hexahedra ) subtyp variat accord subdivis process .
subtyp relev , instanc , case tetrahedr element , multipl possibl hierarch subdivid element .
store array 1 byte integ dimens 2 .
ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c71  data structur type globalelementidentifi .
similar strategi follow [ 3 ] , global element identifi allow us uniqu identifi element mesh ( describ subsect 2.3 ) .
 parentidentifi .
local element number parent element .
 childrenidentifierlist .
list local element number children element .
( store csr format . )
 nodelist .
contain node part element lo- cal number .
store array 4 byte integ dimens 2 .
( store csr format . )
 facelist .
face element , store neighbor ( opposit ) element correspond face ( edg two dimens ) neighbor .
hang face , contain neighbor parent element correspond face .
( store csr format . )
 pointlist list node local number , size npoin .
first npoinloc compon list correspond local point , last npoinghost compon list correspond ghost point .
point , store follow :  globalpointnumb .
data structur store global ( par- allel ) point number point .
inverseglobalpointnumber- inglist also creat allow us get local point number global point given processor .
order implement invers global point number list , hash tabl type structur use ( describ subsect 2.4 ) .
 processornumb .
ghost point , store processor number point belong .
 level .
level ( refin structur ) point .
initi point classifi level 0 .
 edgerefinementlist .
point , store list neighbor point j point connect refin node k j exist ; also store local number j k. ( store csr format . )
 hangingnodelist .
hang node , contain list recurs parent node linear combin coeffici .
( store csr format . )
list involv multipl type data ( i.e. , elementlist pointlist ) implement separ list array conveni memori perform , although could also store object contain data structur .
size compon list constant element , separ list array general store csr format .
2.3 .
globalelementidentifi data structur .
hierarch refine- ment element inform encapsul tree data structur compos globalelementidentifi object .
data structur allow us uniqu iden- tifi element processor , level refin .
use togeth parentidentifi childrenidentifierlist , allow us communi- cate element inform processor .
inform use identifi local number element interprocessor inform communic requir .
globalelementidentifi structur compos follow inform : ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
c72 joan baig camilo bayona  globaltoplevelel .
origin element number top level element prior refin load rebalanc process .
store 4 byte integ .
 level .
level element refin structur .
initi element classifi level 0 .
store 1 byte integ .
 positioninparentel .
level , three bit dedic store refin branch ( child ) element .
allow us identifi maximum eight children per level .
maximum 21 refin level allow current implement , total 63 bit .
store 8 byte integ .
total amount memori requir store globalelementidentifi element 13 byte , round 16 byte memori .
2.4 .
inverseglobalpointnumberinglist .
order perform parallel communic , need abl recov local point number global point identifi time refin process .
could done straight- forward manner alloc array dimens gnpoin store local point , global posit array , local number associ cor- respond global point .
howev , gnpoin depend size global problem general larg .
would result alloc array becom time consum , use thousand processor , affect perform scalabl parallel refin algorithm .
thus , altern implement global local map requir .
implement , opt implement use hash filter follow binari search collis found .
 first , hash function defin modulus divis primer number primenumb , close larger local number point npoinloc .
hash tabl data structur dimens primenum- ber alloc .
 second , local pointglob point pair , hash function global point identifi comput point store correspond hash tabl data structur slot .
collis , point store ascend order accord global point identifi .
 final , order recov local number global point , hash function global point number comput .
singl point store correspond hash tabl slot , local number recov direct .
case collis , binari search perform sort global point number array hash tabl slot order find correspond local point number .
process allow us reduc averag comput cost find local point number associ global point ( 1 ) , keep storag require- ment ( npoinloc ) .
although possibl effici implement could found differenti behavior algorithm local ghost point , chosen describ implement compromis effici reusabl .
2.5 .
initi .
parallel refin method establish input ini- tial mesh zero level mesh coarsen .
initi step , flat , top level mesh pass refin .
mesh , elementlist pointlist built .
element point assign zero level .
processor number point global element number element ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c73 point need pass refin , globalelementidentifi element globalpointnumb ( invers ) point built .
initi facelist element built loop neigh- bor element check face coincid node .
neighbor element identifi two step process element least one point share .
remain array , refer refin structur , start empti null , sinc refin step perform yet .
3 .
refin step .
3.1 .
amend element refin classif .
first stage refin step consist pass librari array size nelem contain inform element refin .
implement achiev pass 1 valu integ element need refin , 1 valu integ element need unrefin , 0 valu integ element need either refin unrefin .
element unrefin sibl element also unrefin .
element mark unrefin one sibl , element reclassifi unrefin .
import point refin criteria must pro- cessor ; , element belong processor j , decis whether refin element must coincid processor processor j .
even take account , unrefin case inform avail certain processor enough decid whether element ef- fectiv unrefin .
, instanc , situat unrefin step level 1 element figur 2 3 .
suppos extern driver mark four level 1 element export extern mesh ( figur 3 ) unrefin .
howev , blue processor ( figur 3 , right ) inform classif hierarch neighbor ( mark asterisk (  ) figur 2 ) .
consequ , case local element sibl mark unrefin , communic step neighbor processor requir order classifi hierarch neighbor element .
communic step consist ask processor respons el- ement communic refin classif .
element differ processor identifi globalelementidentifi .
step requir refin , sibl element refin independ .
explain previous , propos algorithm deal unbalanc mesh sens refin level jump neighbor element arbitrar- ili larg .
howev , might conveni applic .
, option flag limit level jump neighbor element ad algorithm .
flag enabl , algorithm add follow previous reclassif element refin : node , note maximum minimum level element belong .
, differ maximum minimum level 1 ( algorithm allow differ larger 1 ) , allow maximum level element refin , allow minimum level element unrefin .
ensur balanc mesh obtain case flag enabl .
3.2 .
local refin .
element proper classifi follow refin criteria , local refin step start processor .
implement subdivis process triangl , quadrilater , tetrahedron , hexahedron re- ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
c74 joan baig camilo bayona fig .
4 .
subdivis tetrahedron four tetrahedron one octahedron .
octahedron subdivid four tetrahedron .
fine given element 2d subel type , number dimens , although implement left open refin element type futur .
first loop element allow us comput di- mension array refin stage , alloc .
element unrefin remov list , new element ad end elementlist .
time , parentidentifi chil- drenidentifierlist element fill .
also globalelementidentifi new element comput globalelementidentifi parent element ( ad one level parent level , assign child number new level ) .
also element type comput ( h-refin , element type chil- dren element parent element type ) .
case tetrahedron , call element subtyp also need store : refin tetrahedron subdivid eight subel .
howev , three differ way subdivid tetra- hedron eight subel , way correspond main plane subdivis intern octahedron obtain join midpoint tetrahedron edg .
elect subel type done distort result children element minim .
illustr figur 4 .
updat facelist element , neighbor element check .
previous refin step face connect element unrefin current refin step , element connect parent element .
contrari , element connect higher level element refin , element becom connect correspond- ing children .
face connect done effici manner thank parent-identifi childrenidentifierlist structur , allow us move differ refin level .
exampl face match element differ level shown figur 5 .
face connect face element higher level denot hang face .
point , element refin structur updat new refin stage .
howev , new node still need ad new element .
three type node new element : node ad edg ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c75 fig .
5 .
face match refin process .
mesh start refin process ( top ) , element b face connect element , one level higher .
similar , element face connect one face element c. refin step , element c b refin ( bottom ) .
children b face connect face element , face element connect element c connect face children element c. parent element , node ad face parent element , node ad interior parent element .
best illustr three-dimension hexahedr element , shown figur 6 .
node ad interior parent element , sure node new , new point number assign node .
howev , node ad face edg parent element , need check node alreadi exist anoth element .
case node ad face element , node pre-exist face new child element connect element level .
case new node new child element assign point number node neighbor face .
node ad edg element , make use edgerefine- mentlist structur , edg connect two point mesh store point number refin point ad .
keep track alreadi exist refin point edg , allow us add new point element refin , contrari , match exist point refin point edg .
addit new node edgerefine- mentlist need done two step process ( first loop count size alloc , second loop fill data structur ) make use link list order obtain proper perform algorithm .
3.3 .
parallel number .
algorithm step previous subsect allow us advanc new refin mesh .
howev , communic done processor , stage new point assign local ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
c76 joan baig camilo bayona fig .
6 .
edg ( red ) , face ( blue ) , interior ( green ) new node refin element .
( see onlin version color . )
number , parallel number point still pend .
element , hand , alreadi identifi globalelementidentifi .
order construct new global point number , start classifi point local ghost processor .
point alreadi exist previous refin stage keep local/ghost status .
new point classifi local ghost follow differ criteria depend whether new interior point , new face point , new edg point .
new interior point classifi local given processor , previous refin step , processor owner node parent element lowest global number ( processor respons processor element ) .
new face point classifi local given processor , previous refin step , processor owner node parent face lowest global number ( processor respons processor face ) .
new edg point classifi local given processor , previous refin step , processor owner node parent edg lowest global number ( processor respons processor edg ) .
point processor classifi local ghost , gather oper number local point processor , follow scatter opera- tion first global point number processor , allow us set parallel global number local point processor ( sinc global number- ing local point processor consecut ) .
howev , parallel number ghost point processor still unknown processor .
point alreadi ghost previous refin step , processor simpli ask owner point communic new global number .
ask point , point identifi global number previous refin step .
new ghost point , global number obtain follow :  new interior face point , globalelementidentifi parent element sent respons processor togeth interior/fac node number , turn return global point number interior point .
 new edg point , old ( previous refin step ) global number edg parent point sent processor respons edg , turn seek refin edg point edgerefinementlist return new point global number new edg point .
stage , intern refin structur alreadi defin updat ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c77 new refin stage .
step export inform extern mesh detail follow subsect .
3.4 .
hang node .
although refin algorithm use tree data structur conform restrict adjac element must satisfi , case algorithm .
so-cal balanc condit , enforc fact one hang node side two level refin meet , need satisfi algorithm present paper , arbitrari jump refin level adjac element possibl .
believ one main featur present algorithm .
hang node classifi node belong face edg connect element higher level ( hang face edg ) belong higher level element .
sever possibl treat hang node comput physic : one possibl approxim hang node consist fix valu unknown hang node mean valu unknown hang parent ( approach follow numer exampl ) .
possibl includ use discontinu galerkin method [ 8 ] hybrid continuous-discontinu galerkin method [ 2 ] .
case , necessari know hang parent certain hang node .
hang parent defin node parent element case interior refin node , node parent face case face refin node , node parent edg case edg refin node .
hang parent turn hang node , establish recurs depend valu unknown hang node valu unknown higher level node .
implement , list hang node relat respect hang parent obtain loop element check node match face edg connect higher level element .
node present side face , element concur edg , consid hang node .
hang node list built , recurs depend structur re- spect hang parent obtain travers hang node list top level low level hang node annot contribut hang parent averag valu hang node .
number parent contribut averag valu hang node arbitrarili larg balanc condit appli , recurs depend structur store csr format .
parent node hang node also hang node , contribut valu hang node transfer recurs hang parent .
illustr figur 7 .
note also success refin step , normal node becom hang node depend refin behavior neighbor element vice versa .
3.5 .
export extern mesh .
explain previous , hierarch mesh algorithm work intern coincid flat mesh export use extern driver .
main criteria choos element node pass extern mesh follow :  element export last level element least local node .
 node export belong export element .
two criteria general suffici decid element need export .
howev , specif case ( load rebalanc occur children element necessarili processor parent ele- ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
c78 joan baig camilo bayona fig .
7 .
hang node .
node 4 hang node , hang parent node 2 3 .
node 3 turn hang node , hang parent node 1 2 .
hang node valu unknown node 4 u4 = 1 2 u3 + 1 2 u2 = 1 4 u1 + 3 4 u2 .
ment ) addit element need export .
first case hang node whose hang parent node assign differ processor , il- lustrat figur 8 .
case , element own recurs hang parent need also export order ensur assembl parent node perform ensur high level element refin , involv processor awar refin step .
second case element hang opposit element node assign current processor .
even none node element belong current processor , element need export refin criteria known current processor new element face match creat .
, exampl particular case seen figur 8 .
case , inform element belong neighbor processor present current processor communic processor .
case element b figur 8 .
4 .
load rebalanc .
sever refin step , comput load processor may becom unbalanc , caus load processor damag global effici .
order avoid issu , load rebalanc requir .
load rebalanc consist chang processor own group node way comput load approxim equal processor .
time , ensur communic requir load rebalanc process extern comput perform driver minim .
4.1 .
rebal renumb .
first step load rebalanc process consist comput new processor new global number node mesh .
contrari adapt refin scheme new node number- ing link adapt refin algorithm , algorithm present paper node renumb strategi possibl .
fact , new node number comput extern driver pass refin librari .
numer exampl present section 6 , node renumb comput extern use parmeti [ 13 ] zoltan [ 4 ] special softwar , base nest bisect , graph partit , space-fil method .
pack- age access interfac provid petsc librari [ 1 ] , also use linear system solver numer exampl section 6 .
ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c79 fig .
8 .
left : global export mesh .
center : local export mesh processor 0 ( blue node ) .
right : local export mesh processor 1 ( red node ) .
element would principl export processor 0 , sinc local node processor , export hang opposit element belong processor 0 .
element b would principl export processor 1 , sinc local node processor , export hang opposit element belong processor 1 .
( see onlin version color . )
remap method produc new partit alreadi partit mesh .
node mesh alreadi assign processor number belong , remain decid element node need sent processor .
algorithm rule step similar rule export element node subsect 3.5 , although take account hierarch natur intern mesh follow :  element need sent processor own node belong processor .
 element need sent processor one children sibl element sent processor .
 node need sent processor belong least one element sent processor .
, addit rule appli case element hang node : element high level hang ( edg face ) opposit element need sent given processor also sent processor .
situat similar one depict figur 8 .
4.2 .
rebuild refin structur .
final step refin readi continu follow step amr strategi con- sist rebuild requir data structur .
facelist structur parentidentifi childrenidentifierlist array rebuilt two step process inform nodelist travers element level use globalelementidentifi element .
done , rebuild- ing hangingnodelist edgerefinementlist also straightforward , although care need taken result implement effici .
5 .
extern call refficientlib librari .
section present interfac call refficientlib object-ori librari .
implemen- ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
c80 joan baig camilo bayona tation allow refin algorithm use distribut memori compu- tation physic code .
librari develop follow object-ori fortran 2003 standard .
follow illustr typic call adapt refin librari .
first step consist initi refin object .
done pass inidata object initi mesh inform retriev ( element , node , connect ) .
inidata object defin abstract librari need implement extend user : !
myinidata b j e c n l mesh informat ion !
e x r c e ca l l ref ine r % n l z e ( inidata ) requir call object follow : !
general dimens !
number f p n processor ca l l inidata % getnpoin ( npoin ) !
number f l c l p n processor ca l l inidata % getnpoinloc ( npoinloc ) !
number f e lement processor ca l l inidata % getnelem ( nelem ) !
globa l number f point ca l l inidata % getglobalnpoin ( gnpoin ) !
get element c n n e c v l ca l l inidata % getconnect iv iti ( ie lem , nnode , c n n e c v ) !
get l c l g b l map f r e f nnode node !
output globalnumb ca l l inidata % getlocal2glob ( nnode , localnumb , globalnumb ) !
get processor e f nnode node ass gned !
output processorl ca l l inidata % getprocessornumb ( nnode , localnumb , p r c e r l ) also , coordin nodal point mesh pass refin .
use tetrahedr element case order choos subel type caus lesser distort , explain previous : !
coord conta in array f coordin , necessari f r !
sube lement type cho ice e r h e r l e lement ca l l ref ine r % setcoordarray ( coord ) option call set balanc flag ( forc result mesh balanc ) done follow manner : !
opt ional c l l f r e n g ba lanc ing f l g ca l l ref ine r % set 2 1 ba lanc ing ( .
f l e . )
refin initi , array contain refin criteria pass refin , perform requir refin step : f ( r e f n n g ) !
refinermarkel conta in f inement c r e r f r element ca l l ref ine r % ref ine ( ref inermark l ) endif instead refin step , carri load rebalanc step , extern call renumb librari need done , need retriev pointglobnumb pointprocnumb array .
avail , refin call follow form : ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c81 f ( r eba l anc ing ) ! c l l e x e r n l l b r r f r renumb !
necessari ( user e f n e ) ca l l externallibraryrenumb ( pointglobnumb , pointprocnumb ) !
pointglobnumb , pointprocnumb contain new g l b l !
number processor f r p n ca l l ref ine r % setrebalancingnumb ( pointglobnumb , pointprocnumb ) !
communic r e b u l f inement r u c u r e ca l l ref ine r % loadrebal endif refin load rebalanc step done refin , inform retriev use sever call , new extern flat mesh built : !
f inement done , r e r e v e informat ion !
ref iner ! new dimens !
number f l c l point , l c l + ghos point , g l b l p n ca l l ref ine r % getpointdimens ( newnpoinloc , newnpoin , newgnpoin ) !
number f element , z e f c n n e c v array ca l l ref ine r % getelementdimens ( newnelem , newlnodss ) !
af ter l l c n f e x e r n l array , informat ion !
r e r e v e ref iner !
element connec v l csr format ca l l ref ine r % getlnod ( pnod , lnod ) !
local globa l processor l f r new l c l node ca l l ref ine r % getlocalord ( localtoglob , p r c e r l ) ! l f hang node ( phanginglist , lhang ing ) !
wi th averag ing c e f f c e n ( rhanginglist ) !
csr format r e r e v e ref iner ca l l ref ine r % gethanginglistdimens ( hang ing ts ize ) ca l l ref ine r % gethanginglist ( phanginglist , lhanginglist , rhanginglist ) ! l f hang f c e ( phanginglist , lhang ing ) !
csr format r e r e v e ref iner ca l l ref ine r % gethangingfaceslist ( phangingfaceslist , lhang ingfacesli ) hang node list contain , node , list hang parent ( lhanginglist ) correspond averag coeffici ( rhanginglist ) , store csr format .
nodal array defin old mesh , call refin allow us transform ( interpol restrict ) array new mesh : ca l l ref ine r % updatevari ( ndime , coord , newcoord ) summar interact adapt refin librari user point view .
addit option call exist allow us pass valu boundari old mesh boundari new mesh .
conveni , instanc , enforc neumann boundari condit finit element analysi , includ legibl concis .
6 .
numer exampl .
section illustr behavior pro- pose algorithm sever numer exampl .
exampl algorithm test various type linear , bilinear , trilinear element , two three dimens .
6.1 .
bidimension element .
first numer exampl consist squar bidimension domain ( 0 , 1 )  ( 0 , 1 ) mesh use triangular linear element .
refin process arbitrari order show capabl algorithm ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
c82 joan baig camilo bayona deal multilevel jump across hang face , case concentr element top-right corner .
number processor simul 25 , load rebalanc cri- terion follow : max ( npoinloc )  nproc gnpoin  tolrebal .
mesh , poisson heat transfer problem solv use finit element .
heat transfer problem consist find u :   rd ku = f  , u = 0 d , kn  u = h n , k > 0 , f given forc function , h normal heat flux ,  denot comput domain ,  =  = d  n boundari , d  n =  .
exampl forc term uniform valu f = 1 ; d compos upper , lower , left boundari ; n compos right boundari , h = 20 .
figur 9 show behavior method case .
sever refinement/ unrefin step , mesh much heavili refin top-right corner rest comput domain .
note process , step normal node becom hang node vice versa .
load rebalanc act rearrang ownership node way comput load processor approxim .
result processor deal node top-right corner .
algorithm capabl deal multilevel jump hang face provid accur result temperatur field .
6.2 .
multipl type element singl bidimension simul .
numer exampl solv exampl present subsect 6.1 , time use two type element : left half domain use triangular finit element , right half quadrilater finit element use .
exampl illustr capabl algorithm deal simultan sever type finit element .
figur 10 show numer result .
note hang face mesh belong interfac triangular quadrilater element .
6.3 .
tetrahedr hexahedr element .
numer exampl heat transfer problem solv unit cube domain .
boundari condit adiabat wall except lower one , temperatur fix zero .
sourc term f = 1 .
select element refin arbitrari , sever refinement/unrefin step perform arriv final configur .
number processor numer exampl 6 .
figur 11 show behavior method case .
sever refinement/unrefin step , mesh much heavili refin top- right quarter rest comput domain , load rebalanc algorithm act rearrang node processor comput load similar processor .
algorithm capabl deal multilevel jump hang face provid accur , smooth result temperatur field .
ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c83 fig .
9 .
poisson problem exampl triangular mesh .
top-left : origin mesh .
top-right : mesh refin step .
bottom-left : node distribut across processor .
bottom-right : temperatur field end simul .
note jump refin level across hang face arbitrarili larg .
figur 12 show exampl use hexahedr element 25 processor , load rebalanc criteria previous case .
three- dimension case simul done use multipl type element , sinc face element finit element shape function tetrahedr hexahedr element match interfac .
6.4 .
applic incompress navierstok equat .
numer exampl solv incompress navierstok equat , consist find u :  ( 0 , )  rd p :  ( 0 , )  r tu u + u  u +p = f  ,   u = 0  , u = u  > 0 , tu local time deriv veloc field .
  rd bound domain , = 2 , 3 ,  viscos , f given sourc term .
appropri initi condit append problem .
numer solut equat finit element done use stabil formula- tion [ 9 ] allow us deal convect term use equal interpol space veloc pressur .
ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
c84 joan baig camilo bayona fig .
10 .
adapt simul finit element mesh sever type element .
top-left : origin mesh .
top-right : mesh refin step .
bottom-left : node distribut across processor .
bottom-right : temperatur field end simul .
numer exampl deal flow around cylind = 100 .
comput domain consist 16  8 rectangl unit-diamet cylind center ( 4 , 4 ) .
horizont inflow veloc set 1 x = 0 .
slip boundari condit set = 0 = 8 , veloc set 0 cylind surfac .
viscos set  = 0.01 , reynold number = 100 base diamet cylind inflow veloc .
third-ord backward differ scheme use time integr time step size t = 1  103 .
error estim , zienkiewiczzhu error estim [ 23 ] veloc gradient use , result refin strategi near boundari layer region surround vortic behind cylind : ek =  k  ( uh ) =  k ( uh h ( uh ) ) , ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c85 fig .
11 .
mesh refin tetrahedr element .
top-left : origin mesh .
top-right : mesh refin step .
bottom-left : node distribut across processor .
bottom-right : tem- peratur field end simul .
k denot element mesh , h denot project onto finit element space ,  denot project onto space orthogon finit element space .
figur 13 show result mesh evolut obtain exampl .
note refin process , normal node becom hang node vice versa step .
6.5 .
applic nonsmooth solut .
present nonsmooth solut exampl steadi stoke problem , consist find u :   ( 0 , )  rd p :  ( 0 , )  r u +p = f  ,   u = 0  , u = u  ,   r2 two-dimension bound domain ,  viscos , f given sourc term .
diverg free nonsmooth manufactur solut consid : ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
c86 joan baig camilo bayona fig .
12 .
mesh refin hexahedr element .
top-left : origin mesh .
top-right : mesh refin step .
bottom-left : node distribut across processor .
bottom-right : tem- peratur field end simul .
u ( r ,  ) = r [ cos (  )  (  ) + ( 1 +  ) sin (  )  (  ) sin (  )  (  )  ( 1 +  ) cos (  )  (  ) ] , p ( r ,  ) = r ( 1 ) ( 1 +  ) 2  (  ) +  (  ) 1  ,  ( r ,  ) = sin ( ( 1 +  )  ) cos (  ) 1 +   cos ( ( 1 +  )  ) + sin ( (  1 )  ) cos (  ) 1  + cos ( (  1 )  ) .
  taken  = 3/2   0.5444837 , approxima- ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c87 fig .
13 .
adapt refin finit element solut flow past cylind .
contour result veloc pressur field , refin mesh detail , present two separ configur wake oscil .
tion root nonlinear equat sin2 (  )  2 sin2 (  ) 2 = 0 .
depart six linear element triangular mesh refin use zienkiewiczzhu error estim refin criteria explain previous ex- ampl .
figur 14 show obtain veloc pressur solut .
origin refin mesh sever refin step also display .
sever re- finement level develop refin mesh .
mesh refin deal ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
c88 joan baig camilo bayona fig .
14 .
adapt refin finit element solut stoke problem , nonsmooth solut .
contour result veloc ( top-left ) pressur ( top-right ) field , origin ( bottom- left ) refin ( bottom-right ) mesh .
singular appear corner provid accur solut capabl better repres pressur field close singular .
6.6 .
applic free surfac flow .
numer exampl consist simul water flow deck ship follow impact result wave obstacl .
well-known benchmark free surfac problem studi experiment maritim research institut netherland ( marin ) .
experiment data avail [ 18 ] .
set problem follow .
larg tank open roof consid .
one side tank , gate isol volum water lay rest constant free surfac height .
side tank prismat obstacl repres contain deck ship .
obstacl static , fluid-structur interact effect consid .
experi start gate quick open ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c89 fig .
15 .
posit free surfac comput mesh sever instant simula- tion green water flow case .
( durat gate-open process consid zero ) result water wave impact obstacl wall tank .
pressur time histori sever point surfac obstacl measur compar experiment result .
initi mesh compos 3756 linear tetrahedra element use .
time step set 0.01 ( second ) total 6 simul .
finit element mesh success adapt , mesh refin heavili local around free surfac , lead import save comput effort .
figur 15 posit free surfac sever time instant shown , togeth mesh time step .
6.7 .
scalabl test .
section test scalabl propos refin method larg number processor use .
consid two case .
first case , solv adapt refin case problem balanc , load rebalanc requir .
second case , test algorithm ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
c90 joan baig camilo bayona 0 5 10 15 20 25 0 500 1000 1500 2000 e c n number processor 0.4 0.6 0.8 1 1.2 1.4 1.6 0 500 1000 1500 2000 e c n number processor fig .
16 .
uniform refin weak scalabl result 1849 processor .
notat element type follow : triangl ( 4 ) , squar (  ) , tetrahedra ( n ) , hexahedra (  ) .
left : case depart initi point per processor configur ( 100 bidimension element 8 three-dimension element ) perform 6 level uniform refin .
thereaft , includ sever uniform unrefinement/refin step last refin level .
type run perform order abl measur overal refin perform sever time step , calcul use marenostrum supercomput .
right : case depart initi point per processor configur ( 90,000 bidimension element 270,000 three-dimension element ) perform singl level uniform refin .
calcul case use beskow supercomput .
case load rebalanc requir almost everi step refin process .
step refin element contain insid domain , follow either uniform refin criterion refin criterion aggress forc load rebalanc .
weak scalabl test run 1849 processor bidimen- sional element , 1728 processor three-dimension element .
scalabl case limit 2000 million total element largest mesh creat last refin level , sinc current implement use 4 byte integ nodal element counter .
test present subsect run marenostrum supercomput barcelona supercomput center , beskow supercomput kth , sweden .
marenostrum supercomput equip intel sandybridge-ep e5-2670 core 2.6 ghz ( 3056 comput node ) 103.5 tb main memori .
beskow supercomput cray xc40 system base intel xeon e5-2698v3 core 2.3 ghz ( 1676 comput node ) 104.7 tb main memori .
first weak scalabl test correspond uniform refin problem .
depart structur uniform mesh initi number element point per processor , success refin .
time step refin element entir spatial domain .
cpu runtim invest refin procedur present figur 16 .
object weak scalabl test measur communic processor .
communic need load balanc , measur time due refin procedur .
result show increas runtim 1 100 processor .
100 processor flat tendenc observ .
scale result good bidimension three-dimension case , ensur correct behavior adapt refin ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c91 0 20 40 60 80 100 64 256 1024 1849 p e r c e n g e f r u n e number processor 0 20 40 60 80 100 64 256 1024 1849 p e r c e n g e f r u n e number processor 0 20 40 60 80 100 27 216 1000 1728 p e r c e n g e f r u n e number processor 0 20 40 60 80 100 27 216 1000 1728 p e r c e n g e f r u n e number processor fig .
17 .
runtim fraction result uniform refin weak scale test 1849 pro- cessor beskow supercomput .
triangl ( top-left ) , squar ( top-right ) , tetrahedra ( bottom- left ) , hexahedra ( bottom-right ) element type case evalu .
descript case given figur 16 .
perform singl level uniform refin solv stationari heat transfer problem result refin mesh .
refin procedur runtim fraction plot solid fill , linear system runtim fraction plot use pattern fill .
address fraction time requir singl refin procedur comparison time spent linear solver order solv refin mesh linear system .
compar result best runtim among sever linear solver , given biconjug gradient method implement petsc parallel solver librari [ 1 ] , togeth ml precondit packag implement trilino librari [ 10 ] .
algorithm .
runtim fraction refin procedur respect linear system solut present figur 17 singl time step .
result show runtim domin linear system solut , runtim fraction refin procedur decreas number processor , ensur good behavior larg scale comput .
second weak scalabl test intend evalu overal perform load rebalanc necessari .
case depart structur uniform mesh refin success use follow refin criteria .
step re- fine element contain insid domain r = ( 1 12i , 1 )  ( 1 1 2i , 1 )  ( 0 , 1 ) , denot step number case .
criterion defin spatial distri- bution partial refin element domain .
figur 18 show runtim ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
c92 joan baig camilo bayona 0 10 20 30 40 50 60 70 80 0 500 1000 1500 2000 e c n number processor 1 2 3 4 5 6 7 8 0 500 1000 1500 2000 e c n number processor fig .
18 .
load balanc refin weak scalabl result 1849 processor .
notat element type follow : triangl ( 4 ) , squar (  ) , tetrahedra ( n ) , hexahedra (  ) .
left : case depart initi point per processor configur ( 4900 bidimension element 8 three-dimension element ) perform 15 level load rebalanc refin .
run calcul use marenostrum supercomput .
right : case depart initi point per processor configur ( 90,000 bidimension element 270,000 three-dimension element ) perform singl level forc load rebalanc refin .
calcul case use beskow supercomput .
requir refin load balanc procedur .
interprocessor com- munic case due refin step also load rebalanc procedur .
asymptot tendenc reach bidimen- sional three-dimension element number processor increas .
three-dimension element weak scale result good rang 1000 pro- cessor .
runtim fraction spent refin load balanc procedur respect linear system solut present figur 19 .
case refin load balanc comput cost small moder respect linear system solv .
linear system solv test one-degree-of- freedom heat transfer problem .
case incompress navierstok prob- lem , nonlinear larger number degre freedom per node would increas consider cost solv linear system , refin procedur cost would remain , lead even smaller runtim fraction refin step .
therefor , conclud implement propos algorithm ef- ficient respect cost solv linear system adapt refin mesh , algorithm suitabl larg scale problem high-perform comput environ .
7 .
conclus .
paper novel parallel , hierarch , load rebal- anc algorithm adapt mesh refin ( amr ) coarsen unstructur bidimension three-dimension mesh present .
main featur propos algorithm suitabl nodal base partit distribut memori framework capabl success refin unrefin mesh effici manner cluster thousand processor .
sever differ type mesh dealt algorithm , includ triangular , quadrilater , tetrahedr , hexahedr element , also mesh sever type element .
ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c93 0 20 40 60 80 100 64 256 1024 1849 p e r c e n g e f r u n e number processor 0 20 40 60 80 100 64 256 1024 1849 p e r c e n g e f r u n e number processor 0 20 40 60 80 100 27 216 1000 1728 p e r c e n g e f r u n e number processor 0 20 40 60 80 100 27 216 1000 1728 p e r c e n g e f r u n e number processor fig .
19 .
runtim fraction result load rebalanc refin weak scale test 1849 processor beskow supercomput .
triangl ( top-left ) , squar ( top-right ) , tetrahedra ( bottom-left ) , hexahedra ( bottom-right ) .
full descript case given figur 18 .
perform singl level forc load rebalanc refin solv stationari heat transfer problem result refin mesh .
linear solver set biconjug gradient ml precondition .
refin runtim fraction plot solid fill , load balanc runtim fraction plot coars pattern fill , linear system runtim fraction plot use fine pattern fill .
memori requir algorithm reduc local level , inform correspond part mesh current processor subdomain need store local .
result refin mesh nonconform hang node , balanc restrict need enforc adja- cent element , allow us jump multipl refin level neighbor element .
load rebalanc scheme present independ re- balancing/renumb strategi , chosen user .
graph par- tition scheme space-fil method ( renumb strategi load rebalanc ) use propos algorithm .
sever numer test present illustr perform propos algorithm .
first set test deal simul driven problem poisson heat transfer problem incompress navierstok equat ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp copyright  siam .
unauthor reproduct articl prohibit .
c94 joan baig camilo bayona adapt mesh , expect behavior refin algorithm obtain .
second set test studi scalabl algorithm 2000 cpu cluster good weak scalabl result obtain mesh 2000 million element .
also , runtim fraction refin process reduc compar runtim solv linear system equat generat mesh , ensur suitabl propos algorithm larg comput physic problem high-perform comput environ .
propos algorithm pack refficientlib fortran 2003 librari user interfac present .
allow easi integr ( 10 call adapt refin librari ) propos algorithm exist comput physic code .
algorithm current deal h-refin ; extens algorithm hp-refin matter futur work .
acknowledg .
simul done marenostrum supercom- puter barcelona supercomput center centro nacion de supercomputacion ( spanish nation supercomput center ) beskow supercomput royal institut technolog ( kth ) , sweden .
acknowl- edg prace award us access resourc marenostrum base spain barcelona .
support red espanola de supercomputacion ( res ) european prace network acknowledg .
refer [ 1 ] s. abhyankar , m. f. adam , s. balay , j .
brown , l. dalcin , t. isaac , m. g. knepley , d. may , k. rupp , j. sarich , b. f. smith , s. zampini , h. zhang , h. zhang , petsc ( portabl , extens toolkit scientif comput ) , version 3.7 , 2016 , http : //www.mcs.anl.gov/petsc .
[ 2 ] s. badia j. baig , adapt finit element simul incompress flow hy- brid continuous-discontinu galerkin formul , siam j. sci .
comput. , 35 ( 2013 ) , pp .
a491a516 , https : //doi.org/10.1137/120880732 .
[ 3 ] w. bangerth , c. burstedd , t. heister , m. kronbichl , algorithm data struc- ture massiv parallel generic adapt finit element code , acm tran .
math .
soft- ware , 38 ( 2011 ) , 14 .
[ 4 ] e. g. boman , u. v. catalyurek , c. chevali , k. d. devin , zoltan isor- ropia parallel toolkit combinatori scientif comput : partit , order , color , sci .
program. , 20 ( 2012 ) , pp .
129150 .
[ 5 ] c. burstedd , o. ghatta , m. gurni , t. isaac , g. stadler , t. warburton , l. wilcox , extreme-scal amr , proceed 2010 acm/iee intern con- ferenc high perform comput , network , storag analysi , ieee com- puter societi press , piscataway , nj , 2010 , pp .
112 .
[ 6 ] c. burstedd , l. c. wilcox , o. ghatta , p4est : scalabl algorithm parallel adap- tive mesh refin forest octre , siam j. sci .
comput. , 33 ( 2011 ) , pp .
11031133 , https : //doi.org/10.1137/100791634 .
[ 7 ] p. m. campbel , k. d. devin , j. e. flaherti , l. g. gervasio , j. d. teresco , dynam octre load balanc use space-fil curv , technic report cs-03-01 , depart comput scienc , william colleg , williamstown , , 2003 .
[ 8 ] b. cockburn c.-w. shu , rungekutta discontinu galerkin method conser- vation law v : multidimension system , j. comput .
phys. , 141 ( 1998 ) , pp .
199224 .
[ 9 ] r. codina , stabil finit element method general stationari incompress flow , comput .
method appl .
mech .
engrg. , 190 ( 2001 ) , pp .
26812706 .
[ 10 ] m. heroux , r. bartlett , v. h. r. hoekstra , j. hu , t. kolda , r. lehoucq , k. long , r. pawlowski , e. phipp , a. saling , h. thornquist , r. tuminaro , j. willenbr , a. william , overview trilino , technic report sand2003-2927 , sandia nation laboratori , albuquerqu , nm ; livermor , ca , 2003 .
[ 11 ] t. isaac , c. burstedd , o. ghatta , low-cost parallel algorithm 2 : 1 octre balanc , proceed ieee 26th intern parallel & distribut process symposium , ieee comput societi press , piscataway , nj , 2012 , pp .
426437 .
ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp http : //www.mcs.anl.gov/petsc http : //www.mcs.anl.gov/petsc https : //doi.org/10.1137/120880732 https : //doi.org/10.1137/100791634 copyright  siam .
unauthor reproduct articl prohibit .
refficientlib : effici adapt mesh refin c95 [ 12 ] n. jansson , j. hoffman , j. jansson , framework massiv parallel adapt finit element comput fluid dynam tetrahedr mesh , siam j. sci .
comput. , 34 ( 2012 ) , pp .
c24c41 , https : //doi.org/10.1137/100800683 .
[ 13 ] g. karypi v. kumar , fast high qualiti multilevel scheme partit ir- regular graph , siam j. sci .
comput .
20 ( 1998 ) , pp .
359392 , https : //doi.org/10.1137/ s1064827595287997 .
[ 14 ] b. s. kirk , j. w. peterson , r. h. stogner , g. f. carey , libmesh : c++ librari parallel adapt mesh refinement/coarsen simul , engin comput , 22 ( 2006 ) , pp .
237254 .
[ 15 ] a. langer , j. liffland , p. miller , k.-c. pan , l. v. kale , p. ricker , scalabl algo- rithm distributed-memori adapt mesh refin , proceed ieee 24th intern symposium comput architectur high perform comput ( sbac-pad ) , ieee comput societi press , piscataway , nj , 2012 , pp .
100107 .
[ 16 ] s. popinet , gerri : tree-bas adapt solver incompress euler equat complex geometri , j. comput .
phys. , 190 ( 2003 ) , pp .
572600 .
[ 17 ] r. s. sampath g. biro , parallel geometr multigrid method finit element octre mesh , siam j. sci .
comput. , 32 ( 2010 ) , pp .
13611392 , https : //doi.org/10.1137/ 090747774 .
[ 18 ] s.e.r.i .
communiti , http : //spheric-sph.org/index .
[ 19 ] h. sundar , r. s. sampath , g. biro , bottom-up construct 2:1 balanc refin linear octre parallel , siam j. sci .
comput. , 30 ( 2008 ) , pp .
26752708 , https : //doi .
org/10.1137/070681727 .
[ 20 ] t. tu d.  hallaron , balanc refin massiv linear octre , technic report cmu-cs-04-129 , school comput scienc , carnegi mellon univers , pittsburgh , pa , 2004 .
[ 21 ] t. tu , d. r.  hallaron , o. ghatta , scalabl parallel octre mesh terascal applic , proceed acm/iee 2005 confer supercomput , ieee comput societi press , piscataway , nj , 2005 , p. 4 .
[ 22 ] t. tu , d. r.  hallaron , j. c. lopez , etre : database-ori method generat larg octre mesh , engin comput , 20 ( 2004 ) , pp .
117128 .
[ 23 ] o. c. zienkiewicz j .
z. zhu , simpl error estim adapt procedur prac- tical engin analysi , int .
j. numer .
method engrg. , 24 ( 1987 ) , pp .
337357 .
ow nl oa de 06 /1 6/ 17 5 .
19 6 .
89 .2 25 .
r ed tr ib ut io n su bj ec ia l ic en se r co py ri gh ; ee h tt p : // w w w .s ia .o rg /j ou rn al s/ oj sa .p hp https : //doi.org/10.1137/100800683 https : //doi.org/10.1137/s1064827595287997 https : //doi.org/10.1137/s1064827595287997 https : //doi.org/10.1137/090747774 https : //doi.org/10.1137/090747774 http : //spheric-sph.org/index https : //doi.org/10.1137/070681727 https : //doi.org/10.1137/070681727 introduct distribut refin structur mesh partit distribut data structur globalelementidentifi data structur inverseglobalpointnumberinglist initi refin step amend element refin classif local refin parallel number hang node export extern mesh load rebalanc rebal renumb rebuild refin structur extern call refficientlib librari numer exampl bidimension element multipl type element singl bidimension simul tetrahedr hexahedr element applic incompress navierstok equat applic nonsmooth solut applic free surfac flow scalabl test conclus refer
