upcommon portal del coneix obert la upc aquesta s una cpia la versi author final draft d'un articl publicat la revista journal real-tim imag processing. url d'aquest document upcommon e- prints: ________________________________________________ articl publicat / publish paper: andr fras-velzquez, josep ramon morros, mario garca, wilfri philip (2017) hierarch stack filtering: bitplane-bas algorithm massiv parallel processors. journal real-tim imag processing, p.1-14. doi: 10.1007/s11554-017-0681-8 journal real-tim imag process manuscript no. (will insert editor) andr fras-velazquez josep ramon morro mario garca wilfri philip hierarch stack filtering: bitplane-bas algorithm massiv parallel processor received: date / accepted: date abstract develop novel parallel architectur imag processing, implemen- tation well-known imag oper need reformul advantag so-cal massiv parallelism. work, propos gener algorithm implement larg class nonlinear filters, call stack filters, 2d-arrai processor. propos method consist decompos imag bitplan bitwis decomposition, process bit- plane hierarchically. filter imag reconstruct simpli stack filter bitplan accord order significance. ow hierarch structure, algorithm allow trade-off imag qualiti process time, significantli reduc comput time low-entropi images. also, experiment test process time method substanti lower classic method larg structur elements. featur varieti real-tim applic base morpholog oper video segment video enhancement. keyword stack filter arrai processor bitwis decomposit morpholog oper smart camera 1 introduct platform-awar implement basic imag oper essenti build effici applic massively-parallel processors. paper, propos novel implement stack filter 2d-arrai processor. filter compos larg class nonlinear filter return local rank statist image. classic filter like median, erosion, dilat belong class filters; wide imag denoising, pattern recognition, object segmentation. naiv implement filter consist sort input data, select desir rank element. altern implement [25,8,17] decompos input data binari signals, appli simpl binari filter signals, avoid expens sorting. baselin implement stack filter binari decomposit consist steps: first, input data decompos binari signal threshold data level final public avail springer a. fras-velazquez w. philip ghent univers depart telecommun inform process (telin-ipi-imec) sint-pietersnieuwstraat 41-b 9000 gent belgium e-mail: j.r. morro m. garca technic univers catalonia jordi girona 1-3 08034 barcelona spain 2 andr fras-velazquez et al. filter imageinput imag stackingbitwis decomposit fig. 1 block diagram bitplan stack filter (bsf) algorithm. data range. step known threshold decomposit (td) [18]. second, binari filter appli binari signal level decomposition. third, output obtain sum filter data level decomposition. literatur implement stack filter differ architectures. instance, chakrabarti luck [3] propos implement appli threshold decomposit input sampl serial fashion, filter binari word level decomposit parallel. hand, gevorkian et al. [8] propos implement decompos input sampl parallel fibonacci p-code reduc number decompos levels, filter binari word level decomposit serial fashion. avedillo et al. [2] propos binari decomposit base order matrix result comparison input samples. way, number decompos level longer depend gray-level rang input data, number samples. appli decomposition, binari word level filter parallel. meanwhile, mertzio tsirikolia [11] propos us coordin logic filter implement classic morpholog oper applic rang nois remov edg extraction. kind filter reli bitwis decomposition, allow comput filter approxim process signific bit improv comput speed. however, easili gener stack filters. finally, spilioti boutali [16] exploit idea separ imag bitplan bitwis decomposition, goal acceler comput imag moments. strategi enabl save signific comput time achiev high accuraci comput moments. general, stack filter implement sequenti process pixel neighborhood slide imag td method. paper, follow differ approach imag bitwis decomposit bitplan architecture. bitwis decomposit allow filter imag hierarchically, bitplan architectur help exploit fast process logic oper binari morpholog filter focal plane processor (fpp) [20]. primarily, propos method consist decompos input imag bitwis decom- position. way, 8-bit imag decompos 8 bitplan arrang signific bit. then, filter bitplan hierarch stack filter algorithm. finally, filter imag assembl simpli stack filter bitplan accord order significance. block diagram outlin propos method present fig. 1. test approach, implement eye-ri vision [12], smart camera contain mixed-sign fpp call q-eye. worth remark earli develop method describ present previou paper [6]. prototyp method benefit bitwis decomposit bitplan architecture; however, specif tailor eros filter. paper [7], develop preliminari version stack filter algorithm. paper, laid groundwork current approach outlin basic algorithm, inform introduc relationship bitwis threshold decomposition. present work, includ contribut apart extend detail descript algorithm: (i) formal deriv boolean function relat bitwis decomposit threshold decomposition. hierarch stack filtering: bitplane-bas algorithm massiv parallel processor 3 (ii) deriv optim criteria reduc process time algorithm depend gray-level distribut imag size structur element. thank criteria, speed algorithm discard comput signific bitplanes, activ discard superflu comput compromis imag fidelity. (iii) present complex analysi new set simul test kei featur algorithm. rest paper organ follows: sect. 2, deriv equat relat threshold decomposit bitwis decomposition, basi approach. meanwhile, sect. 3, formal propos stack filter algorithm. architectur massively- parallel processor demonstr algorithm describ sect. 4. sect. 5, present experiment results. finally, conclus work state sect. 6. 2 relationship bitwis threshold decomposit section deriv express obtain threshold decomposit imag bitwis decomposition, vice versa. express allow later propos stack filter algorithm implement imag bitwis decomposition. let i(n,m) digit imag spatial indic n,m z, l grayscal levels. imag decompos l threshold bitplan threshold decomposit function t follows: tl(n,m) = tl(i(n,m)) = { 1, i(n,m) l, 0, i(n,m) < l, (1) t repres threshold bitplan l threshold level. hand, bitwis decomposit function b split imag k = dlog2(l) bitwis bitplan follows: bk(n,m) = bk(i(n,m)) = i(n,m) 2k mod 2, (2) b repres bitwis bitplan k bit significance. recompos multilevel imag threshold decomposit evaluate: i(n,m) = l l=1 tl(n,m), (3) bitwis decomposit evaluate: i(n,m) = k1 k=0 bk(n,m)2 k. (4) note monoton function like threshold function (1) preserv order decompos data, kei implement stack filter binari filter [18]. contrast, non-monoton function like bitwis decomposit satisfi order preserv property. fig. 2 observ differ decomposit functions. bitwis decomposit fulfil monoton property, possess import advantag threshold decomposition: 1. bitwis decomposit obtain simpli read bit field data, td requir comparisons. 2. imag inform convei hierarchically, allow reduc process time exact filter output approxim remov comput signific bitplanes. 4 andr fras-velazquez et al. (a) (b) fig. 2 exampl using: (a) bitwise, (b) threshold decompositions. note (a) b0 b1 monotone, (b) function monoton 2.1 threshold bitwis decomposit deriv express bitwis decomposit threshold decomposition, manip- ulat definit bitwis decomposit (2) describ appendix a: bk = nk+1 j=0 bj,k, bj,k = t(2j+1)2k t(j+1)2k+1 (5) bj,k j-th partial output k-th bitplan nk = 2 kk 1. simplicity, spatial indic n m bitplan omitted. (5) conclud k-th bitplan reconstruct 2kk threshold bitplanes. thus, number threshold increas exponenti bit signific decreases. mean coars inform imag gener coupl thresholdings, fine detail requir them. 2.2 bitwis threshold decomposit comput threshold decomposit bitwis decomposit (the invers relationship (5)), prove appendix b threshold bitplan level l reconstruct q signific bitplan follows: tl = (bk1 ./ k1 (bk2 ./ k2 (bkq+1 ./ kq+1 bkq))) (6) (k1k2 ...10)2 binari represent l, bit control follow condit express ./ x = { , x = 0, , x = 1. (7) number signific bitplan q = k z, z number signific bit l set zero. instance, comput t168, express 168 (10101000)2, yield z = 3 q = 5. analyz (6), conclud threshold decomposit gener bitwis decomposit simpl boolean operations. hierarch stack filtering: bitplane-bas algorithm massiv parallel processor 5 3 bitplan stack filter algorithm section, present algorithm perform bitplan stack filtering. sect. 3.1 gener procedur filter imag signific bitplane, sect. 3.2 optim criteria depend imag distribution, reduc comput signific bitplanes. algorithm return exact filter output, comput time optim algorithm usual faster depend imag distribution. general, filter respons bk bitwis bitplan bk (i) defin bk = s,f [bk (i)], binari morpholog filter structur element s, posit boolean func- tion f . therefore, light (4), filter respons grayscal imag bitwis decomposit obtain follow = k1 k=0 bk 2 k = k1 k=0 s,f [bk (i)] 2k (8) (5), filter bitwis bitplan deriv threshold bitplan filter binari stack filter . thus, follow that: bk = nk+1 j=0 bj,k, bj,k = s,f [ tuj,k(b) ] s,f [ tvj,k(b) ] (9) threshold bitplan level uj,k = (2j + 1)2 k vj,k = (j + 1)2 k+1 gener set bitwis bitplan b = (b0, ..., bk1) (6). finally, express filter threshold bitplan t = s,f [t ] later rewrit (9) compactli follows: bk = nk+1 j=0 bj,k, bj,k = tuj,k tvj,k (10) 3.1 propos algorithm algorithm consist filter bitwis bitplan imag (10). architectur describ fig. 1. process block, denot bsfk, repres implement (10) k-th bitplan significance. algorithm run signific bitplan process block depend bitplan greater equal signific k-th block. hierarch relat number bitwis bitplan requir gener tu tv (6). instance, comput tu bitwis bitplanes, need p signific bitplan p = k k. hand, comput tv need q signific bitplan q k k 1. conclud q p 1, suggest tv determin bitwis bitplan tu. allow comput tv directli output bitplan greater signific level processed. thus, fig. 1 output bitplan eventu input process block lower significance. tu, tu comput input bitwis bitplanes, binari stack filter applied. algorithm 1 detail bitplan stack filtering. compos nest for-loop. outer loop control order bitplan process (from signific bitplanes). inner loop perform filter k-th bitwis bitplan comput accumul 2kk1 partial output state (10). 3.2 optim algorithm optim algorithm follow similar structur gener algorithm. main differ includ criteria avoid comput partial output bitplan process 6 andr fras-velazquez et al. algorithm 1 stackfilter((b0, . . . , bk1),s,f) 1: bk 0 2: k = (k 1) 0 3: bk 0 4: j = 0 nk+1 5: u (2j + 1)2k 6: v (j + 1)2k+1 7: (k1k2 . . . kp0 . . . 0)2 (u)10 8: (kk1 . . . kq0 . . . 0)2 (v)10 9: tu (bk1 ./ k1 (bk2 ./ k2 (bkp+1 ./ kp+1 bkp))) (bkp+1 ./ kp+1 bkp))) 10: tu s,f [tu] 11: tv (bk ./ k (bk1 ./ k1 (bkq+1 ./ kq+1 bkq))) 12: bj,k tu tv 13: bk bk bj,k 14: end 15: end 16: return (b0, . . . , bk1) hierarchically. partial output defin bj,k = tuj,k tvj,k , repres rectangl map grayscal domain boolean domain shown fig. 3. figure, map repres partial output k-th level significance. map repres logic sum partial output (k1)-th level significance, rectangl function repres partial output. result, partial output given level split partial output lower level grayscal domain. pattern repeat map bitwis decomposition, shown fig. 2a. let consid fig. 3 model deriv optim criteria. criterion state partial output bj,k return bitplan zeros, comput bj+1,k1 avoid yield bitplan zeros. verifi fig. 3 pixel filter imag grai level uj,k vj,k, pixel grai valu subinterv uj+1,k1 vj+1,k1. hand, second criterion state threshold bitplan tuj,k return bitplan ones, comput bj,k1 avoid yield bitplan zeros. criterion verifi fig. 3 pixel filter imag grai valu greater equal uj,k, pixel grai valu uj,k1 vj,k1 1. incorpor criteria stack filter algorithm, avoid comput partial output lower level significance, notabl reduc process time. exclud partial output evalu grayscal interv pixels, expect process low-contrast imag faster dynam range. fig. 3 map grayscal boolean domain partial output consecut bitplanes. top: map partial output bj,k. bottom: map bj,k1 bj+1,k1. variabl u,v indic threshold level deriv partial outputs. hierarch stack filtering: bitplane-bas algorithm massiv parallel processor 7 algorithm 2 optim sf((b0, . . . , bk1),s,f) 1: bk 0 2: jk1 {0} 3: k = (k 1) 0 4: bk 0 5: jk1 {} 6: j jk 7: u (2j + 1)2k . . . . . . 14: bk bk bj,k 15: jk1 eval criteria(j, bj,k, tu, jk1) 16: end 17: end 18: return (b0, . . . , bk1) algorithm 2b 1: function eval criteria(j, b, tu, j) 2: b = 0 3: j j {2j} 4: tu = 1 5: j j {2j + 1} 6: 7: j j {2j, 2j + 1} 8: end 9: return j 10: end function algorithm 2 present optim algorithm includ simplif criteria de- scribe above. algorithm follow structur algorithm 1. main differ occur line 6 15. line 6, j-index loop comput partial output link indic store jk. indic deriv optim criteria (evalu function eval criteria). given partial output index j yield partial output indic 2j 2j + 1 level significance, criteria state line 2 4 algorithm 2b defin partial output comput level case. 3.2.1 algorithm complex algorithm describ above, demand oper basic logic binari morpholog operations, evalu bitplan level. therefore, comput complex algorithm estim enumer operations. recal fpp comput logic binari morpholog oper parallel blitplan level. tabl 1, compar complex classic td approach algorithm proposed. oper count bitplane, signific bitplane, given 8-bit image. first, focu analyz number morpholog operations. td approach gener algorithm (ga) requir 255 morpholog operations, distribut bitplan different. is, td approach appli morpholog oper threshold level, gener algorithm appli 27k morpholog oper bitplan depend level signific k. impli signific bitplanes, convei coars inform image, comput faster signific bitplanes, convei tabl 1 number logic morpholog oper requir filter bitplan significance. morpholog oper logic oper td ga oa td ga oa k s13 s55 s1515 s13 s55 s1515 0 128 128 87 36 1,921 2,177 1,477 611 1 64 64 45 19 833 961 676 282 2 32 32 23 10 353 417 299 130 3 16 16 12 5 145 177 134 55 4 8 8 6 3 57 73 56 28 5 4 4 4 2 21 29 28 14 6 2 2 2 2 7 11 11 10 7 1 1 1 1 2 4 4 4 total 255 255 255 180 78 13,778 3,339 3,849 2,685 1,134 8 andr fras-velazquez et al. tabl 2 approxim number logic gate pixel depend filter method. sort-and-select td ga n best worst eros median eros median 3 455 585 14,816 14,818 86 88 5 1,105 1,625 17,894 17,908 144 158 7 1,820 3,185 20,972 21,030 202 260 9 2,600 5,265 24,050 24,264 260 474 11 3,445 7,865 27,128 27,851 318 1,401 13 4,335 10,985 30,206 32,674 376 2,844 15 5,330 14,625 33,284 41,902 434 9,052 imag detail texture. meanwhile, optim algorithm (oa) follow hierarch distribution, complex actual vari imag content. words, perfor- manc depend gray-level distribut image, size structur element. instance, tabl 1, enumer requir oper filter uniformly-distribut imag structur element differ size. particularly, 13 structur element, number oper gener algorithm. contrast, 5 5 15 15 structur element, number oper drastic reduc signific bitplanes. reduc- tion occur simplif criteria (algorithm 2) discard numer partial output signific bitplan size structur element increases. behavior expect given filter imag usual smoother coarser. term number logic operations, td approach need 4 time oper gener algorithm. overhead caus threshold additions, requir decompos recompos image. meanwhile, optim algorithm report 15% overhead small structur element 1 3 points. case, overhead come implement simplif criteria establish algorithm 2. nevertheless, size structur element increases, criteria pai drastic reduc number logic operations, shown tabl 1. conclusion, optim algorithm filter imag faster gener algorithm compromis fidel output. also, propos algorithm speed run coars mode oper discard comput signific bitplanes. reference, comparison propos method discuss sect. 5.2. algorithm filter imag bitplan fashion, interest compar com- plexiti sort-and-select approach decomposition-bas method pixel level. tabl 2, present estim number gate requir filter pixel n-point structur element. first, evalu complex sort-and-select filter method. case, complex depend number comparison sort data. general, current sort method need 2n log n n2 comparison best worst case, re- spectively. assum 8-bit compar requir 65 logic gates, complex bound method estim term logic gates, shown tabl 2. bound apart size structur element increases. note baselin estim method complex sort requir numer data-swap operations. hand, complex decomposition-bas method depend size structur- ing element, type filter appli decomposit method. instance, td approach, main burden implement decomposition/recomposit steps, demand threshold adders. conversely, approach minim decomposi- tion/recomposit burden, depend filter complexity. note eros median filter extrem scale complexity. 4 eye-ri vision recent advanc cmo technolog allow integr sophist imag processor compact cameras. particular, so-cal smart camera [1,15,22] integr imag processor hierarch stack filtering: bitplane-bas algorithm massiv parallel processor 9 i/o adc & dac 176 x 144 cell arrai bu er - dac control unit q-ey control sram memori (program & data) nios-ii microprocessor c o m m u n ic tio n p o rt fig. 4 conceptu block diagram eye-ri vision system. capabl recogn imag pattern make autonom decisions. sort camera stand convent camera low power consumption, high process power, autonomy. smart camera high silicon integr incorpor parallel processor optic sensor singl chip known focal plane processor (fpp). architectur fpp consist interconnect arrai cell integr optic sensor (pixel), memory, process unit [20]. arrai architectur known massively-parallel simd (mp-simd), permit execut low-level imag oper pixel/block level parallel. effici exploit parallel mp-simd architecture, sequenti implement well- known vision algorithm need redesigned. instance, wu et al. [19] map vision algorithm mp-simd architectur applic gestur analysis. similarly, zarandi et al. [20] present collect algorithm implement fpp applic laser beam control, finger tracking, traffic sign detection. high comput power smart camera exploit tackl problem involv multipl view cameras, 3d pose reconstruct human real time [21]. implement algorithm, us eye-ri vision [12]. conceptu block diagram present fig. 4. smart camera compos mixed-sign fpp (q-eye), digit microprocessor (nio ii), plu hardwar interfaces, result low cost autonom decis control extern devices. q-ey mixed-sign mp-simd processor comput power 250 gop (giga oper second) power consumpt 4 mw/gops. processor compos 176 x 144 cell arrai process binari grayscal images. grayscal binari imag memori bank intern avail q-ey buffer intermedi results. optic sensor q-ey embed chip, grayscal imag directli process analog domain. thus, imag convert digit sent extern sram memori manipul microprocessor. hand, nios-ii 32-bit gener purpos microprocessor perform 75 mip 70 mhz. act like brain control q-eye, sram memory, commun ports. averag power consumpt camera 1.5 w. implement algorithm eye-ri vision distribut parts: hand, imag decomposition/recomposit perform microprocessor simpli reading/writ bit input/output image. hand, stack filter algorithm execut q-ey advantag fast implement logic morpholog oper basi algorithm. note thank massiv parallel q-eye, cell perform oper time. particular, note cell contain combin analog digit process modul interact them. implementation, digit process modul plai relev role. local logic unit (llu), two-input logic block perform logic oper binari imag 2.5 s. thank programm truth table, differ type logic oper defined. meanwhile, modul known hit-and-miss unit (hmu), check 33 neighborhood cell match specif pattern not. pattern structur element program defin pixel includ morpholog operation. base hit-and-miss operator, binari morpholog oper 10 andr fras-velazquez et al. erosion, dilation, opening, close program q-eye. hit-and- miss oper execut approxim 10 s. advantag morpholog unit larg structur element quickli perform minim overhead appli predefin 3 3 structur element multipl time singl instruction. type oper larg differ sequenti implement complex rapidli increas size structur element. order develop applic eye-ris, need understand execut flow. primarily, note nio microprocessor program c/c++ code, q-ey program simpl c-like program languag develop anafocu call cfpp code. therefore, applic eye-ri compos type code. main control flow perform nio microprocessor, make call cfpp code execut q-eye. algorithms, imag decomposit recomposit perform nio microprocessor q-ey cope given mixed-sign nature. decomposit recomposit take approxim 14 ms 25 ms, respectively. meanwhile, algorithm 1 2 program cfpp code comput q-eye. unfortunately, q-ey contain 12 imag memori internally. implementation, memori reserv input bitplanes, 4 avail store output bitplan intermedi results. consequently, forc transfer bitplan extern sram memory. unfortunately, transfer data q-ey sram memori slow, repres bottleneck implementation. experiments, memori transfer reach 65% total process time. result, coars mode oper optim criteria help reduc number bitplan operations, number memori transfers. total, comput time imag optim algorithm rang 46.27 ms 84.0 ms depend gray-level distribut size structur element. valu correspond frame rate goe 11.9 fp 21.6 fps. note bottleneck eye-ri hinder potenti algorithm. decomposit recomposit steps, gener baselin cost 39 ms. limit number imag memori q-eye, slow transfer intern extern memories. despit limitations, time overhead approach lower td implement consid imag decomposit recomposit need perform nio processor. case, oper 3 seconds, prohibitive. problem imag threshold q-ey perform analog comparators, inaccur nois threshold level set 127. 5 experiment result valid propos algorithms, implement eye-ri vision [12]. follow sections, present evalu algorithm comparison baselin method base threshold decomposition. particular, baselin method consist appli threshold decomposit 8-bit input image, gener 255 bitplanes. then, appli binari stack filter bitplane, output imag gener sum 255 filter bitplanes. 5.1 evalu hierarch process compar hierarch process algorithm linear process baselin approach, measur percentag time comput certain number bitplan qualiti result image. experiment, appli median filter cross-shap structur element width 3 test imag uniformli distribut random number algorithm 1 baselin method. fig. 5(a), present percentag time spent filter number threshold bitplan ascend threshold level baselin approach. graphic reveal process time linearli increas number bitplanes, mean comput cost hierarch stack filtering: bitplane-bas algorithm massiv parallel processor 11 1 63 127 191 255 0 10 20 30 40 50 60 70 80 90 100 number threshold bitplan % o f p ro c e ss g ti m e (a) 1 2 3 4 5 6 7 8 0 10 20 30 40 50 60 70 80 90 100 number bitwis bitplan % o f p ro c e ss g ti m e (b) 1 63 127 191 255 10 20 30 40 50 60 70 80 90 100 number threshold bitplan p s n r (d b ) (c) 1 2 3 4 5 6 7 8 10 20 30 40 50 60 70 80 90 100 number bitwis bitplan p s n r (d b ) (d) fig. 5 (a) (b): rel process time certain number threshold bitwis bitplanes, respec- tively. (c) (d): qualiti reconstruct imag certain number threshold bitwis bitplanes, respectively. threshold bitplan same. fig. 5(b), present percentag time spent filter certain number bitwis bitplan descend order significance. note process time exponenti increas factor 2 number bitplan increases. impli comput cost bitplan same, increas bit signific decreases. words, signific bitplan comput faster signific bitplanes. behavior expected, signific bitplan comput coupl logic morpholog operations, signific bitplan need them, state tabl 1. fig. 5(c), evalu qualiti imag reconstruct certain number threshold bitplan filter ascend order. imag qualiti measur peak signal- to-nois ratio (psnr) [9], filter imag reconstruct imag il l threshold bitplanes. fig. 5(c) reveal that, process threshold bitplane, psnr 6 db; valu increas exponenti rate 1.2% threshold bitplan processed, reconstruct perfect. contrast, fig. 5(d), evolut imag qualiti filter bitwis bitplan signific bitplane. imag qualiti measur psnr, l repres number bitwis bitplanes. bar chart show reconstruct imag signific bitplan yield psnr 10.7 db; valu increas linearli rate 6.63 db bitplan bitplan process reconstruct perfect. general, filter k bitwis bitplan descend order significance, need filter 2k 1 threshold bitplan deriv correspond partial outputs. relat approxim equival complex algorithm baselin approach. instance, process seven signific bitplanes, psnr reconstruct imag 51 db, shown fig. 5(d). equivalently, process 127 threshold bitplan baselin approach, psnr 19 db shown fig. 5(c). thank hierarch structur algorithm, reconstruct imag better qualiti baselin approach number threshold bitplanes. statement visual check fig. 6 compar median filter imag (fig. 6(a)) partial reconstruct result filter methods. fig. 6(b), reconstruct imag 127 threshold bitplan 12 andr fras-velazquez et al. (a) (b) (c) fig. 6 (a) median filter image, (b) reconstruct filter imag 127 threshold bitplan (psnr = 19 db), (c) reconstruct filter imag seven signific bitplan (psnr = 51db). baselin approach, give darker coarser imag fig. 6(a). contrast, fig. 6(c) show reconstruct imag seven signific bitplan approach, give similar imag fig. 6(a). conclusion, filter signific bitplan image, reduc comput time half significantli compromis qualiti reconstruct image. filter approxim attract real- time applic base stack filters. 5.2 compar analysi gener algorithm optim algorithm sect. 3.2, propos optim criteria reduc comput time algorithm 1 depend imag distribution. therefore, expect comput imag littl contrast faster high contrast. relationship examin test optim algorithm imag differ entropy, depict fig. 7(a)-(c). correspond histogram imag present fig. 7(d)-(f). stack filter emploi test eros filter squar structur element. fig. 8(a) plot number bitplan eros requir filter imag gener optim algorithm squar structur element differ width. gener algorithm, number bitplan eros 255 regardless imag entropy. contrast, optim algorithm, number bitplan eros decreas entropi imag decreases. moreover, number bitplan eros decreas width structur element increases. regard, structur element increases, filter imag tend pixel grai tone, contrast entropy. result, partial output comput lower level significance, reduc number bitplan erosions. fig. 8(b), evalu process time imag low, medium, high entropi gener optim algorithm. gener algorithm, process time increas size structur element comput bitplan eros get slower structur element increases. moreover, total number bitplan eros remain regardless neighborhood size. hand, optim algorithm, process time decreas imag entropi decreas structur element increases. reduct time close relat exponenti decai number bitplan erosions. moreover, reduct larger time overhead filter larg structur elements. conclusion, optim algorithm, significantli reduc comput time imag depend entropi size structur element employed. 5.3 rank-ord filter implement perform rank order filter (rofs), call order-statist filter [10], compos stack-filt subclass return local statist image. rof rank r, denot rof(r), select r-th largest element list pixel valu defin structur element. r goe 1 n , n number elements, filter rof(1) rof(n) correspond morpholog dilat eros operators, respectively. special case occur r = (n + 1)/2, correspond median filter n odd value. hierarch stack filtering: bitplane-bas algorithm massiv parallel processor 13 5.3.1 implement eye-ri vision implement rank order filter perform naiv sort-and-select method optim algorithm appropri binari filter. unfortunately, eye-ri provid sort algorithm implement q-eye, binari rank filter avail eros dilation. result, rest binari rank filter need deriv morpholog operations. accord wendt et al. [18], binari rank filter repres posit boolean function (pbf). instance, eros () dilat () binari sequenc x = (x1, x2, , xn ) express follow pbfs: (x) = x1x2 xn , (11) (x) = x1 + x2 + + xn , (12) addit repres oper multipl operation. accord [4], pbf binari rank-ord filter implement sum-of-products: rof(r)(x) = 1n1<n2<<nr6n xn1xn2 xnr , (13) indic n1, n2, , nr defin set combin meet inequ 1 n1 < n2 < < nr 6 n . combin (11) (13), rewrit follows: rof(r)(x) = 1n1<n2<<nr6n (xn1xn2 xnr). (14) result, product term pbf implement erosion, output ad yield rank filter desired. number eros requir deriv r-th rank (a) (b) (c) 0 64 128 192 255 0 2 4 103 f q u e n c y (d) 0 64 128 192 255 0 1 2 3 4 103 f q u e n c y (e) 0 64 128 192 255 0 0.5 1 1.5 2 103 f q u e n c y (f) fig. 7 test imag with: (a) low entropi (5.2 bits), (b) medium entropi (6.2 bits), (c) high entropi (7.6 bits). histogram imag depict (d), (e), (f), respectively. tabl 3 number eros oper requir deriv rof 5-point neighborhood. number eros rank order filter ( 5 r ) dualiti rof(1)(dilation) 5 1 rof(2) 10 5 rof(3)(median) 10 10 rof(4) 5 5 rof(5)(erosion) 1 1 14 andr fras-velazquez et al. 100 200 300 400 0 64 128 192 3 255 8 width se (pixels) # o f b p la n e e ro s io n s low entropi / oa medium entropi / oa high entropi / oa / ga (a) 50 100 150 200 250 0 15 30 45 60 3 7.27 width se (pixels) p ro c e s s g ti m e (m s ) low entropi / oa medium entropi / oa high entropi / oa / ga (b) fig. 8 (a) number bitplan erosions, (b) process time requir filter imag low, medium, high entropi squar structur element (se) differ width. result provid gener algorithm (ga) optim algorithm (oa). 2 3 4 5 6 7 8 0 10 20 30 40 50 60 70 80 entropi (bits) p ro c e ss g ti m e (m s) 1st rof (dilation) 2nd rof 3rd rof (median) 4th rof 5th rof (erosion) fig. 9 rof perform eye-ri vision system. filter determin binomi coeffici ( n r ) , n number element structur element. tabl 3, number eros requir rank-ord filter structur element size 5. also, tabl show number eros r < 3 reduc dualiti properti [10], state rof(r)(x) = rof(nr+1)(x). therefore, rof(1) deriv term rof(5), rof(2) deriv term rof(4). particular, number eros ne dualiti properti comput follow ne = {( n nr+1 ) , 1 r n+1 2 ,( n r ) , n+1 2 < r n. (15) evalu process time rank-ord filter stack filter algorithm, filter imag depict fig. 7(c) cross-shap structur element 5 points. also, test algorithm imag differ entropi values. imag obtain linearli map imag differ dynam rang run 1 255 grai tones. perform 5 possibl rank filter shown fig. 9. general, process time decreas imag entropi decreases. behavior previous discuss sect. 5.2 case erosion. now, rank-ord filter follow similar behavior. fig. 9, low-entropi imag synthet imag process 20 ms entropi usual 5 bits. hand, natur imag entropi 5 8 bits, give process time 15 80 ms approximately. particular, note curv dual filter erosion/dil rof(2)/rof(4) similar performance. expect dual rank filter requir number erosions, shown tabl 3. moreover, process time median filter slower filter requir binari hierarch stack filtering: bitplane-bas algorithm massiv parallel processor 15 erosions. therefore, larger structur element used, gap time median eros filter larger. summary, stack filter algorithm allow implement type rank-ord filter base bitplan eros direct pbf implementation. moreover, integr optim criteria algorithm, reduc comput time depend imag distribut compromis qualiti filter image. 6 conclus work, propos stack filter algorithm base imag bitwis decomposit smart camera 2d-arrai imag processor. thank hierarch structure, algorithm priorit process inform bitplan filter faster inform bitplanes. result, approxim stack filter imag skip comput inform bitplan significantli compromis qualiti output image, reduc process time half. hand, optim algorithm exhibit close relationship process time imag distribut comput low-entropi imag 5 time faster high-entropi images. interest featur approach drastic reduc process time larg structur elements. featur algorithm attract applic need run real-time. deriv equat (5) bitwis decomposit function, state (2), express term floor function modulo oper x mod y = x y bx/yc ident b bx/pc/qc = bx/pqc follow bk = 2k 2 2k+1 . (16) general, floor function staircas shape, step express term threshold functions. therefore, state p = j j ( tjp t(j+1)p ) , (17) p integ number determin stair width. consequently, floor function (16) express 2k = nk j=0 j ( tj2k t(j+1)2k ) , (18) 2k+1 = nk+1 j=0 j ( tj2k+1 t(j+1)2k+1 ) , (19) nk = 2 kk 1 k repres bit depth image. stair width (19) time larger (18), indic j j point differ threshold levels. therefore, us common index, express (18) index j follow 2k = nk+1 j=0 2j ( tj2k+1 t(2j+1)2k ) + (2j + 1) ( t(2j+1)2k t(j+1)2k+1 ) . (20) substitut (19) (20) (16) obtain relat decomposit bk = nk+1 j=0 t(2j+1)2k t(j+1)2k+1 . (21) 16 andr fras-velazquez et al. equivalently, express relat term boolean oper shown bk = nk+1 j=0 ( t(2j+1)2k t(j+1)2k+1 ) . (22) b deriv equat (6) state (1), threshold function base comparison imag grai level `. equal comparator, hand, fundament oper defin shown c`(n,m) = { 1, i(n,m) = `, 0, otherwise. (23) appli bitwis decomposit `, (bk1, ..., b0)2 (k1,`, ..., 0,`)2, respectively. compar k bit level decomposition, express equal compar follow c`(n,m) = k1 k=0 bk(n,m) k,`. (24) base equal comparison reformul threshold function (1) shown tl(n,m) = 2k1 `=l c`(n,m), (25) c` substitut (24) lead tl(n,m) = 2k1 `=l k1 k=0 (bk(n,m) k,`) . (26) boolean function canon form sum product (sop) [13], mini- mize yield simplifi representation. follow paragraphs, perform minimiza- tion (26) assum tl return minim express fl(bk1, bk2, . . . , b0) sum-of-product representation. way, start appli shannon expans theorem [14] fl follow fl(bk1, bk2, . . . , b0) = (bk1 fl(1, bk2, . . . , b0)) (bk1 fl(0, bk2, . . . , b0)) , (27) 1 0 repres bitplan on zeros, respectively. express reduc possibl cases: case 1. l < 2k1, fl(1, bk2, . . . , b0) = 1 unit theorem [13]. result, reduc (27) fl(bk1, bk2, . . . , b0) = bk1(bk1fl(0, bk2, . . . , b0)), us elimin theorem [13] fl(bk1, bk2, . . . , b0) = bk1 fl(0, bk2, . . . , b0). (28) case 2. l 2k1, fl(0, bk2, . . . , b0) = 0. case, equat (27) reduc fl(bk1, bk2, . . . , b0) = bk1 fl(1, bk2, . . . , b0). (29) hierarch stack filtering: bitplane-bas algorithm massiv parallel processor 17 gather (28) (29) singl function, express (27) follow tl = { bk1 fl(0, bk2, . . . , b0), k1 = 0, bk1 fl(1, bk2, . . . , b0), k1 = 1, (30) k1 signific bit l given (l)10 = (k1k2...0)2. note k1 = 0 impli l < 2k1, k1 = 1 impli l 2k1. piecewis function redefin compactli follow tl = bk1 ./ k1 fl(k1, bk2, . . . , b0), (31) k1 repres bitplan zero on depend valu k1, bow tie oper defin ./ x = { , x = 0, , x = 1. (32) express (31) work appli shannon expans theorem fl(k1, bk2, . . . , b0), lead fl(k1, bk2, . . . , b0) = (bk2 fl(k1,1, bk3, . . . , b0)) (bk2 fl(k1,0, bk3, . . . , b0)) . (33) express simplifi possibl cases: case 1. l < 2k2, fl(0,1, bk3, . . . , b0) = 1, substitut (33) fl(0, bk2, . . . , b0) = bk2 fl(0,0, bk3, . . . , b0). (34) case 2. l 2k2, fl(0,0, bk3, . . . , b0) = 0, reduc (33) fl(0, bk2, . . . , b0) = bk2 fl(0,1, bk3, . . . , b0). (35) case 3. l < 3 2k2, fl(1,1, bk3, . . . , b0) = 1, expans simplifi fl(1, bk2, . . . , b0) = bk2 fl(1,0, bk3, . . . , b0). (36) case 4. l 3 2k2, fl(1,0, bk3, . . . , b0) = 0, substitut (33) return fl(1, bk2, . . . , b0) = bk2 fl(1,1, bk3, . . . , b0). (37) case follow form: tl = (bk1 ./ k1 (bk2 ./ k2 fl(k1,k1, bk3, . . . , b0))) (38) light (31) (38), easili deduc shannon expans follow tl = (bk1 ./ k1 (bk2 ./ k2 (b0 ./ 0 fl(k1,k2, . . . ,0)))) (39) given fl(k1,k2, . . . ,0) = 1, equat (39) simplifi signific bit l set zero. instance, z number signific bit l set zero, z1 = z2 = = 0 = 0 rightmost (39) reduc follow bz1 bz2 1 = 1. finally, minim sum product state (26) shown tl = (bk1 ./ k1 (bk2 ./ k2 (bkq+1 ./ kq+1 bkq))) (40) q = k z. acknowledg work support imec flemish fund scientif research (fwo), project tec2016-75976-r, financ spanish ministerio economa y competitividad european region develop fund (erdf) 18 andr fras-velazquez et al. refer 1. abbo, a.a., kleihorst, r.p., schueler, b.: xetal-ii: low-pow massively-parallel processor video scene analysis. signal process system 62(1), 1727 (2011) 2. avedillo, m., quintana, j., alami, h., jimenez-calderon, a.: practic parallel architectur stack filters. journal vlsi signal process system signal, imag video technolog 38(2), 91100 (2004) 3. chakrabarti, c., lucke, l.: vlsi architectur weight order statist (wos) filters. in: ieee inter- nation symposium circuit system (iscas), vol. 2, pp. 320323 vol.2 (1998) 4. chen, k.: bit-seri realiz class nonlinear filter base posit boolean functions. ieee transact circuit system 36(6), 785794 (1989) 5. droogenbroeck, m., buckley, m.: morpholog eros openings: fast algorithm base anchors. journal mathemat imag vision 22(2-3), 121142 (2005) 6. fras-velazquez, a., morros, j.: gray-scal eros algorithm base imag bitwis decomposition: ap- plicat focal plane processors. in: ieee intern confer acoustics, speech signal processing, icassp, pp. 845848 (2009) 7. fras-velazquez, a., philips, w.: bit-plan stack filter algorithm focal plane processors. in: ieee intern confer imag process icip, pp. 37413744. ieee (2010) 8. gevorkian, d., egiazarian, k., agaian, s., astola, j., vainio, o.: parallel algorithm vlsi architectur stack filter fibonacci p-codes. ieee transact signal processing, 43(1), 286295 (1995) 9. gonzalez, r.c., woods, r.e.: digit imag processing. prentice-hall, inc. (2006) 10. maragos, p., schafer, r.: morpholog filterspart ii: relat median, order-statistic, stack filters. ieee transact acoustics, speech signal process 35(8), 11701184 (1987) 11. mertzios, b.g., tsirikolias, k.: coordin logic filter applic imag process pattern recognition. circuits, system signal process 17(4), 517538 (1998) 12. rodrguez-vazquez, a., domnguez-castro, r., jimenez-garrido, f., morillas, s., listan, j., alba, l., utrera, c., espejo, s., romay, r.: eye-ri cmo vision system. in: analog circuit design, pp. 1532. springer netherland (2008) 13. roth jr, c., kinney, l.: fundament logic design. cengag learn (2013) 14. shannon, c., et al.: synthesi two-termin switch circuits. bell tech. journal 28(1), 5998 (1949) 15. shi, y.: smart camera machin vision. in: smart cameras, pp. 283303. springer (2010) 16. spiliotis, i., boutalis, y.: parameter real-tim moment comput grai imag block tech- niques. journal real-tim imag process 6(2), 8191 (2011) 17. urbach, e., wilkinson, m.h.f.: effici 2-d grayscal morpholog transform arbitrari flat structur elements. ieee transact imag process 17(1), 18 (2008) 18. wendt, p., coyle, e., gallagh n.c., j.: stack filters. ieee transact acoustics, speech signal process 34(4), 898911 (1986) 19. wu, c., aghajan, h., kleihorst, r.: map vision algorithm simd architectur smart cameras. in: acm/iee intern confer distribut smart cameras, pp. 2734 (2007) 20. zarandy, a.: focal-plan sensor-processor chips. springer (2011) 21. zivkovic, z.: wireless smart camera network real-tim human 3d pose reconstruction. vision imag understand 114(11), 1215 1222 (2010) 22. zivkovic, z., kleihorst, r.: chapter 21 - smart camera wireless camera networks: architectur overview. in: h. aghajan, a. cavallaro (eds.) multi-camera networks, pp. 497 510. academ press, oxford (2009) adpc047.tmp upcommon portal del coneix obert la upc 11tu aquesta s una cpia la versi author final draft d'un articl publicat la revista journal real-tim imag processing. ________________________________________________ articl publicat / publish paper: