

























































Space-Time Balancing Domain Decomposition | SIAM Journal on Scientific Computing | Vol. 39, No. 2 | Society for Industrial and Applied Mathematics


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

SIAM J. SCI. COMPUT. c© 2017 Society for Industrial and Applied Mathematics
Vol. 39, No. 2, pp. C194–C213

SPACE-TIME BALANCING DOMAIN DECOMPOSITION∗

SANTIAGO BADIA† AND MARC OLM†

Abstract. In this work, we propose two-level space-time domain decomposition preconditioners
for parabolic problems discretized using finite elements. They are motivated as an extension to
space-time of balancing domain decomposition by constraints preconditioners. The key ingredients
to be defined are the subassembled space and operator, the coarse degrees of freedom (DOFs) in
which we want to enforce continuity among subdomains at the preconditioner level, and the transfer
operator from the subassembled to the original finite element space. With regard to the subassembled
operator, a perturbation of the time derivative is needed to end up with a well-posed preconditioner.
The set of coarse DOFs includes the time average (at the space-time subdomain) of classical space
constraints plus new constraints between consecutive subdomains in time. Numerical experiments
show that the proposed schemes are weakly scalable in time, i.e., we can efficiently exploit increasing
computational resources to solve more time steps in the same total elapsed time. Further, the scheme
is also weakly space-time scalable, since it leads to asymptotically constant iterations when solving
larger problems both in space and time. Excellent wall clock time weak scalability is achieved for
space-time parallel solvers on some thousands of cores.

Key words. space-time parallelism, domain decomposition, BDDC, preconditioning, scalability

AMS subject classifications. 65N55, 65N22, 65F08

DOI. 10.1137/16M1074266

1. Introduction. At the beginning of the next decade, supercomputers are ex-
pected to reach a peak performance of one exaflop/s, which implies a 100 times
improvement with respect to current supercomputers. This improvement will not be
based on faster processors, but on a much larger number of processors (in a broad
sense). This situation will certainly have an impact in large scale computational sci-
ence and engineering. Parallel algorithms will be required to exhibit much higher
levels of concurrency, keeping good scalability properties.

In mesh-based implicit simulations, e.g., finite element (FE), finite volume, or
finite difference methods, one ends up with a linear system to be solved. The linear
system solve is a bottleneck of the simulation pipeline and weakly scalable algorithms
require complex mathematical approaches, like algebraic multigrid (AMG) or multi-
level domain decomposition (DD) techniques. When dealing with transient problems,
since information always moves forward in time, one can exploit sequentiality. At
every time step one has to solve a spatial problem before proceeding to the next step
and parallelism can be exploited at the linear system solve. Although parallel-in-time
methods are becoming popular, the sequential-in-time approach is the standard pro-
cedure in scientific simulations. However, the tremendous amount of parallelism to be

∗Submitted to the journal’s Software and High-Performance Computing section May 9, 2016;
accepted for publication (in revised form) January 11, 2017; published electronically April 25, 2017.

http://www.siam.org/journals/sisc/39-2/M107426.html
Funding: This work was by the European Research Council under the FP7 Programme Ideas

through the Starting Grant 258443 - COMFUS: Computational Methods for Fusion Technology
and the FP7 NUMEXAS project under grant agreement 611636. The work of the first author was
supported by the Catalan Government through the ICREA Acadèmia Research Program. The work
of the second author was supported by the Agència de Gestió i d’Ajuts Universitaris i de Recerca,
under the FI-AGAUR 2015 grant.
†Centre Internacional de Mètodes Numèrics a l’Enginyeria (CIMNE), Parc Mediterrani de la

Tecnologia, UPC, Esteve Terradas 5, 08860 Castelldefels, Spain and Universitat Politècnica de
Catalunya, Jordi Girona 1-3, Edifici C1, 08034 Barcelona, Spain (sbadia@cimne.upc.edu, molm@
cimne.upc.edu).

C194

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp

http://www.siam.org/journals/sisc/39-2/M107426.html
mailto:sbadia@cimne.upc.edu
mailto:molm@cimne.upc.edu
mailto:molm@cimne.upc.edu


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

SPACE-TIME BALANCING DOMAIN DECOMPOSITION C195

exploited in the near future certainly motivates changing this paradigm, since further
concurrency opportunities must be sought.

In transient simulations, a natural way to go is to exploit concurrency not only in
space but also in time. The idea is to develop space-time solvers that do not exploit
sequentiality (at least at the global level) and thus provide the solution in space at
all time values in one shot. Space-time parallelism is a topic that is receiving rapidly
increasing attention. Different iterative methods have been considered so far. One
approach is to use the Parareal method [16], which is a time-only parallel algorithm,
combined with a parallel space preconditioner (see, e.g., [13]). Another space-time
algorithm is PFASST [11, 19], which combines a spectral deferred correction time
integration with a nonlinear multigrid spatial solver; the viability of the PFASST
method has been proved in [20] at JUQUEEN. Weakly scalable space-time AMG
methods can be found in [14, 23, 12].

The multilevel balancing DD by constraints (BDDC) preconditioner [18, 22] has
recently been proved to be an excellent candidate for extreme scale simulations in [4],
where a recursive implementation that permits overlapping among communication and
computation at all levels has scaled up to almost half a million cores and two million
subdomains (MPI tasks), for both structured and unstructured meshes with tens of
billions of elements. The key ingredient of these methods relies on the definition of a
FE space with relaxed interelement continuity. These spaces are defined by choosing
the quantities to be continuous among processors, i.e., the coarse degrees of freedom
(DOFs) [9]. As far as we know, scalable DD methods in space-time have not been
considered so far.

In this work, we develop weakly scalable space-time preconditioners based on
BDDC methods. In order to do that, we extend the key ingredients in the space-
parallel BDDC framework, namely, the subassembled space and operator, coarse
DOFs, and transfer operators, to space-time. We prove that the resulting method
only involves a set of well-posed problems, and time causality can still be exploited
at the local level. We have solved a set of linear and nonlinear problems that show
the excellent weak scalability of the proposed preconditioners.

The outline of the article is as follows. In section 2 we set the problem and
introduce notation. In section 3 we introduce the classical space-parallel BDDC pre-
conditioners. In section 4 we develop space-time BDDC (STBDDC) preconditioners.
In section 5 we present a detailed set of numerical experiments showing the scalability
properties of the proposed methods. Finally, in section 6 we draw some conclusions.

2. Problem setting. In this section, we introduce the problem to be solved,
the partition of the domain in space and time, and the space and time discretization.
In what follows, calligraphic letters are used for operators. M denotes mass matrix
operators related to the time derivative discretization, K is used for the rest of the
terms in the PDE operator, and A is used for the sum of these two operators. Given an
operator A, we will use the notation A(u, v) .= 〈Au, v〉. Uppercase letters (V, . . .) are
used for (FE-type) functional spaces whereas functions are represented by lowercase
letters (v, . . .). We use classical functional analysis notation for Sobolev spaces.

2.1. Domain partitions. We consider a bounded space-time domain Ω×(0, T ],
where Ω is an open polyhedral domain Ω ⊂ Rd, d being the space dimension. Let us
construct two partitions of Ω, a fine partition into elements and a coarse partition into
subdomains. The partition of Ω into elements is represented by θ. In space, elements
e ∈ θ are tetrahedra/hexahedra for d = 3 or triangles/quadrilaterals for d = 2. The
coarse partition Θ of Ω into subdomains is obtained by aggregation of elements in θ,

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

C196 SANTIAGO BADIA AND MARC OLM

i.e., there is an element partition θω
.= {e ∈ θ : e ⊂ ω} ⊂ θ for any ω ∈ Θ. The

interface of the subdomain partition is Γ .= ∪ω∈Θ∂ω \ ∂Ω.
For the time interval (0, T ], we define a time partition {0 = t0, t1, . . . , tK = T}

into K time elements. We denote the kth element by δk
.= (tk−1, tk] for k = 1, . . . ,K.

2.2. Space-time discretization. Let us consider as a model problem the fol-
lowing transient convection-diffusion–reaction (CDR) equation: find u ∈ H1(Ω) such
that

∂tu−∇ · ν∇u+ β · ∇u+ σu = f on Ω, almost everywhere in (0, T ],(1)
u = g in ∂Ω, u(0, x) = u0,

where ν and σ are positive constants, β ∈ Rd, and f ∈ H−1(Ω). We supplement this
system with the initial condition u(0) = u0. Homogeneous Dirichlet data are assumed
for the sake of clarity in the exposition, but their extension to the general case is
obvious. Besides, let us consider β = 0 and σ = 0 for simplicity in the exposition of
the algorithm. In section 5 we will take a nonlinear viscosity ν(u) = ν0|∇u|p (with
p ≥ 0 and ν0 > 0), i.e., the transient p-Laplacian problem.

For the space discretization, we use H1-conforming FE spaces on conforming
meshes with strong imposition of Dirichlet conditions. The discontinuous Galerkin
(DG) case will not be considered in this work, but we refer to [10] for the definition
of BDDC methods for DG discretizations. We define V̄ ⊂ H10 (Ω) as the global FE
space related to the FE mesh θ. Further, we define the FE-wise operators

Me(u, v)
.=
∫
e

uv, Ke(u, v)
.=
∫
e

ν∇u · ∇v,

Ae(u, v)
.=Me(u, v) + |δk|Ke(u, v).

The global FE problem Ā : V̄ → V̄ can be written as the sum of element contribu-
tions, i.e.,

Ā(u, v) .=
∑
e∈θ

Ae(u, v) for u, v ∈ V̄ (analogously for M̄ and K̄).

In time, we make use of a collocation-type method of lines. For the sake of clarity,
we will use the backward-Euler time integration scheme. In any case, the resulting
preconditioner can readily be applied to any θ-method or Runge–Kutta method. We
are interested in solving the following fully discrete system: given u(t0) = 0, find at
every time step k = 1, . . . ,K the solution u(tk) ∈ V̄ of

(2) Āu(tk) = M̄u(tk) + |δk|K̄u(tk) = ḡ(tk) for any v ∈ V̄ ,

with ḡ(tk) .= |δk|f̄(tk) +M̄u(tk−1) ∈ V̄ ′, where V̄ ′ denotes the dual space of V̄ . Non-
homogeneous boundary conditions can be enforced by simply modifying the right-
hand side at t1, i.e., ḡ(t1) .= |δk|f̄(t1) + M̄u0 ∈ V̄ ′. Such imposition of boundary
conditions, i.e., by enforcing homogeneous conditions in the FE space plus the mod-
ification of the right-hand side, is better suited for the space-time framework. (We
note that this is the way strong Dirichlet boundary conditions are imposed in FE
codes.)

3. Space BDDC preconditioning. In this section, we present first a parallel
solver for the transient problem (2), which combines a sequential-in-time approach

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

SPACE-TIME BALANCING DOMAIN DECOMPOSITION C197

with a space-parallel BDDC preconditioned Krylov solver at every time step [9]. It
will serve to introduce space-parallel BDDC methods and related concepts that will
be required in the space-time section. BDDC preconditioners involve the definition of
three key ingredients: (1) a subassembled problem that involves independent subdo-
main corrections, (2) a set of coarse DOFs and the corresponding subspace of functions
with continuous coarse DOFs among subdomains, and (3) the interior correction and
transfer operators. Let us elaborate these ingredients.

3.1. Subassembled problem. Nonoverlapping DD preconditioners rely on the
definition of a subassembled FE problem, in which contributions between subdo-
mains have not been assembled. In order to do so, at every subdomain ω ∈ Θ,
we consider the FE space Vω associated with the element partition θω with homo-
geneous boundary conditions on ∂ω ∩ ∂Ω. One can define the subdomain operator
Aω(u, v) =

∑
e∈θω Ae(u, v), for u, v ∈ Vω (analogously forMω and Kω).

Subdomain spaces lead to the subassembled space of functions V .= Πω∈ΘVω. For
any u ∈ V , we define its restriction to a subdomain ω ∈ Θ as uω. Any function u ∈ V
can then be represented by its unique decomposition into subdomain functions as
{uω ∈ Vω}ω∈Θ. We also define the subassembled operator A(u, v)

.= Πω∈ΘAω(uω, vω)
(analogously forM and K).

With these definitions, V̄ can be understood as the subspace of functions in V that
are continuous on the interface Γ, and Ā can be interpreted as the Galerkin projection
of A onto V̄ . We note that θ and the FE type defines V̄ , whereas Θ is also required
to define the local spaces {Vω}ω∈Θ and the subassembled space V , respectively.

At this point, we can state the following subassembled problem: given g ∈ V ′,
find u ∈ V such that

Aωuω =Mωuω + |δk|Kωuω = gω, ω ∈ Θ.(3)

With the previous notation, we can write the subassembled problem in a compact
manner as Au = g.

3.2. Coarse DOFs. A key ingredient in DD preconditioners is to classify the
set of nodes of the FE space V̄ . The interface ∂e of every FE in the mesh θ can
be decomposed into vertices, edges, and faces. By a simple classification of these
entities, based on the set of subdomains that contain them, one can also split the
interface Γ into faces, edges, and vertices (at the subdomain level), that will be called
geometrical objects. We represent the set of geometrical objects by Λ. In all cases,
edges and faces are open sets in their corresponding dimension. By construction,
faces belong to two subdomains and edges belong to more than two subdomains in
three-dimensional problems. This classification of Ω into objects automatically leads
to a partition of interface DOFs into DOF objects, due to the fact that every DOF in
an FE does belong to only one geometrical entity. These definitions are heavily used
in DD preconditioners (see, e.g., [21, p. 88]).

Next, we associate with some (or all) of these geometrical objects a coarse DOF.
In BDDC methods, we usually take as coarse DOFs, mean values on a subset of
objects ΛO. Typical choices of ΛO are ΛO

.= ΛC , when only corners are considered,
ΛO

.= ΛC ∪ ΛE , when corners and edges are considered, or ΛO
.= Λ, when corners,

edges, and faces are considered. These choices lead to three common variants of the
BDDC method referred as BDDC(c), BDDC(ce), and BDDC(cef), respectively. This
classification of DOFs into objects can be restricted to any subdomain ω ∈ Θ, leading
to the set of subdomain objects ΛO(ω).

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

C198 SANTIAGO BADIA AND MARC OLM

With the classification of the interface nodes and the choice of the objects in ΛO,
we can define the coarse DOFs and the corresponding BDDC space. Given an object
λ ∈ ΛO(ω), let us define its restriction operator τωλ on a function u ∈ Vω as follows:
τωλ (u)(ξ) = u(ξ) for a node ξ that belongs to the geometrical object λ, and zero
otherwise. We define the BDDC space Ṽ ⊂ V as the subspace of functions v ∈ V
such that the constraint

(4)
∫
λ

τωλ (vω) is identical for all ω ∈ neigh(λ),

where neigh(λ) stands for the set of subdomains that contain the object λ. (The
integral on λ is just the value at the vertex, when λ is a vertex.) Thus, every λ ∈ ΛO
defines a coarse DOF value (4) that is continuous among subdomains. Further, we
can define the BDDC operator Ã as the Galerkin projection of A onto Ṽ .

3.3. Transfer operator. The next step is to define a transfer operator from
the subassembled space V to the continuous space V̄ . The transfer operator is the
composition of a weighting operator and a harmonic extension operator.

1. The weighting operatorW takes a function u ∈ V and computes mean values
on interface nodes, i.e.,

(5) Wu(ξ) .=
∑
ω∈neigh(ξ) uω(ξ)
|neigh(ξ)|

,

at every node ξ of the FE mesh θ, where neigh(ξ) stands for the set of sub-
domains that contain the node ξ. It leads to a continuous function Wu ∈ V̄ .
It is clear that this operator only modifies the DOFs on the interface. Other
choices can be defined for nonconstant physical coefficients.

2. Next, let us define the bubble space V0
.= {v ∈ V : v = 0 on Γ} and the

Galerkin projection A0 of A onto V0. We also define the trivial injection I0
from V0 to V̄ . The harmonic extension reads as Ev

.= (I−I0A−10 I
T
0 Ā)v. The

computation ofA−10 involves solving problem (3) with homogeneous boundary
conditions on Γ. This operator corrects interior DOFs only.

The transfer operator Q : V → V̄ is defined as Q .= EW.
3.4. Space-parallel preconditioner. With all these ingredients, we are now

in position to define the BDDC preconditioner. This preconditioner is an additive
Schwarz preconditioner (see, e.g., [21, Chap. 2]), with corrections in V0 and the BDDC
correction in Ṽ with the transfer Q. As a result, the BDDC preconditioner reads as

(6) B .= I0A−10 I
T
0 +QÃ

−1QT .

4. Space-time BDDC preconditioning. As commented on in section 1, the
huge amounts of parallelism of future supercomputers will require scientists to seek
additional concurrency. In the simulation of (2) using the space-parallel preconditioner
(6), we are using a sequential-in-time approach by exploiting time causality. The
objective of this section is to solve (2) at all time steps in one shot, by using a
space-time–parallel preconditioner and a Krylov subspace method for nonsymmetric
problems. In order to do so, we want to extend the BDDC framework to space-time.

In the following, we will use bold symbols, e.g., u, V , or A, for space-time
functions, functional spaces, and operators, respectively. I is the identity matrix,
which can have a different dimension in different appearances.

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

SPACE-TIME BALANCING DOMAIN DECOMPOSITION C199

First, we must start with a space-time partition of Ω × (0, T ]. We consider a
time subdomain partition by aggregation of time elements, {0 = T0, T1, . . . , TN = T}
into N time subdomains. We denote the nth subdomain as ∆n

.= (Tn−1, Tn] for
n = 1, . . . , N . By definition, ∆n admits a partition into Kn time elements {Tn−1 =
t0n, . . . , t

Kn
n = Tn}. Next, we define the space-time subdomain partition as the Carte-

sian product of the space subdomain partition Θ and the time subdomain partition
defined above; for every space subdomain ω and time subdomain ∆n, we have the
space-time subdomain ωn

.= ω ×∆n.
The global space of continuous space-time functions in which we want to solve

(2) is the FE space V̄ of spatial functions times K + 1 time steps, i.e., V̄ .= [V̄ ]K+1,
constrained to zero initial condition. Thus, by definition, u ∈ V̄ can be expressed
as u = (u(t0) = 0, u(t1), . . . , u(tK)), and the original problem (2) (for all time step
values) can be stated in a compact manner as

(7) Āu = f̄ in V̄ .

In order to define the STBDDC preconditioner for (7), we will use the same structure
as above, extending the three ingredients in section 3 to the space-time case.

4.1. Subassembled problem. Using the space-time partition above, the trial
(and test) space for the local space-time subdomain ωn is V ωn

.= [Vω]Kn+1. Thus,
by definition, uωn ∈ V ωn can be expressed as uωn = (uω(t0n), . . . , uω(tKnn )). Anal-
ogously, the subassembled space is V .= ΠNn=1Πω∈ΘV ωn . Let us note that, using
these definitions, functions in V have duplicated values at Tn for n = 1, . . . , N − 1.
The global space of continuous space-time functions V̄ can be understood as the sub-
space of functions in V that are continuous on the space-time interface Γ × Tn for
n = 1, . . . , N − 1.

Now, we propose the following subassembled problem in V : find the solution
u ∈ V such that, at every ωn in the space-time partition, it satisfies the space-time
problem

Kn∑
k=1

{
Mω(uω(tkn)− uω(t

k−1
n ), vω(t

k
n)) + |δ

k
n|Kω(uω(t

k
n), vω(t

k
n))
}

(8)

+
(1−Kr1,n)

2
Mω(uω(t0n), vω(t

0
n))−

(1−KrN,n)
2

Mω(uω(tKnn ), vω(t
Kn
n ))

=
Kn∑
k=1
|δkn|fω(t

k
n)(vω(t

Kn
n ))

for any v ∈ V , where Kri,j is the Kronecker delta. Note that the perturbation terms
in the second line of (8) are introduced only on time interfaces, i.e., in the first and
last time steps of the time subinterval, as long as the corresponding time step is not
a time domain boundary. For subdomains with n = 1, and thus t0n = 0, the first
stabilization term vanishes. Analogously, the second stabilization term vanishes for
n = N and tKnn = T . We can write (8) in a compact manner as

(9) Au = f in V .

The motivation of the perturbation terms is to have a positive semidefinite sub-
assembled operator. In any case, the perturbation terms are such that, after inter-
subdomain assembly, we recover the original space, i.e., A is in fact a subassembled
operator with respect to Ā, since interface perturbations between subdomains cancel
out. We prove that these properties hold.

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

C200 SANTIAGO BADIA AND MARC OLM

Proposition 4.1. The Galerkin projection of the subassembled space-time prob-
lem (9) onto V̄ reduces to the original problem (7). Further, the subassembled operator
A is positive definite.

Proof. In order to prove the equivalence, we need to show that Ā is the Galerkin
projection of A onto V̄ , which amounts to saying that the perturbation terms vanish
for u ∈ V̄ . First, we note that the following equality

N∑
n=1

( (1−Kr1,n)
2

uω(t0n)−
(1−KrN,n)

2
uω(tKnn )

)
= 0

holds for functions that are continuous in time, since uω(t
Kn−1
n−1 ) = uω(t

0
n) for n =

2, . . . , N . On the other hand, multiplying the right hand of (8) against v = u, using
the fact that (a− b)a = 12 (a

2 − b2) + 12 (a− b)
2, we get

(10) A(u,u) =
1
2
‖u(T )‖2 +

N∑
n=1

K∑
k=1

(
1
2
‖u(tkn)− u(t

k−1
n )‖

2 + |δkn|K(u(t
k
n), u(t

k
n))
)
.

Since K is positive semidefinite, A is positive semidefinite. On the other hand, A is
a lower block triangular matrix. Restricted to one subdomain block, it has diagonal
blocks 12Mω at the first time step, Mω + |δk|Kω at intermediate time steps, and
1
2Mω + |δk|Kω at the last time step. Since all these matrices are invertible, A is
nonsingular. Further, AT is an upper triangular nonsingular matrix. As a result, A
is positive definite.

4.2. Coarse DOFs. Let us define the continuity to be enforced among space-
time subdomains. Let us consider a set of space objects ΛO (see section 3). We define
Ṽ ⊂ V as the subspace of functions v ∈ V such that the constraint

(11)
Kn−1∑
k=1
|δkn|

∫
λ

τωλ (vω(t
k
n)) is identical for all ω ∈ neigh(λ),

holds for every λ ∈ ΛO, and

(12)
∫
ω

vω(t0n) =
∫
ω

vω(t
Kn−1
n−1 ) for all ω ∈ Θ, n = 2, . . . , N.

The first set of constraints are the mean values of the space constraints in (4) over time
subintervals ∆n. The second constraint enforces continuity between two consecutive-
in-time subdomains ωn−1 and ωn of the mean value of the function on their cor-
responding space subdomain ω. The Galerkin projection of A onto Ṽ is denoted
by Ã.

Additionally, motivated by a space-time definition of objects, i.e., applying the
object generation above to space-time meshes, we could also enforce the continuity of
the coarse DOFs∫

λ

τωλ (vω(t
0
n)), n = 2, . . . , N, and

∫
λ

τωλ (vω(t
Kn
n )), n = 1, . . . , N − 1,(13)

for every λ ∈ ΛO. Thus, we are enforcing pointwise-in-time (in comparison to the
mean values in (11)) space constraints on time interfaces. Figure 1 illustrates the
resulting space-time set of objects where continuity is to be enforced in a subassembled
space V .

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

SPACE-TIME BALANCING DOMAIN DECOMPOSITION C201

Fig. 1. Continuity to be enforced among space-time subdomains, for the one-dimensional spatial
domain case. The sets of nodes in red are related to the space constraints time averages over time
subintervals in (11), the ones in blue are the space mean value constraints on time interfaces in
(12), and the ones in orange are spatial constraints on time interfaces in (13).

4.3. Transfer operator. Next, we have to define a transfer operator from V
to V̄ , and the concept of harmonic extension in the space-time setting.

1. In order to define the space-time weighting operator, we make use of the
spatial-only definition in (5). Let us define the subdomain restriction of the
weighting operator as Wωu

.= (Wu)ω. We define the space-time weighting
operator restricted to ωn as

(14) Wωnu
.= (Wωu(t

Kn−1
n−1 ),Wωu(t

1
n), . . . ,Wωu(t

Kn
n )),

and W .= ΠNn=1Πω∈ΘWωnuωn . We can observe that this weighting operator
uses the space-only weighting operator in (5), in order to make the functions
continuous in space. On the other hand, on the time interfaces Tn between
subdomains ωn and ωn+1 (for n = 1, . . . , N − 1, where functions in V can
be discontinuous in time) we take the value at the preceding subdomain, i.e.,
ωn. This choice is motivated by the causality of the problem in time.

2. Next, we define the space-time interior correction. In order to do so, we first
define the space-time “bubble” space as V 0, where its local component at
ωn is

vωn = (0, vω(t
1
n), . . . , vω(t

Kn
n )), v(·) ∈ V0.

This definition of V 0 naturally arises from the definition of the weighting
operator (14). The nodes that are enforced to be zero in V 0 are the ones
that are modified by (14). I0 is the trivial injection from V 0 to V̄ and
we denote the Galerkin projection of A as A0. Its inverse involves local
subdomain problems like (8) with zero initial condition and homogeneous
boundary conditions on Γ. Finally, we define the space-time “harmonic”
extension operator as Ev .= (I − I0A−10 I

T
0 Ā)v. Functions v ∈ V̄ such that

Ev = v are denoted as harmonic functions.
We finally define the transfer operator Q : V → V̄ as Q .= EW .

4.4. Space-time–parallel preconditioner. After extending the previous in-
gredients to space-time, we can now define the STBDDC preconditioner as

(15) B .= I0A−10 I
T
0 + QÃ

−1
QT .

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

C202 SANTIAGO BADIA AND MARC OLM

In the following section, we will analyze the quality of B as a preconditioner for Ā.
We are particularly interested in the weak scalability properties of the preconditioner.
Again, this preconditioner can be cast in the additive Schwarz theory.

4.5. Implementation aspects. Let us make some comments about the effi-
cient implementation of the STBDDC preconditioner. We want to solve system (2)
(or, equivalently, (7)) for all time steps in one shot by using a Krylov iterative solver
preconditioned with the STBDDC preconditioner (15). As usual in DD precondition-
ing, it is common to take as initial guess for the Krylov solver the interior correction
u0 = I0A−10 I

T
0 f . In this case, it can be proved by induction that applying a Krylov

method with B as a preconditioner will give at each iterate V 0-orthogonal residuals
of the original problem (7) and harmonic directions (see, e.g., [17]). Thus, the ap-
plication of the BDDC preconditioner applied to r ∈ V ′ such that r ⊥ V 0 can be
simplified as

Br = EWÃ
−1

WTr.

It involves the following steps.
1. Compute s .= WTr. By the definition in (14), the restriction of s = WTr

to ωn is sωn = (0,WTω r(t1n), . . . ,WTω r(tKnn )), whereWω = diag(1/|neigh(ξ)|).
This operation implies nearest neighbor communications only.

2. Compute Ã
−1

s. In order to compute this problem, we first use the following
decomposition of Ṽ into the subspaces Ṽ F and Ṽ C . Ṽ F is the set of functions
that vanish on the coarse DOFs (11)–(13). Ṽ C is the complement of Ṽ F ,
which provides the values on the coarse DOFs. We define Ṽ C as the span of
the columns of Φ, where Φ is the solution of

(16)
[

Aωn Cωn
T

Cωn 0

] [
Φωn
lωn

]
=
[

0
I

]
,

where we have introduced the notation Cωn for the matrix associated with
the coarse DOFs constraints. We can check that (see [5, p. 206] for the
symmetric case) (1) Ṽ F ⊥A Ṽ C , (2) Ṽ = Ṽ F ⊕ Ṽ C . The local problems in
(16) are indefinite (and couple all time steps in one subdomain). In order to
be able to use sequential-in-time local solvers and sparse direct methods for
positive-definite matrices, we propose the following approach (see [9] for the
space-parallel BDDC preconditioner). Using the fact that Aωn is nonsingular
(see Proposition 4.1), we can solve (16) using the Schur complement:

(17) − CωnAωn
−1Cωn

T lωn = I, Φωn = −Aωn
−1Cωn

T lωn .

Further, for nonsymmetric problems (as the space-time problem considered
herein), we also require defining Ṽ

∗
C as the span of the columns of Ψ, where

Ψ is the solution of[
Aωn

T Cωn
T

Cωn 0

] [
Ψωn
lωn

]
=
[

0
I

]
.

This problem is similar to (16), but replacing Aωn by Aωn
T (Aωn

T is an
upper triangular nonsingular matrix from Proposition 4.1). Thus, we can use
the Schur complement approach (as in (17)) to exploit sequentiality (back-
ward in time) for the local problems.

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

SPACE-TIME BALANCING DOMAIN DECOMPOSITION C203

With these spaces, the original problem to be solved, Ãu = s, can be written as
find u = uF + uC ∈ Ṽ , where uF ∈ Ṽ F and uC ∈ Ṽ C satisfy

A(uF ,vF ) + A(uC ,v∗C) = (s,vF ) + (s,v
∗
C) for any vF ∈ Ṽ F , v

∗
C ∈ Ṽ

∗
C ,

where we have used the orthogonality property

A(uF + uC ,vF + v∗C) = A(uF ,vF ) + A(uC ,v
∗
C).

Thus, it involves a fine problem and a coarse problem that are independent. The
computation of the fine problem has the same structure as (16) (with a different
forcing term), and can be computed using the Schur complement approach in (17).
The Petrov–Galerkin-type coarse problem couples all subdomains and is a basis for
having a weakly scalable preconditioner. Its assembly, factorization, and solution is
centralized in one processor or a subset of processors.

Summarizing, the STBDDC preconditioner can be implemented in such a way
that standard sequential-in-time solvers can still be applied for the local problems.
Due to the fact that coarse and fine problems are independent, we can exploit an over-
lapping implementation, in which computations at fine/coarse levels are performed in
parallel. This implementation has been proved to be very effective at extreme scales
for space-parallel BDDC solvers in [2, 4, 3]. The implementation of the STBDDC
preconditioner used in section 5 also exploits this overlapping strategy.

5. Numerical experiments. In this section we evaluate the weak scalability for
the CDR problem (1) of the proposed STBDDC preconditioner, when combined with
the right-preconditioned version of the iterative Krylov-subspace method GMRES.
The STBDDC-GMRES solver is tested with the two-dimensional (2D) CDR PDE
on regular domains. Domains are discretized with structured Q1 FE meshes and
backward-Euler time integration is performed with a constant step size |δk|. As per-
formance metrics, we focus on the number of STBDDC preconditioned GMRES it-
erations required for convergence, and the total computation time. This time will
include both preconditioner setup and the preconditioned iterative solution of the
linear system in all the experiments reported. The nonlinear case is linearized with
a Picard algorithm and a relaxation factor of α = 0.75. The stopping criterion for
the iterative linear solver is the reduction of the initial residual algebraic `2-norm by
a factor 10−6. The nonlinear Picard algorithm stopping criterion is the reduction of
the algebraic `2-norm of the nonlinear residual below 10−3.

The problem to be solved is the CDR problem (1). We may consider the Poisson
problem for β = (0, 0) and σ = 0. Further, we will also tackle the p-Laplacian problem,
by taking the nonlinear viscosity ν(u) = ν0|∇u|p (with p ≥ 0 and ν0 > 0), β = (0, 0),
and σ = 0.

5.1. Experimental framework. The novel techniques proposed in this paper
for the STBDDC-GMRES solver have been implemented in FEMPAR. FEMPAR,
developed by the Large Scale Scientific Computing (LSSC) team at CIMNE-UPC, is
a parallel hybrid OpenMP/MPI, object-oriented software package for the massively
parallel FE simulation of multiphysics problems governed by PDEs. Among other
features, it provides the basic tools for the efficient parallel distributed-memory im-
plementation of substructuring DD solvers [1, 2, 4]. The parallel codes in FEMPAR
heavily use standard computational kernels provided by (highly efficient vendor im-
plementations of) BLAS and LAPACK. Besides, through proper interfaces to several

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

C204 SANTIAGO BADIA AND MARC OLM

third party libraries, the local constrained Neumann problems and the global coarse-
grid problem can be solved via sparse direct solvers. FEMPAR is released under the
GNU GPL v3 license, and is more than 200K lines of Fortran95/2003/2008 code long.
Here, we use the overlapped BDDC implementation proposed in [2], with excellent
scalability properties. It is based on the overlapped computation of coarse and fine
duties. As long as coarse duties can be fully overlapped with fine duties, perfect
weak scalability can be attained. We refer to [2] and [4] for more details. Results
reported in this section were obtained on two different distributed-memory platforms:
the Gottfried complex of the HLRN-III Cray system, located in Hannover (Germany),
and the MareNostrum III, in the Barcelona Supercomputing Centre. In all cases, we
consider a one-to-one mapping among subdomains, cores, and MPI tasks, plus one
additional core for the coarse problem (see [1, 2] for details).

5.2. Weak scalability setting. In computer science parlance, weak scalability
is related to how the solution time varies with the number of processors for a fixed
problem size per processor. When the time remains asymptotically constant, we say
that we have a scalable algorithm. When we consider problems that are obtained
after discretization of differential operators, the concept of weak scalability is suitable
as soon as the relation between the different terms in the (discretization of the) PDE
remains constant in the weak scalability analysis. This is the case in most scalability
analyses of PDE solvers, which usually deal with steady Poisson or linear elasticity
problems. However, the situation becomes more involved as one faces more compli-
cated problems, that combine multiple differential terms of different natures. The
simplest example is the CDR equation (1). One can consider a fixed domain Ω and
fixed physical properties, and produce a weak scalability analysis by increasing the
number of elements (i.e., reducing h) in FEs, and the number of subdomains (i.e.,
reducing H) in the same proportion. However, as we go to larger scales, the prob-
lem to be solved tends to a simple Poisson problem (convective terms are O(1/h)
whereas diffusive terms are O(1/h2)). The same situation happens for space-only
parallelization of transient problems because the CFL changes in the scalability anal-
ysis. This situation has already been identified in [12, 8], leading to what the authors
call CFL-constant scalability. In these simulations, the CFL is constant, but still,
spatial differential terms can change their relative weight in the scalability analysis,
e.g., one keeps the convective CFL, i.e., CFLβ = |β|

|δ|
h
, but not the diffusive CFL,

i.e., CFLν = ν
|δ|
h2

(see [8]).
Weak scalability analysis of PDE solvers should be such that the relative weight

of all the discrete differential operators is kept. To do that, we keep fixed the physical
problem to be solved (boundary conditions, physical properties, etc.), the FE mesh
size h, and the subdomain size H, but increase (by scaling) the physical domain
Ω→ αΩ and, subsequently, the number of subdomains and FEs. Let us consider that
Ω = [0, 1]d, an FE mesh of size h = (1/nh)d, and a subdomain size H = (1/nH)d.
Now, we consider Ω′ = αΩ = [0, α]d, α ∈ N+. The FE partition now must involve αnh
FE partitions per dimension (αdndh FEs) and αnH subdomain partitions per dimension
(αdndH subdomains). It is also possible to apply this approach to unstructured meshes
and space-time domains. Weak scalability in the sense proposed herein is not only
about the capability to solve larger problems but also more complicated ones; e.g., we
keep fixed the local Reynolds or Péclet number or CFLs, but we increase the global
Reynolds or Péclet number, facing not only a larger problem but also a harder one,
in general. We have used this definition of weak scalability for PDE solvers in the
numerical experiments below for time and space-time parallel solvers.

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

SPACE-TIME BALANCING DOMAIN DECOMPOSITION C205

5.3. Weak scalability in time. In this case, the spatial domain is not parti-
tioned and only the time integration is distributed through Pt processors. This fact
leads to enforced continuity of mean values of the function on the spatial domain Ω on
time interfaces, i.e., constraint (12) with ω = Ω. In order to maintain a constant CFL
number, the original time interval (0, T ] is scaled with the number of processors, i.e.,
T ′ = PtT . As a result, using Pt processors we solve a Pt times larger time domain
(and time steps). Note that with this approach neither |δk| nor |∆n| are modified
through the analysis.

5.3.1. Time-parallel Poisson solver. Consider the transient Poisson equa-
tion ((1) with β = (0, 0) and σ = 0) with ν = 1 on the unit square spatial do-
main Ω = [0, 1]2 and T = 1. The source term f is chosen such that u(x, t) =
sin(πx) sin(πy) sin(πt) is the solution of the problem. Homogeneous Dirichlet bound-
ary conditions and zero initial condition are imposed. We perform the weak scalability
analysis of the TBDDC-GMRES solver with element size h = 130 and several values
of Kn =

|∆n|
|δk|

= {10, 15, 30, 60}.
Figure 2 reports the weak scalability analysis of the TBDDC-GMRES solver for

this experiment. While h is kept fixed, we evaluate different values of Kn and |∆n|,
which lead to a wide range of diffusive CFLs, shown in 2(a), 2(b), and 2(c) .

Out of these plots, we can draw some conclusions. First, for a fixed local problem
size and physical coefficients, reducing the diffusive CFL by reducing the time step size
results in more iterations. Second, and most salient, the algorithm is in fact weakly
scalable. In fact, for a fixed local problem size and diffusive CFL, as one increases
the number of processors, i.e., computes more time steps, the number of iterations is
asymptotically constant. In this range, the overlapped fine/coarse strategy leads to
perfect weak scalability for time-parallel solvers too. As a result, this analysis shows
the capability of the method to compute X times more time steps with X times more
cores for the same total elapsed time, which is the main motivation of time parallelism.

5.3.2. Time-parallel CDR solver. Consider now the transient CDR equation
(1) with ν = 10−3 and σ = 10−4 on Ω = [0, 1]2 with homogeneous Dirichlet boundary
conditions and null initial solution. We take T = 110 . In order to show results for
different convective CFL ranges, two convection velocity fields are analyzed, namely,
β = (1, 0) and β = (10, 0). The CFL values shown are those corresponding to the
convective term since it is more restrictive than the diffusive CFL in all the cases
being considered. The Streamline-Upwinding Petrov–Galerkin (SUPG) stabilization
technique is employed (see [6]).

We perform the study with several values of Kn =
|∆n|
|δk|

= {10, 30, 60}, which lead
to different convective CFLs. For the first case (Figure 3), the source term is chosen
such that the function u(x, t) = sin(πx) sin(πy) sin(πt) is the solution of the problem.
For the second test (Figure 4), we take f = 1, with a boundary layer formation.

Out of these plots we can extract the same conclusions from Figures 3 and 4 as
for the Poisson problem. The method is weakly scalable in time for transient CDR
problems.

5.4. Weak scalability in space-time. The STBDDC preconditioner is con-
sidered here, for the set of constraints (11)–(13). In this case, the spatial domain Ω is
scaled by Px and Py in the corresponding directions, where Px = Py in all cases. On
the other hand, the time interval (0, T ] is scaled by Pt, leading to a P = Px×Py ×Pt
partition of the scaled space-time domain PxΩ × Pt(0, T ]. Therefore, the relative
weight of the operators is kept constant through a weak scalability analysis. Local
problem loads will be given by H

h
in space and Kn =

|∆n|
|δk|

in time, i.e., (H
h

)d × |∆n||δk| .

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

C206 SANTIAGO BADIA AND MARC OLM

 0

 1

 2

 3

 4

 5

 6

 7

50 200 500 1000 1500 2000

#
It
e

ra
tio

n
s

#Cores
  Kn=10,  CFLν=48   
  Kn=15,  CFLν=32   

  Kn=30,  CFLν=16   
  Kn=60,  CFLν=8     

 0

 2

 4

 6

 8

 10

 12

 14

 16

50 200 500 1000 1500 2000

W
a

ll 
cl

o
ck

 t
im

e
 (

s)

#Cores
  Kn=10,  CFLν=48   
  Kn=15,  CFLν=32   

  Kn=30,  CFLν=16   
  Kn=60,  CFLν=8     

(a) Iteration counter and computing time for |∆n| = 815 .

 0

 2

 4

 6

 8

 10

 12

 14

50 200 500 1000 1500 2000

#
It

e
ra

tio
n

s

#Cores
  Kn=10,  CFLν=1.5   
  Kn=15,  CFLν=1.0   

  Kn=30,  CFLν=0.5   
  Kn=60,  CFLν=0.25 

 0

 5

 10

 15

 20

 25

50 200 500 1000 1500 2000

W
a

ll 
cl

o
ck

 t
im

e
 (

s)

#Cores
  Kn=10,  CFLν=1.5   
  Kn=15,  CFLν=1.0   

  Kn=30,  CFLν=0.5   
  Kn=60,  CFLν=0.25 

(b) Iteration counter and computing time for |∆n| = 160 .

 0

 10

 20

 30

 40

 50

 60

50 200 500 1000 1500 2000

#
It

e
ra

tio
n
s

#Cores
  Kn=10,  CFLν=0.3   
  Kn=15,  CFLν=0.2   

  Kn=30,  CFLν=0.1   
  Kn=60,  CFLν=0.05 

 0

 10

 20

 30

 40

 50

 60

50 200 500 1000 1500 2000

W
a

ll 
cl

o
ck

 t
im

e
 (

s)

#Cores
  Kn=10,  CFLν=0.3   
  Kn=15,  CFLν=0.2   

  Kn=30,  CFLν=0.1   
  Kn=60,  CFLν=0.05 

(c) Iteration counter and computing time for |∆n| = 1300 .

Fig. 2. Weak scalability for the iterations count (left) and total elapsed time (right) of the
TBDDC-GMRES solver in the solution of the unsteady 2D Poisson problem on HLRN. Fixed ele-
ment size h = 1/30 with time partition on Pt subdomains.

5.4.1. Space-time Poisson solver. Consider the Poisson problem ((1) with
β = (0, 0) and σ = 0) with ν = 1, f = 1, and homogeneous Dirichlet boundary
conditions and zero initial condition. The original spatial domain is Ω = [0, 1]2 while
the original time domain is (0, 0.1].

Figure 5 shows weak scalability results for the STBDDC-GMRES solver. Num-
ber of iterations (left) and total elapsed times (right) have been reported for three
different ratios between spatial and time partitions Px

Pt
in 5(a), 5(b), and 5(c). Also,

at every figure, three different local problem sizes, and thus diffusive CFLs, have been
considered.

The most salient information from these figures is the fact that the scheme is also
scalable in space-time simulations. Here, one is not only solving a larger problem

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

SPACE-TIME BALANCING DOMAIN DECOMPOSITION C207

 0

 2

 4

 6

 8

 10

50 200 500 1000 1500 2000

#
It
e
ra

tio
n
s

#Cores
 Kn=10,  CFLβ=3   Kn=30,  CFLβ=1   Kn=60,  CFLβ=0.5

 0

 2

 4

 6

 8

 10

 12

 14

 16

 18

50 200 500 1000 1500 2000

W
a
ll 

cl
o
ck

 t
im

e
 (

s)

#Cores
Kn=10,  CFLβ=3 Kn=30,  CFLβ=1 Kn=60,  CFLβ=0.5

(a) Iteration counter and computing time with β = (10, 0).

 0

 10

 20

 30

 40

 50

 60

50 200 500 1000 1500 2000

#
It
e
ra

tio
n
s

#Cores
 Kn=10,  CFLβ=0.3   Kn=30,  CFLβ=0.1   Kn=60,  CFLβ=0.05

 0

 10

 20

 30

 40

 50

 60

50 200 500 1000 1500 2000

W
a
ll 

cl
o
ck

 t
im

e
 (

s)

#Cores
Kn=10,  CFLβ=0.3 Kn=30,  CFLβ=0.1 Kn=60,  CFLβ=0.05

(b) Iteration counter and computing time with β = (1, 0).

Fig. 3. Weak scalability for the total elapsed time (right) and number of GMRES iterations
(left) of the TBDDC solver in the solution of the 2D CDR equation on HLRN (sinusoidal solution).
Fixed element size to h = 1/30.

 0

 10

 20

 30

 40

 50

 60

50 200 500 1000 1500 2000

#
It
e
ra

tio
n
s

#Cores
 Kn=10,  CFLβ=0.3   Kn=30,  CFLβ=0.1   Kn=60,  CFLβ=0.05

 0

 10

 20

 30

 40

 50

 60

50 200 500 1000 1500 2000

W
a
ll 

cl
o
ck

 t
im

e
 (

s)

#Cores
Kn=10,  CFLβ=0.3 Kn=30,  CFLβ=0.1 Kn=60,  CFLβ=0.05

Fig. 4. Weak scalability for the total elapsed time (right) and number of GMRES iterations
(left) of the TBDDC solver in the solution of the 2D CDR equation (boundary layer) on HLRN.
Fixed element size to h = 1/30.

in time (as above) but also in space. This result is not surprising since the spatial
BDDC preconditioner is known to be weakly scalable and the time-parallel version
has also been proved to be weakly scalable in section 5.3. The influence of Px

Pt
on

the number of iterations is very mild; also, the effect of the diffusive CFL is mild in
this case. The overlapping strategy is fully effective in the range under consideration,
because perfect weak scalability can be observed. The effect of the diffusive CFL for
a fixed local problem size, obtained by multiplying the viscosity by 10, is reported

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

C208 SANTIAGO BADIA AND MARC OLM

 0

 2

 4

 6

 8

 10

 12

 14

 16

 18

375 1029 1536 2187 3000 3993

#
It
e
ra

tio
n
s

#Cores
   H/h=30 Kn=30,  CFLν=3  
   H/h=40 Kn=40,  CFLν=4  

   H/h=40 Kn=20,  CFLν=8  

 0

 5

 10

 15

 20

 25

 30

 35

 40

375 1029 1536 2187 3000 3993

W
a
ll 

cl
o
ck

 t
im

e
 (

s)

#Cores
  H/h=30 Kn=30,  CFLν=3  
  H/h=40 Kn=40,  CFLν=4  

  H/h=40 Kn=20,  CFLν=8  

(a) Iteration counter and wall clock times for Pt = 3Px

 0

 2

 4

 6

 8

 10

 12

 14

 16

 18

216 512 1000 1728 2744 4096

#
It
e
ra

tio
n
s

#Cores
   H/h=30 Kn=30,  CFLν=3  
   H/h=40 Kn=40,  CFLν=4  

   H/h=40 Kn=20,  CFLν=8  

 0

 5

 10

 15

 20

 25

 30

 35

 40

216 512 1000 1728 2744 4096

W
a
ll 

cl
o
ck

 t
im

e
 (

s)

#Cores
   H/h=30 Kn=30,  CFLν=3  
   H/h=40 Kn=40,  CFLν=4  

   H/h=40 Kn=20,  CFLν=8  

(b) Iteration counter and wall clock times for Pt = Px

 0

 2

 4

 6

 8

 10

 12

 14

 16

243 576 1125 1944 3087 4608

#
It
e
ra

tio
n
s

#Cores
   H/h=30 Kn=30,  CFLν=3  
   H/h=40 Kn=40,  CFLν=4  

   H/h=40 Kn=20,  CFLν=8  

 0

 5

 10

 15

 20

 25

 30

 35

 40

243 576 1125 1944 3087 4608

W
a
ll 

cl
o
ck

 t
im

e
 (

s)

#Cores
   H/h=30 Kn=30,  CFLν=3  
   H/h=40 Kn=40,  CFLν=4  

   H/h=40 Kn=20,  CFLν=8  

(c) Iteration counter and wall clock times for Px = 3Pt

Fig. 5. Weak scalability for the total elapsed time (right) and number of GMRES iterations
(left) of the STBDDC solver in the solution of the 2D Poisson problem on HLRN.

in Figure 6. In this case, a larger diffusive CFL leads to more iterations but weak
scalability is also achieved.

Next, we want to compare the space-time solver against a sequential-in-time ap-
proach. We fix the time step size to |δk| = 10−3 and Hh = 30. Thus, the time interval
is T = K|δk|, when considering K time steps. The sequential approach makes use of
Ps = Px ×Py = 42 processors (space-parallelism only) to solve recursively the spatial
problem for increasing values of K. The space-time approach is using Ps×Pt = 42Pt
processors to solve the same problem, with a local number of time steps Kn = 10.
The motivation for such analysis is to assess the benefit of time parallelism in linear
problems when spatial parallelism cannot be further exploited efficiently due to very
low load per processor.

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

SPACE-TIME BALANCING DOMAIN DECOMPOSITION C209

 0

 5

 10

 15

 20

 25

 30

216 512 1000 1728 2744 4096

#
It
e
ra

tio
n
s

#Cores
  H/h=30 Kn=30, ν=1 ,  CFLν=3   
  H/h=30 Kn=30, ν=10, CFLν=30 

  H/h=40 Kn=40, ν=1 ,  CFLν=8   
  H/h=40 Kn=40, ν=10, CFLν=80 

 0

 5

 10

 15

 20

 25

 30

 35

 40

 45

 50

216 512 1000 1728 2744 4096

W
a
ll 

cl
o
ck

 t
im

e
 (

s)

#Cores
  H/h=30 Kn=30, ν=1 ,  CFLν=3   
  H/h=30 Kn=30, ν=10, CFLν=30 

  H/h=40 Kn=40, ν=1 ,  CFLν=8   
  H/h=40 Kn=40, ν=10, CFLν=80 

Fig. 6. Weak scalability for the total elapsed time (right) and number of GMRES iterations
(left) of the STBDDC solver in the solution of the 2D Poisson problem on HLRN. Partition is done
equally in time and space, i.e., Px = Pt.

 0

 500

 1000

 1500

 2000

 2500

 3000

 3500

 4000

10 25 50 75 100

100 250 500 750 1000

L
o
ca

l s
o
lv

e
s

Pt

K

 Sequential approach  Space-Time approach, Kn=10 

 0

 5

 10

 15

 20

 25

 30

 35

 40

10 25 50 75 100

100 250 500 750 1000

W
a
ll 

cl
o
ck

 t
im

e
 (

s)

Pt

K

 Sequential approach  Space-Time approach, Kn=10 

Fig. 7. Comparison between the sequential and space-time solvers for the transient Poisson
problem on MareNostrum supercomputer. Spatial partition is fixed to Px = Py = 4. The space-time
approach is using P = 42Pt MPI fine-level tasks.

Figure 7 shows the comparison between the sequential approach and the STBDDC
preconditioned space-time solver up to K = 1000 time steps. The theoretical cost of
the sequential approach is proportional to K steps times the elapsed time of the A−1ω
local solve (a preconditioned GMRES iteration). On the other hand, the theoretical
cost of the space-time solver is proportional to the cost of the A−1ωn local space-time
solves, and in turn, Kn times spatial A−1ω local solves (exploiting locally sequentiality
in time). The number of local solves is plotted for both sequential and space-time
approaches in Figure 7(a). The sequential approach shows a linear growth of the
computing time, as expected, since it is solving K times problems in a sequential
fashion. Since the current implementation of space-time preconditioners in FEMPAR
does not exploit local sequentiality in time, we observe a discrepancy between the
intersection of curves in terms of local solves and elapsed time, due to the quadratic
complexity of sparse direct methods. In any case, the space-time approach starts to
be competitive with less than 10 time partitions. Out of these plots, we are able to
reduce the time to solution of simulations with the space-time approach by adding
more processors to exploit time parallelism, both for the linear and nonliner problems
considered herein. Besides, the method shows excellent weak scalability properties.

5.4.2. Space-time CDR solver. Consider the CDR equation (1) with σ =
10−4, β = (1, 0), and f = 1, on an original domain Ω × (0, T ] = [0, 0.3]2 × (0, 0.3],

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

C210 SANTIAGO BADIA AND MARC OLM

Table 1
Iteration count for CDR equation. Convective CFL equal to 1.0 in all cases. CFLν represents

the diffusive CFL.

ν = 1 10−1 10−2 10−3 10−4 10−6

CFLν= 102 10 1 10−1 10−2 10−4

Péclet= 5 · 10−3 5 · 10−2 0.5 5 50 5 · 103
(Px × Py) × Pt #Sbd

(3 × 3) × 1 9 18 11 7 5 5 5
(6 × 6) × 2 72 28 16 11 11 11 11
(9 × 9) × 3 243 35 17 11 12 12 13

(12 × 12) × 4 576 37 17 12 13 14 15
(15 × 15) × 5 1125 38 17 13 14 15 17
(18 × 18) × 6 1944 39 17 13 15 15 18
(21 × 21) × 7 3087 40 17 14 16 16 19
(24 × 24) × 8 4608 41 18 14 17 17 21
(27 × 27) × 9 6561 41 18 15 18 18 22
(30 × 30) × 10 9000 42 18 16 19 19 24

and scaled through the weak scalability analysis by Px, Pt, respectively. Homogeneous
Dirichlet and initial conditions are enforced. Local problem size is fixed with Kn = 30
and H

h
= 30. The ratio between spatial and time partitions is Px

Pt
= 3. Several

diffusion parameters are considered in order to present different scenarios: from a
diffusion-dominated case (ν = 1.0) to a convection-dominated one (ν = 10−6). We
have the convective CFL equal to 1.0 in all cases. SUPG stabilization is again used.

Table 1 presents the iteration count for different diffusion values that lead to
different scenarios. In the diffusion-dominated case the STBDDC preconditioned
GMRES tends to an asymptotically constant number of iterations, thus is independent
of the number of subdomains. Moving to the convective case, the number of iterations
slightly grows with the decrease of the diffusive CFL number.

5.5. Nonlinear space-time p-Laplacian solver. In this experiment we com-
pare the sequential-in-time method (solving the spatial problem with a BDDC ap-
proach for every time step) against the proposed STBDDC solver. We consider the
p-Laplacian problem (with p = 1), i.e., (1) with ν = |∇u|, β(0, 0), and σ = 0, on
Ω = [0, 1]2 × (0, T ] with the initial solution u0 = x+ y, Dirichlet data g = x+ y, and
the forcing term f = 1. We fix the time step size to |δk| = 10−3 and Hh = 30.

We consider the same setting as the experiment reported in Figure 7 to compare
the sequential-in-time and space-time parallel solvers for a nonlinear problem. Thus,
we consider an increasing number of time steps, and Ps = Px×Py = 42 processors for
the space-time solver. The sequential solver exploits Ps processors to extract space
parallelism only. Figure 8 shows the comparison between the sequential approach
up to T = 1.5 and K = 1500 time steps. In Figure 8(a) we plot the number of
space solves, which is now proportional to the number of accumulated linear iter-
ations through the nonlinear iterations. Remarkable algorithmic scalability is also
obtained in the nonlinear setting. Elapsed time plots in 8(b) show a similar behavior
in the nonlinear case to the linear one. The nonlinear case also exhibits excellent
weak scalability properties. The nonlinear space-time solver is competitive in terms
of number of local problems to be computed at about 20 processors, whereas it re-
quires slightly more than 50 processors in order to be superior in terms of elapsed
time. Discrepancies should be substantially reduced exploiting causality for the local
problems, as commented upon above. Out of these plots, we are able to reduce the

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

SPACE-TIME BALANCING DOMAIN DECOMPOSITION C211

 0

 2000

 4000

 6000

 8000

 10000

 12000

10 25 50 75 100 125 150

100 250 500 750 1000 1250 1500

L
o
ca

l s
o
lv

e
s

Pt

K

 Sequential approach  Space-Time approach, Kn=10 

 0

 20

 40

 60

 80

 100

 120

10 25 50 75 100 125 150

100 250 500 750 1000 1250 1500

W
a
ll 

cl
o
ck

 t
im

e
 (

s)

Pt

K

 Sequential approach  Space-Time approach, Kn=10 

Fig. 8. Comparison between the sequential and space-time solvers for the p-Laplacian transient
problem on MareNostrum supercomputer. Spatial partition is fixed to Px = Py = 4. The space-time
approach is using P = 42Pt MPI fine-level tasks.

time to solution of simulations with the space-time approach by adding more proces-
sors to exploit time parallelism for the nonliner problem considered herein. In any
case, there is still room for improvement when considering nonlinear problems. In this
sense, nonlinear space-time preconditioning [15, 7] and more elaborated linearization
strategies have the potential to lead to better performance.

6. Conclusions. In this work, we have considered a space-time iterative solver
based on DD techniques. In particular, we have considered the GMRES iterative
solver with space-time preconditioning obtained by extending the BDDC framework
to space time for parabolic problems discretized with FEs. Since the time direction
has a very different nature than the spatial one, i.e., it is a transport-type operator, a
particular definition of the coarse DOFs and transfer operators is considered, taking
into account time causality. Further, perturbation terms must be included to lead to
a well-posed system. The exposition has been carried out for a backward-Euler time
integrator, but the extension to θ-methods and Runge-Kutta methods is straightfor-
ward. Further, the well-posedness of the proposed space-time preconditioner has been
checked.

On the other hand, we have carried out a detailed set of numerical experiments
on parallel platforms. Out of these results, the proposed methodology is observed
to exhibit excellent scalability properties. The methods are weakly scalable in time,
i.e., increasing X times the number of MPI tasks one can solve X times more time
steps, in approximately the same amount of time, which is a key property to reduce
time to solution in transient simulations with heavy time stepping. We have also
shown weak scalability in space time, where one is not only facing larger problems
in time but also in space. Further, we have applied the STBDDC preconditioner to
nonlinear problems by considering a linearization of the full space-time system, and
applying the proposed space-time solver at every nonlinear iteration. The use of the
space-time solvers proposed becomes faster than a sequential-in-time approach for a
modest number of processors.

Future work will include the development of nonlinear space-time BDDC precon-
ditioners, extending the concept of nonlinear preconditioning (see, e.g., the recent
work in [15] for nonlinear FE tearing and interconnecting (FETI) preconditioners in
space) to space time. As it has already been observed in space [7], the use of nonlinear
preconditioning should make space-time preconditioning more effective for nonlinear
problems. Further extensions of this work will involve the extension to multilevel

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

C212 SANTIAGO BADIA AND MARC OLM

space-time algorithms (to keep perfect weak scalability at larger scales), and their
application to solid mechanics and incompressible fluid dynamics simulations.

REFERENCES

[1] S. Badia, A. F. Martín, and J. Principe, Implementation and scalability analysis of balancing
domain decomposition methods, Arch. Comput. Methods Eng., 20 (2013), pp. 239–262,
http://dx.doi.org/10.1007/s11831-013-9086-4.

[2] S. Badia, A. F. Martín, and J. Principe, A highly scalable parallel implementation of
balancing domain decomposition by constraints, SIAM J. Sci. Comput., 36 (2014), pp.
C190–C218, http://dx.doi.org/10.1137/130931989.

[3] S. Badia, A. F. Martín, and J. Principe, On the scalability of inexact balancing domain
decomposition by constraints with overlapped coarse/fine corrections, Parallel Comput., 50
(2015), pp. 1–24, http://dx.doi.org/10.1016/j.parco.2015.09.004.

[4] S. Badia, A. F. Martín, and J. Principe, Multilevel balancing domain decomposition at
extreme scales, SIAM J. Sci. Comput., 38 (2016), pp. C22–C52, http://dx.doi.org/10.
1137/15M1013511.

[5] S. C. Brenner and R. Scott, The Mathematical Theory of Finite Element Methods, 3rd ed.,
Springer, New York, 2010.

[6] A. N. Brooks and T. J. Hughes, Streamline upwind/Petrov-Galerkin formulations for convec-
tion dominated flows with particular emphasis on the incompressible Navier-Stokes equa-
tions, Comput. Methods Appl. Mech. Engrg, 32 (1982), pp. 199–259, http://dx.doi.org/
10.1016/0045-7825(82)90071-8.

[7] X.-C. Cai and D. E. Keyes, Nonlinearly preconditioned inexact Newton algorithms, SIAM J.
Sci. Comput., 24 (2002), pp. 183–200, http://dx.doi.org/10.1137/S106482750037620X.

[8] E. C. Cyr, J. N. Shadid, and R. S. Tuminaro, Stabilization and scalable block preconditioning
for the Navier–Stokes equations, J. Comput. Phys., 231 (2012), pp. 345–363, http://dx.
doi.org/10.1016/j.jcp.2011.09.001.

[9] C. R. Dohrmann, A preconditioner for substructuring based on constrained energy min-
imization, SIAM J. Sci. Comput., 25 (2003), pp. 246–258, http://dx.doi.org/10.1137/
S1064827502412887.

[10] M. Dryja, J. Galvis, and M. Sarkis, BDDC methods for discontinuous Galerkin discretiza-
tion of elliptic problems, J. Complexity, 23 (2007), pp. 715–739, http://dx.doi.org/10.1016/
j.jco.2007.02.003.

[11] M. Emmett and M. J. Minion, Toward an efficient parallel in time method for partial differ-
ential equations, Commun. App. Math. Comput. Sci., 7 (2012), pp. 105–132.

[12] R. D. Falgout, S. Friedhoff, TZ. V. Kolev, S. P. MacLachlan, and J. B. Schroder,
Parallel time integration with multigrid, SIAM J. Sci. Comput., 36 (2014), pp. C635–C661,
http://dx.doi.org/10.1137/130944230.

[13] M. J. Gander, R.-J. Li, and Y.-L. Jiang, Parareal Schwarz waveform relaxation methods, in
Domain Decomposition Methods in Science and Engineering XX, Lecture Notes Comput.
Sci. Eng. 91, Springer, Berlin, 2013, pp. 451–458.

[14] M. J. Gander and M. Neumüller, Analysis of a new space-time parallel multigrid algorithm
for parabolic problems, SIAM J. Sci. Comput., 38 (2016), pp. A2173–A2208, http://dx.doi.
org/10.1137/15M1046605.

[15] A. Klawonn, M. Lanser, and O. Rheinbach, Nonlinear FETI-DP and BDDC Methods,
SIAM J. Sci. Comput., 36 (2014), pp. A737–A765, http://dx.doi.org/10.1137/130920563.

[16] J. Lions, Y. Maday, and A. Turinici, A parareal in time discretization of PDEs, C. R. Math.
Acad. Sci. Paris, 332 (2001), pp. 661–668.

[17] J. Mandel and C. R. Dohrmann, Convergence of a balancing domain decomposition by con-
straints and energy minimization, Numer. Linear Algebra Appl., 10 (2003), pp. 639–659,
http://dx.doi.org/10.1002/nla.341.

[18] J. Mandel, B. Sousedík, and C. Dohrmann, Multispace and multilevel BDDC, Computing,
83 (2008), pp. 55–85, http://dx.doi.org/10.1007/s00607-008-0014-7.

[19] M. L. Minion, R. Speck, M. Bolten, M. Emmett, and D. Ruprecht, Interweaving PFASST
and Parallel Multigrid, SIAM J. Sci. Comput., 37 (2015), pp. S244–S263, http://dx.doi.
org/10.1137/14097536X.

[20] R. Speck, D. Ruprecht, M. Emmett, M. Bolten, and R. Krause, A space-time parallel
solver for the three-dimensional heat equation, in Parallel Computing: Accelerating Com-
putational Science and Engineering (CSE), IOS press, Amsterdam, 2014, pp. 263–272.
http://dx.doi.org/10.3233/978-1-61499-381-0-263.

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp

http://dx.doi.org/10.1007/s11831-013-9086-4
http://dx.doi.org/10.1137/130931989
http://dx.doi.org/10.1016/j.parco.2015.09.004
http://dx.doi.org/10.1137/15M1013511
http://dx.doi.org/10.1137/15M1013511
http://dx.doi.org/10.1016/0045-7825(82)90071-8
http://dx.doi.org/10.1016/0045-7825(82)90071-8
http://dx.doi.org/10.1137/S106482750037620X
http://dx.doi.org/10.1016/j.jcp.2011.09.001
http://dx.doi.org/10.1016/j.jcp.2011.09.001
http://dx.doi.org/10.1137/S1064827502412887
http://dx.doi.org/10.1137/S1064827502412887
http://dx.doi.org/10.1016/j.jco.2007.02.003
http://dx.doi.org/10.1016/j.jco.2007.02.003
http://dx.doi.org/10.1137/130944230
http://dx.doi.org/10.1137/15M1046605
http://dx.doi.org/10.1137/15M1046605
http://dx.doi.org/10.1137/130920563
http://dx.doi.org/10.1002/nla.341
http://dx.doi.org/10.1007/s00607-008-0014-7
http://dx.doi.org/10.1137/14097536X
http://dx.doi.org/10.1137/14097536X
http://dx.doi.org/10.3233/978-1-61499-381-0-263


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Copyright © by SIAM. Unauthorized reproduction of this article is prohibited. 

SPACE-TIME BALANCING DOMAIN DECOMPOSITION C213

[21] A. Toselli and O. Widlund, Domain Decomposition Methods - Algorithms and Theory,
Springer, Berlin, 2005.

[22] X. Tu, Three-level BDDC in three dimensions, SIAM J. Sci. Comput., 29 (2007), pp. 1759–
1780, http://dx.doi.org/10.1137/050629902.

[23] T. Weinzierl and T. Köppl, A geometric space-time multigrid algorithm for the heat equation,
Numerical Mathematics Theory Methods Appl., 5 (2012), pp. 110–130, http://journals.
cambridge.org/abstract_S1004897900000258.

D
ow

nl
oa

de
d 

06
/1

6/
17

 t
o 

5.
19

6.
89

.2
25

. R
ed

is
tr

ib
ut

io
n 

su
bj

ec
t 

to
 S

IA
M

 l
ic

en
se

 o
r 

co
py

ri
gh

t;
 s

ee
 h

tt
p:

//
w

w
w

.s
ia

m
.o

rg
/j

ou
rn

al
s/

oj
sa

.p
hp

http://dx.doi.org/10.1137/050629902
http://journals.cambridge.org/abstract_S1004897900000258
http://journals.cambridge.org/abstract_S1004897900000258

	Introduction
	Problem setting
	Domain partitions
	Space-time discretization

	Space BDDC preconditioning
	Subassembled problem
	Coarse DOFs
	Transfer operator
	Space-parallel preconditioner

	Space-time BDDC preconditioning
	Subassembled problem
	Coarse DOFs
	Transfer operator
	Space-time–parallel preconditioner
	Implementation aspects

	Numerical experiments
	Experimental framework
	Weak scalability setting
	Weak scalability in time
	Time-parallel Poisson solver
	Time-parallel CDR solver

	Weak scalability in space-time
	Space-time Poisson solver
	Space-time CDR solver

	Nonlinear space-time p-Laplacian solver

	Conclusions
	References

