












































Microsoft Word - FPMadaptive_rev2.doc


1 

A FINITE POINT METHOD FOR ADAPTIVE THREE-DIMENSIONAL 
COMPRESSIBLE FLOW CALCULATIONS 

Enrique Ortega, Eugenio Oñate and Sergio Idelsohn1 

International Center for Numerical Methods in Engineering (CIMNE) 
Universidad Politécnica de Cataluña 
Edificio C1, Campus Norte, UPC 
Gran Capitán, s/n, 08034 Barcelona, España 

Abstract. The Finite Point Method (FPM) is a meshless technique which is based on both, a 

Weighted Least-Squares numerical approximation on local clouds of points and a collocation 

technique which allows obtaining the discrete system of equations. The research work we 

present is part of a broader investigation into the capabilities of the FPM to deal with three-

dimensional applications concerning real compressible fluid flow problems. In the first part of 

this work, the upwind biased scheme employed for solving the flow equations is described. 

Secondly, with the aim of exploiting the meshless capabilities, an h-adaptive methodology for 

two and three-dimensional compressible flow calculations is developed. This adaptive 

technique applies a solution-based indicator in order to identify local clouds where new points 

should be inserted in or existing points could be safely removed from the computational 

domain. The flow solver and the adaptive procedure have been evaluated and the results are 

encouraging. Several numerical examples are provided in order to illustrate the good 

performance of the numerical methods presented. 

1. INTRODUCTION 

Numerical simulation has come into the focus of interest of applied sciences and engineering 

in the last decades. As a result, the development of numerical techniques for solving partial 

differential equations (PDEs) has been growing continuously, mainly stimulated by increasing 

computational resources and ever-challenging demands for practical and theoretical 

applications. Nowadays, there are two main types of numerical techniques for solving PDEs. 

On the one hand, there exist mesh-based or conventional discretization methods; among them 

the classical Finite Differences (FD), Finite Volume (FV) and Finite Element (FE) methods 

are of singular interest. These techniques are mostly employed in practice due to their 

robustness, efficiency and high confidence gained through years of continuous use and 

enhancement. On the other hand, there exist meshless methods. Having their pros and cons, 

                                                 
1 ICREA Research Professor at CIMNE 



2 

meshless methods offer an alternative to mesh-based techniques. Meshless methods are 

conceptually attractive; however, their practical implementations have not succeeded so far to 

prove their efficiency and this is a fact which can explain the comparatively little attention 

that has been devoted to these techniques. In spite of this, over the last ten years, some 

difficulties that arose in conventional mesh-based methods when performing particular 

applications have brought meshless methods into the focus of attention. 

The first meshless methods appeared in the mid-seventies and numerous formulations have 

been proposed since then. A retrospective view of the evolution of the most relevant meshless 

methods as well as their connections is presented by Belytschko et al. [1]. In their work, the 

main features of typical meshless methods, their implementation issues and practical 

applications are offered. An interesting work by Fries & Matthies [2] classifies and analyzes 

the most important meshless methods considering their different origins and viewpoints. The 

authors highlight the main characteristics and implementation details as well as the 

advantages and disadvantages of each technique. Some outstanding reviews on meshless 

methods can also be found in the literature; see for instance those due to Li & Liu [3], Gu [4], 

Duarte [5], Liu et al. [6] and Dolbow & Belytschko [7]. 

The present work deals with a meshless technique called the Finite Point Method (FPM) 

which was introduced by Oñate et al. [8, 9, 10]. In the FPM, the numerical approximation to 

the problem variables and their derivatives is based on a Weighted Least-Squares (WLSQ) 

procedure known as Fixed Least Squares (FLS). The strong form of the governing PDEs is 

sampled at each point by replacing the continuous variables with their approximated 

counterparts and the resulting system of algebraic equations is obtained by means of a 

collocation technique. 

Since the FPM appeared in the literature towards the mid-nineties, it has been successfully 

applied to solve convective-diffusive problems, incompressible and compressible fluid flow 

problems [9, 10, 11, 12, 13, 14] and solid mechanics problems [15, 16, 17] among others. As 

regards to fluid flow problems, the first application of the FPM to the solution of the two-

dimensional compressible flow equations was presented by Oñate et al. [8, 9] and Fischer 

[12]. In those works, topics such as the construction of local clouds of points and the effects 

of the weighting function on the numerical approximation were studied using first and 

second-order approximation bases. In addition, the compressible flow equations were solved 

using a Taylor-Galerkin scheme. More recently, Sacco [13] presented a detailed analysis of 

the Finite Point (FP) approximation in conjunction with a multi-dimensional application for 



3 

solving the incompressible flow equations. Outstanding achievements from that work, such as 

a definition of local and normalized approximation bases, a procedure for constructing local 

clouds of points as well as a criterion for evaluating their quality, have given the FPM a more 

solid base. In relation to the solution of the incompressible flow equations, a fractional step 

algorithm stabilized via a technique known as Finite Calculus (FIC) [18] has also been 

successfully employed. The FP solution of the three-dimensional compressible flow equations 

was presented in a pioneer work by Löhner et al. [14]. There, two contributions are well 

worth mentioning: a reliable procedure for constructing the local clouds (based on a Delaunay 

technique) and a well-suited upwind biased scheme for solving the flow equations. This 

scheme is based on a ‘symmetrized’ discrete expression of the advective flux-divergence 

vector, which is composed of a central difference-like expression plus a corrective term. In 

this scheme, the central difference-like flux term is replaced by an upwind numerical flux 

obtained through an approximate Riemann solver. In the meshless context, this approach is 

preferable to artificial dissipation methods as it is not necessary to define any kind of 

geometrical measure in the cloud of points. Other meshless approaches found in the literature 

share this philosophy, see for instance [19, 20] and the references cited therein. 

All these works, though different, have made remarkable contributions to enhance the 

performance of the FPM; giving clear evidence of its potential and, in some cases, also 

revealing important weaknesses. Nowadays, most meshless techniques, and in particular the 

WLSQ-based methods, are characterized by a lack of solid theoretical and practical arguments 

regarding local cloud construction, approximation bases selection and weighting function 

setting, among other important issues. In addition, methods like the FPM, which use the 

strong form of the differential governing equations, must face some other well-known 

stability and robustness problems arising from the collocation procedure. Unfortunately, the 

robustness and the accuracy of the numerical approximation in the cloud of points are 

dependent on the previously mentioned features. To make matters worse, meshless methods 

are typically computationally expensive, which requires developing more efficient algorithms 

and data structures. All these considerations become crucial when dealing with real 3D 

problems of practical application in engineering. Consequently, improvement in robustness 

and efficiency seems to be the key to the success of meshless methods in the future. 

As regards robustness, some modifications to the FPM have been proposed by Boroomand et 

al. [21] with the aim of reducing instabilities in the minimization procedure, especially those 

arising from non-appropriate local clouds of points. In addition to that, but from another 



4 

perspective, we have recently presented an alternative approach towards robustness [22] 

intended to reduce the local approximation dependence on both, the spatial distribution of the 

cloud of points and the weighting function parameters. This ad hoc procedure, which is based 

on a QR factorization in conjunction with an iterative adjustment of the local approximation 

parameters, allows obtaining a satisfactory minimization problem solution for cases where 

usual approaches fail and avoids modifying the geometrical support where the local 

approximation is based on. 

Regardless of the difficulties meshless methods present for practical use, they have potential 

advantages over conventional discretization techniques, which explain the scientific interest 

of many researchers in this area (cf. [1, 2, 3]). Indeed meshless techniques facilitate the 

treatment of problems involving moving discontinuities and computational domains whose 

boundaries change with time and the development of h and p-adaptivity schemes, among 

other advantages. In our opinion, these topics constitute key opportunities for the 

development and promotion of meshless methods. 

Along the lines of investigation just mentioned, Perazzo et al. [23] have recently presented an 

h-adaptive technique for solid mechanics problems which is based on the approximation error 

obtained at each point by the WLSQ functional. Also, in a previous work [22] we have dealt 

with high-order FP discretizations in a preliminary manner, exploring the FPM capabilities 

regarding p-adaptivity. This time, with the same objective in mind, i.e. exploiting the FPM 

potential, we present an adaptive methodology for two and three-dimensional compressible 

flow problems. 

The rest of the work is organized as follows. In Section 2 the FP approximation is presented. 

Section 3 is concerned with the domain discretization and the construction of local clouds of 

points. Next, in Sections 4 and 5, the upwind biased scheme employed for solving the three-

dimensional Euler equations using the FPM is described. Section 6 provides several 

numerical calculations to show the performance of the flow solver. Then, an h-adaptive FPM 

for compressible flow calculations is developed in Section 7 and the performance of this 

adaptive methodology is evaluated by means of several numerical examples in Section 8. 

Finally, some conclusions of this work are presented in Section 9. 

2. NUMERICAL FINITE POINT APPROXIMATIONS ON CLOUDS OF POINTS 

In this Section we present a FP approximation to an unknown function u(x) defined in a 

closed domain   d (d=1, 2 or 3) which is discretized by a set of points xi, 1,i n . In order 



5 

to obtain a local approximation for function u(x), the domain  is divided into subdomains i 

(henceforth termed clouds of points) so that i represents a covering for . Each local cloud 

of points consists of a point xi called star point and a set of points xj, 2,3,...,j np  

surrounding xi, which complete i. Assuming that function u(x) is smooth enough in i, it is 

possible to state the following approximation 

 T

1

ˆ( ) ( ) ( ) ( )
m

l l
l

u u p 


  x x x p x   (1) 

where p(x) is a vector whose m-components are the terms of a complete polynomial base in 

d (cf. [22] for details) and  is an a-priori unknown vector. These vectors are given by 

 

1 2

1 2

( ) ( ) ( ) (1 )

( 1)

T m
j j j j

Tm

p p p m

m  





   

   





p x x x


 (2) 

Next, at each point xj  i the unknown function is obtained as follows 

 

11 1

22 2

ˆ

ˆ

ˆ

h T

h T
h

h T
npnp np

uu

uu

uu

    
    
       
    
    

        

P
 

p

p
u

p

   (3) 

where ( )h hj ju u x  is the value of the unknown function u(x) at x = xj, ˆ ˆ( )j ju u x  is the 

approximated value at that point and  

 

1 2
1 1 1 1

1 2

( ) ( ) ( )

( )

( ) ( ) ( )

T m

T m
np np np np

p p p

np m

p p p



   
   

    
   
   

P


 



p x x x

p x x x

 (4) 

In order to solve the equation system (3) the condition np m  must be fulfilled. This 

penalizes the approximation flexibility and does not suit a meshless methodology. Thus, 

np m  is adopted and the equation system becomes overdetermined. Consequently, an 

approximate solution is sought by means of a WLSQ technique. This solution minimizes a 

discrete L2 error norm in the approximation to u(x) in i. 

The WLSQ approximation features depend on the shape of the chosen weighting function and 

the manner in which the latter is applied. In the FPM a fixed weighting function, centred on 

the star point of the cloud, is chosen so that it satisfies the following conditions  



6 

 

( ) 0

( ) 0

( ) 1

i j j i

i i

i i






   

   



x x

x x

x

 (5) 

This kind of approximation, known as Fixed Least-Squares method (FLS), can be considered 

as a particular case of the Moving Least-Squares Method (MLS) introduced by Lancaster and 

Salkauskas in the context of interpolation and data fitting [24]. When the FLS procedure is 

applied, the approximation methodology is considerably simplified and its computational cost 

reduced. It should be noticed, though, that FLS approximations lead to multivalued shape 

functions depending on the cloud in which the approximation is calculated, i.e. 

n m( ) ( )j jN Nx x  (subscripts m and n indicate neighbouring clouds of points). Therefore, the 

numerical approximation is globally and locally discontinuous and must be considered as 

valid only at the star point of the cloud where the weighting function is located. Hence, a 

collocation technique becomes the natural choice in the FPM. 

Going back to the minimization procedure, the following discrete functional is defined 

  
2 2

1 1

ˆJ J ( ) ( )
np np

h T h
i i i j j j i j j j

j j

u u u 
 

           x x x p   (6) 

in which i(xj)=(xj-xi) is a compact support weighting function. Eq. (6) can be rewritten as 

    T ( )h h  J P Pα αu x u  (7) 
 
where (x) = diag((xj-xi)). The minimization of Eq. (7) with respect to  leads to the 

following equation system 

    T T( ) ( ) h P P P 0x x u   (8) 

known as normal equations in the Least-Squares (LSQ) literature. Introducing the matrices 

 
 
 

T

1

T

( ) , A ( ) ( ) ( ) ( )

( ) , B ( ) ( ) ( )

np

kl i j k j l jj

lj l j i j

p p m m

p m np










 

 

A P P
B P

x x x x

x x x




 (9) 

it is possible to express the normal equations (8) as follows 

 hA B u  (10) 

As a fixed weighting function is chosen, the unknown coefficients j are constant in i. These 

coefficients can be found by 



7 

 -1 h A Bα u  (11) 

Eq. (11) must be solved via matrix A inversion because vector uh is not known in advance. 

Thus, depending on the spatial distribution of the local cloud of points (especially for the 3D 

case), matrix A can become ill-conditioned, making it very difficult to invert it with accuracy. 

Then, supposing that Eq. (11) is solved accurately enough and replacing the coefficients j in 

Eq. (1), the approximation to the unknown function at the star point is obtained as 

 
T
i

T -1

( ) (1 )

ˆ ( ) ( ) hi i
np

u




N

A B
x

x p x u  (12) 

where Ti ,1 ,2 ,( ) , ,...,i i i npN N N   N x  is the shape function vector of point xi in i. The adoption 

of an FLS scheme, where matrices A and B are constant in i, simplifies the calculation of 

the shape functions derivatives. Consequently, 

 
TT

1i ( )( )
ll

i
l l
k k

 
 
N

A B
p xx

x x
 (13) 

and the approximation to the unknown function derivatives at xi is given by 

 
T

1i
ˆ( ) ( )( )l l Tl h hi i

l l l
k k k

u   
  

N
A B

x p xx
u u

x x x
 (14) 

The solution of equations (8) by direct inversion of matrix A is not the most accurate way of 

solving the LSQ problem. Thus, it must be restricted to cases when the condition number of 

matrix A is moderate. In this work, the procedure adopted to calculate the shape function and 

its derivatives is the following (cf. [22]). Given a certain cloud of points, first the direct 

inversion of matrix A is attempted. If the condition number of A is smaller than a given 

maximum admissible value, and if the calculated shape functions satisfy some quality tests, 

then the shape functions are accepted. If some of the preceding requirements are not met, 

equations (8) are solved by an alternative procedure based on QR factorization. The aim of 

using a QR factorization technique is to get an acceptable solution for cases where the usual 

procedure fails without having to modify the geometrical structure of the cloud. The WLSQ 

problem solution via QR factorization may cost, in terms of CPU-time, up to twice as much as 

the solution via matrix A inversion if np m  [25]. However, this extra amount of time is 

quite unimportant in the overall time, as the alternative QR-based procedure is only applied to 

problematic clouds of points which represent only a small percentage of the whole clouds in 



8 

the domain. The QR factorization based procedure applied for solving the normal equations 

system (8) can be summarized as follows. 

If matrix P (given by Eq. (4)) has rank m and np m , it can be uniquely factored as 

 P Q R  (15) 

where matrix Q  npxm is orthogonal ( QTQ = I ) and matrix R  mxm is upper triangular 

with positive diagonal elements (a similar procedure, based on columns pivoting, can be 

applied for cases where matrix P is rank deficient or near rank deficient). In order to apply the 

QR factorization for solving our WLSQ problem, it is necessary to obtain an equivalent 

unweighted problem. Thus, the next factorization is proposed 

 ( ) ( ) such that        x x  (16) 

and also the following modification of matrix P 

  = P P  (17) 

After that, it is possible to write an equation system equivalent to the one given by Eq. (8) as  

    T T hP P P    u   (18) 

Then, the modified matrix (17) is factorized, i.e. P QR = , and replaced in the equivalent 

unweighted problem (18). This leads to 

 T hR Q   u  (19) 

from which the unknown coefficients j can be obtained 

  -1 T h R Q  u  (20) 

Here matrix R is generally well-conditioned and its inverse is easy to obtain with accuracy, 

even for the cases when matrix P is near rank-deficient. The described procedure allows us 

get shape functions of quite good quality in cases where they cannot be obtained via inversion 

of matrix A. This reduces the dependence of the approximation on the spatial distribution of 

points and on the functional shape of the weighting function significantly, giving robustness 

to the FP approximation methodology. 

2.1 The weighting function 

In the present work the following normalized Gaussian weighting function is adopted 



9 

 
 

 
( )

1

k
k

j

k

d

i j

e e
x

e


 






 
  
 








 (21) 

where dj = ||xj-xi||,  = /w and  =  dmax (>1.0). The support of this function is isotropic, 

circular and spherical in two and three-spatial dimensions respectively. A detailed description 

of the effects of the free parameters w, k and  on the numerical approximation and some 

guidelines for their setting was presented in [22]. However, an important remark about the 

parameter  should be mentioned. The parameter  determines the size of the weighting 

function’s support and, in consequence, a larger value of  could be interpreted as an 

enlargement of the overlapping zone between neighbouring clouds of points. This provides a 

mechanism for improving the approximation quality where sudden changes in the distance 

between neighbouring points happen, e.g., near localized adaptive-refined zones and certain 

details of 3D geometries. In these cases, which generally lead to highly distorted clouds of 

points, good results are obtained setting 1 1.25  . 

3. DISCRETIZATION OF THE DOMAIN AND LOCAL CLOUD CONSTRUCTION 

An adequate support of points is essential for setting a good local approximation for each 

cloud. Even though the iterative QR-based technique described above attempts to reduce this 

dependence, the spatial support of the approximation continues playing a major role. At 

present, there is not a unique criterion to determine the size, shape and structure of the local 

spatial support and several procedures have been proposed by meshless practitioners. 

Concerning the FPM, an appropriate methodology for constructing local clouds of points 

(based on a Delaunay technique) has been suggested by Löhner et al. [14]. In the present 

work we follow the general criteria proposed there. 

3.1 Domain discretization 

The point discretization of the analysis domain  is obtained by means of a modification of 

the algorithm presented in [26]. It starts from a Delaunay triangulation that bounds the 

domain and inserts new points in the centre of empty spheres filling . This incremental 

quality technique, known as optimization driven point insertion, allows achieving a fast point 

discretization of the analysis domain well-suited for FP calculations. 

3.2 Local cloud construction 



10 

The local clouds of points are constructed as follows. Given a point discretization of the 

computational domain and a set of normal vectors belonging to the triangulation that bounds 

this domain, a maximum (npmax) and minimum (npmin) allowable number of points in the 

cloud and an initial search radius are set. Then, for each star point xi, all neighbours within the 

search radius (rs) are found through an octree technique. Any local cloud of points inside the 

computational domain is constructed with the closest neighbouring points from the star point. 

However, if a star point xi is located either over or close enough to a solid boundary, the 

points included in its cloud (admissible points) must also satisfy the conditions described 

below.  

Case 1: Star point located over a solid boundary 

In this particular case (sketched in Figure 1(a)), every point xj located within the search radius 

is admissible if it meets the following conditions 

      cos cos ; cos2 i j
i j

 


    
n r

n r
 (22) 

 tj searchrr  (23) 

Condition (22) defines an admissible zone around the start point which is defined in the 

normal direction to the surface and  is a small angle dependent on the surface curvature. The 

second condition (23) imposes a certain aspect ratio in the cloud, given by the parameter 0. 

Case 2: Cloud of points intercepting a solid boundary 

In this case the point xj located over a surface (
neaj

x ), nearest to the star point xi, must be 

sought (see Figure 1(b)). Then, every point within the search radius is admissible if  

      cos cos ; cos2 nea
nea

j j

j j

 


    
n r

n r
 (24) 

and no restriction is imposed to the aspect ratio of the cloud of points.  



11 

 
Figure 1: The construction of local clouds near the boundaries. Left: the star point located over a solid boundary; 

Right: a cloud of points intercepting a solid boundary. 

If the number of admissible points found within the search radius is not enough, the latter is 

increased until condition npmin  np  npmax is satisfied. Otherwise, if the number of 

admissible points goes beyond npmax, only the npmax points nearest to xi are added to the 

cloud. 

It is very helpful to force the first layer of nearest neighbours of xi into the local cloud of 

points when sudden variations in the distance between neighbouring points occur inside the 

analysis domain. For each star point this is accomplished by performing a local Delaunay grid 

with all the points falling within the octree search area. Only the first layer of nearest 

neighbours is retained and used to initialize the local cloud of points. Finally, admissible 

nearest points are added until the condition npmin  np  npmax is fulfilled. This procedure, 

which follows the lines proposed by Löhner et al. [14], avoids non-overlapping neighbouring 

clouds of points and improves the quality of the local discretization. Furthermore, the 

information concerning the first layer of neighbouring points for each star point is useful for 

improving several computational procedures. In the present work such information is needed 

for the adaptive procedure presented in Section 7. 

4. THE EULER EQUATIONS 

The first-order hyperbolic system of Euler equations can be written in several equivalent 

forms. Their conservative differential form is given by 

 
k

kt x

 
 

 
U F

0  (25) 



12 

where k = 1,d being d the number of spatial dimensions of the problem. U is the conservative 

variables vector and Fk is the advective flux vector in the spatial direction xk. These vectors 

are defined as  

 

 
,

k
k

i i k ik

t t k

u

u u u p

e e p u

 
  
 

  
      
      

U F  (26) 

where , p and et respectively denote the density, pressure and total energy of the fluid; ui is 

the i-component of the velocity vector, ik is the Kronecker delta and subscripts i,k  = 1,d. The 

following state relation for a perfect gas closes the system of equations (25) 

   11 2t i ip e u u        (27) 

in which  = Cp/Cv is the specific heats ratio (in the present work we adopt  = 1.4). 

The solution of Eq. (25) in a closed domain   d with boundaries  =   w requires 

appropriate initial and boundary conditions. The initial conditions only start the explicit 

calculation and they are simple to implement. In general, they could be taken from the far-

field state U. Regarding the boundary conditions, those employed in the present work are of 

two different kinds. The first one is concerned with far-field conditions applied on the outer 

boundaries  and the second one is concerned with slip wall conditions applied on the solid 

boundaries w. In the case of far-field boundary conditions, the prescribed fluxes at each 

boundary point are obtained solving an approximate Riemann problem in the outward normal 

direction to the boundary, between the boundary point state Ui and the far-field state U. Over 

solid boundaries, slip wall conditions are applied forcing the fluxes to remain tangent to the 

boundaries, i.e., cancelling their components in the boundary normal direction. 

5. THE FLOW SOLVER 

In this section, the numerical strategy adopted for solving the compressible flow equations is 

set forth. Despite some modifications to the way in which the divergence of the advective 

fluxes is discretized in the local cloud of points, the overall scheme follows the general lines 

proposed by Löhner et al. [14].  

Recalling the FPM approximation procedure described in Section 2, for each star point xi   

we can write the following approximations 



13 

 

 

   

ˆ ˆ

ˆ ˆ

i

i

h
i í ij j

j

hk k k
i í ij j

j

N

N





 

 





U U U

F F F

x

x
 (28) 

where ( )ij i jN N x  is the shape function of the star point xi evaluated at the cloud’s point xj 

and ( ) ( )k h k hj jF F U . Then, the one-dimensional semi-discrete counterpart of Eq. (25) can be 

expressed for each star point xi by 

 
ˆ ˆ

i i

ij h hi i
j ij j

j j

b
t x x 

 
     

   
U F

F F
N

 (29) 

where hjF  is the advective flux vector calculated at a point xj  i and the coefficient ijb  

stands for the shape function derivative of xi evaluated at the same point xj. 

It is important to note that the (·)h parameters do not coincide with the approximated ones ( ̂ ) 

because in the FP method the shape functions do not interpolate point data. These values are 

related by Eq.(28), which implies that a linear system must be solved in order to get the (·)h 

parameters. Fortunately, this equation system has excellent properties and can be solved by a 

few iterations of a Gauss-Seidel method or similar. Henceforth, the markers ( ̂ ) and (·)h will 

be omitted for the sake of simplicity. 

Taking advantage of the partition of nullities (PNs) property of the shape function derivatives 

it is possible to infer 

 0
i

ij ii ij ii ij
j j i j i

b b b b b
  

         (30) 

Replacing Eq. (30) in Eq. (29), the following semi-discrete expression is obtained 

  i ij j i
j i

b
t 


  

 
U

F F  (31) 

Eq. (31) is unstable and needs to be stabilized. For that purpose, a more suitable equivalent 

form is sought scaling by a factor of 1/2 the stencil of points [20] used for its calculation. In 

this way, we obtain a totally equivalent semi-discrete expression which is given by 

  2i ij ij i
j i

b
t 


  




U
F F  (32) 

where Fij is an a priori unknown numerical flux vector, evaluated at the midpoint of the line 

segment connecting the star point xi with another point xj  i. Many possibilities for 



14 

calculating Fij can be found in the literature. Following the ideas presented in [14], the Roe’s 

approximate Riemann solver [27] is adopted in this work. Then, the numerical flux results 

    1 1 , )2 2ij j i i j j i   F F F A(U U U U  (33) 

where A(Ui,Uj) is the flux Jacobian matrix evaluated at the Roe average-state between the 

points xi and xj, i.e., UL=Ui and UR=Uj . In order to calculate the absolute value of the Roe 

matrix the procedure suggested by Turkel [28] is applied. This procedure avoids costly 

matrix-matrix and matrix-vector multiplications in the calculation of the dissipative term 

|A(Ui,Uj)|(Uj-Ui). 

 

Figure 2: The one-dimensional stencil of points. 

The multi-dimensional extension of the scheme presented above is straightforward. For each 

pair of points (xi,xj), a one-dimensional problem is solved in the direction of vector 

ji j i l x x  to obtain the midpoint numerical flux Fij. Then, Fij is projected onto the 

Cartesian axis and the semi-discrete scheme (32) results 

 2 k k ki ij ij i
j i

b
t 


     

U
F F  (34) 

where k = 1,d being d the number of spatial dimensions of the problem. The Cartesian 

components of the midpoint numerical flux are obtained by 

    ˆ1 1 ˆ( , )2 2
k k k k

ij j i n i j j i   F = F F A U U U U n  (35) 

where n̂  is a versor in the direction of the vector lji and | ˆ ( , )n i jA U U | denotes the absolute 

value of the Roe matrix calculated in the same direction. The stencil of points employed in the 

derivation of expression (34) is presented in Figure 3. 



15 

 

Figure 3: The multi-dimensional stencil of points. 

5.1 Increasing spatial accuracy 

The low-order scheme we have developed is useless in practice. In order to make this scheme 

suitable for capturing all the flow features with precision, it is necessary to increase its spatial 

order of accuracy. This is accomplished by replacing the zero-order extrapolation of the 

variables (UL=Ui and UR=Uj) at the midpoint xij by a higher-order extrapolation. The MUSCL 

(Monotone Upstream-centered Schemes for Conservation Laws) methodology [29] allows 

achieving accurate second and third-order schemes using linear and quadratic reconstruction 

of the variables respectively. Unfortunately, this high-order methodology does not guarantee 

an oscillation-free solution and monotonicity should be enforced by introducing non-linear 

limiters into the reconstruction process. In brief, these limiters recognize any local extrema of 

the solution field and automatically switch, at these points, the high-order extrapolation to a 

zero-order extrapolation, avoiding the appearance of under and overshoots in the numerical 

solution.  

Taking into consideration the high-order approach proposed in [14], in this work we adopt a 

MUSCL reconstruction of the variables in conjunction with the Van Albada limiter. This 

results in the following set of reconstructed variables 

 
     

     

1

1

1 1
4

1 1
4

i
i i i i j i

j
j j j j j i

 

 







        

        

s
U U U U U U

s
U U U U U U

 (36) 

where i
U  and j

U  are, respectively, the leftward and rightward extrapolations to the 

conservative variables vector at point xij. In the above expressions the choice of the parameter 

=-1 leads to a second-order, leftward-biased scheme for Ui and a rightward-biased scheme 



16 

for Uj. For =1 and =1/3, a second-order centered scheme and a third-order scheme are 

obtained respectively. The Van Albada limiters si and sj are given by [14] 

 

1

2 2
1

1

2 2
1

2( )( )
max 0 ,

( ) ( )

2( )( )
max 0 ,

( ) ( )

i i j i
i

i i j i

j j j i
j

j j j i















   
  

     
   

  
     

U U U U
s

U U U U

U U U U
s

U U U U

 (37) 

where   1.0E-5 is a small constant included to avoid divisions by zero. The variables Ui-1 

and Uj+1 are obtained by a centered approximation to the U at the points i and j 

 
 
 

1

1

2

2

i i ji i j i

j j ji j j i





    

    

U U U U U

U U U U U

l

l
 (38) 

in which lji = xj-xi is the vector linking the points i and j (see Figure 4).  

 

Figure 4: Implementation of the multi-dimensional reconstruction of the variables. 

Once the high-order extrapolations (36) have been calculated, the midpoint numerical flux 

(35) is modified according to 

    ˆ1 1 ˆ(2 2
k k + k - + - - + k

ij i j n i j j i    F F (U ) F (U ) A U ,U ) U U n  (39) 

and then, replacing Eq. (39) in Eq. (34) the high-order semi-discrete scheme is obtained.  

5.2 Time discretization 

Following the ideas in [14], the temporal discretization of Eq. (34) is done in a fully explicit 

manner by means of a multi-stage method that is a subset of the Runge-Kutta family of 

schemes. Assuming that the vector of conservative variables Uh is known at time nt t , the 

right hand side of Eq. (34) is calculated for each point (RHSi). Then, it is possible to advance 



17 

the solution in time from nt   to 1nt    by means of the following s-stage scheme 

 

max

(0)

( ) ( 1)

( )1

t

n
i i

s n s
i i s i i

sn
i i

 





  



U U

U U RHS

U U




 (40) 

where ti is the time step evaluated at the star point xi and s are integration coefficients that 

depend on the number of stages employed (smax). For two, three and four-stages schemes these 

parameters are set as follows: 

2 stages  1 = 1/2 and 2 = 1.0 

3 stages  1 = 3/5 , 2 = 3/5 and 3 = 1.0 

4 stages  1 = 1/4 , 2 = 1/3 , 3 = 1/2 and 4 = 1.0 

The difference between the (·)h parameters and the approximated ones ( ̂ ) has already been 

pointed out in Section 5. Taking into account that RHSi = f (Uj
h) xj  i, the following linear 

system has to be solved at the end of each integration stage 

 ˆh M U U  (41) 

where M  nn is the mass matrix of the system, which results from the assembly of the Nij 

coefficients (see Eq.(28)). Fortunately, as mentioned before, this system has excellent 

properties and can be solved by a few iterations of a Gauss-Seidel method or similar. 

It should be noticed that, even though the numerical scheme presented in this section is 

intended to solve the inviscid compressible flow equations, with minor modifications the 

same scheme can be applied for solving the viscous flow equations. 

6. NUMERICAL EXAMPLES 

In this section, some 3D compressible flow calculations are presented with the aim of 

illustrating the performance of the proposed methodology. The first example concerns a 

subsonic flow past a sphere. Although this example has barely any practical interest, it allows 

assessing the low Mach number behaviour of the scheme as well as evaluating its intrinsic 

dissipation. Then, a transonic flow around the ONERA M6 wing is solved. This example, 

which is a classic CFD validation test for external flows, allows demonstrating the 

applicability of the present methodology to practical aerodynamics problems. With the same 



18 

objective in mind, by the end of this section another transonic flow calculation concerning a 

NACA wing-body configuration is presented. 

6.1 Subsonic flow around a sphere 

In this example, subsonic inviscid flow past a sphere is solved for a freestream Mach number 

M = 0.2. The computational domain is discretized by a non-structured distribution of 30013 

points and second-order spatial approximations are obtained in clouds of points with 

30 40np  . Next, Cp and Mach number isolines on the sphere are shown in Figure 5. 

 

Figure 5: Mach number and Cp isolines on the sphere, M = 0.2. 

The calculated Cp distribution around the sphere (in the streamwise direction), is compared 

with analytical potential flow results in Figure 6. 

 
Figure 6: Cp distribution around the sphere; a comparison between the FP calculation and the analytical potential 

solution. M = 0.2. 



19 

Good agreement between the numerical and potential results can be observed. Note that the 

separation point on the sphere, obtained by the FP calculation, is almost coincident with the 

potential rear stagnation point. This fact gives a cue of the low inherent dissipation of the 

proposed numerical scheme. 

 

Figure 7: The sphere and the symmetry plane of the problem. Left: points displaying Mach number results; 

Right: Mach number isolines. M = 0.2. 

6.2 Transonic flow over the ONERA M6 wing 

This validation test [30] was developed by ONERA in 1972 with the objective of providing 

experimental support for studies regarding transonic flows at high Reynolds numbers. Since 

then, these experimental results, which cover a wide range of subsonic and transonic flows, 

have turned into a classical reference data for code validation assessments. The ONERA M6 

is a semi-span wing with a sweepback LE = 30º, an aspect ratio A = 3.8 and a taper ratio  = 

0.562. The wing-section is an ONERA ‘D’ symmetrical airfoil constant along the span and 

the wing has not geometrical twist. In this example we solve the test case # 2308 (cf. [30]) 

which concerns transonic flow over the ONERA M6 wing set at an incidence angle  = 3.06º. 

The freestream Mach number is M = 0.84 and the Reynolds number is Re = 11.7E6. The 

most relevant data about this test case can also be found in [31]. 

Due to the fact that in the present work we are solving the Euler equations, our simulation 

assumes the fluid to be inviscid. The computational domain is discretized by an unstructured 

distribution of 512141 points and second-order approximation bases are employed for 

calculating the shape functions and their derivatives in clouds with 30 45np  . Next, Cp 

and Mach number numerical results are shown in Figure 8 and Figure 9 respectively. 



20 

 

Figure 8: Cp isolines on the upper surface of the ONERA M6 wing and the symmetry plane. M = 0.84 and  = 

3.06º. 

 

Figure 9: Surface discretization of the ONERA M6 wing (upper surface view); coloured points display Mach 

number values. M=0.84 and =3.06º. 



21 

A comparison between numerical and experimental Cp distributions along several sections on 

the wing is shown in Figure 10. In accordance with the available experimental data [30], these 

sections are located at the following spanwise stations:  = 0.2, 0.44, 0.65, 0.8, 0.9, 0.95 and 

0.99 being 2 /y b  . 

 

Figure 10: Comparisons between computed and experimental Cp distributions along several sections on the 

wing. ONERA M6 wing, M=0.84 and =3.06º. 

A good agreement between computed and experimental results can be observed in Figure 10 

and, as it was expected, the inviscid computation gives a shock wave which is slightly 

stronger than the true shock wave and is located close behind the latter. Notice that the 



22 

experimental data measured at =0.99 reveals separated flow behind the shock wave on the 

upper side of the wing. Consequently, experimental and calculated Cp distributions do not 

match in the separated flow region. 

6.3 Transonic flow over a NACA wing-body configuration 

This example involves the computation of an inviscid transonic flow over a wing-body 

configuration [32]. The wing has a sweepback 1/4 = 45º, an aspect ratio A = 4, a taper ratio 

 = 0.6 and it has not geometrical twist; moreover, the wing-section is a NACA 65A006 

airfoil constant along the wing span. The fuselage has a circular cross-section and its rear part 

is attached to a sting which supports the model in the wind tunnel test section. 

The numerical calculation presented here regards a freestream Mach number M = 0.9 and the 

model incidence angle is  = 4º. The discretization of the computational domain consists of 

an unstructured distribution of 512553 points and second-order approximations are built on 

clouds with 35 45np  . Next, Cp and Mach number results computed for the proposed flow 

conditions are presented in Figure 11 and Figure 12 respectively.  

 

Figure 11: Cp distribution on the NACA wing-body configuration (only half of the model has been calculated, 

the other part is simply included for visualization purposes). M = 0.90 and  = 4.0º. 



23 

 

Figure 12: Mach number isolines on the NACA wing-body configuration and the symmetry plane. M = 0.90 

and  = 4.0º. 

Figure 13 shows a comparison of Cp distributions calculated at two spanwise stations  = 0.4 

and  = 0.8 on the wing with experimental measurements [32].  

 

Figure 13: A comparison between computed and experimental Cp distribution along two spanwise wing stations 

 = 0.4 and  = 0.8. NACA wing-body configuration, M = 0.90 and  = 4.0º. 

Additionally, the longitudinal Cp distribution along the fuselage symmetry plane is compared 

with experimental results in Figure 14.  

 

 

 



24 

 

Figure 14: Comparison between computed and experimental Cp distribution along the fuselage symmetry plane. 

NACA wing-body configuration, M = 0.90 and  = 4.0º. 

As in the previous case, minor differences (due to the inviscid assumption adopted for the 

computational flow model) exist between numerical and experimental results. In spite of this, 

both results match very well as it can be observed in Figures 13 and 14. 

7. AN h-ADAPTIVE PROCEDURE FOR FINITE POINT CALCULATIONS 

There are several reasons that explain the appeal of mesh (or point) adaptive strategies in the 

different fields of numerical simulation. Adaptivity reduces the effort needed to obtain a 

proper discretization for numerical analysis as regards man-hours, CPU-time and memory 

requirements significantly. Also, adaptive procedures make the accurate computation of the 

smaller scales of the flow field easier, especially when we do not have a priori information 

concerning the solution, and become essential for non-stationary problems involving moving 

discontinuities. 

In the introduction to this work we have referred to some topics in numerical computation 

where meshless approaches seem to have certain advantages over mesh-based approaches and 

adaptivity is one of them. The fact that meshless techniques do not need to keep a conforming 

mesh makes them specially well-suited for implementing adaptive procedures. With the 

purpose of exploiting this capability, in this Section we develop an adaptive FP procedure for 

compressible flow problems. 

7.1 The refinement criterion 

The FP solution at a previous time-step is employed with the aim of identifying local clouds 

of points where new points should be inserted or existing points could be removed from the 



25 

computational domain. This is accomplished by a normalized indicator that evaluates, in an 

approximate manner, the curvature of the solution at each point 

    
1

1
, max 1,

nn

i ji j i m i
jm

i n    
 

     l     (42) 

In the expression above nn is the number of points in the first layer of nearest neighbours of xi 

(already obtained in the local cloud construction stage), ji j i l x x  is the vector linking each 

pair of points (xi,xj) and  is the density of the fluid. Naturally, another flow variable or a 

combination of flow variables can be adopted for calculating the refinement indicator (42). 

The last option could be appropriate for the treatment of viscous fluid flows.  

The refinement criterion is applied as follows. Based on Eq. (42); new points are inserted 

around xi when i > max and, conversely, point xi is removed from the computational domain 

if i < min. The limits max and min depend on the problem under consideration; in the 

numerical examples presented here max  0.1 and min  0.005 are chosen. It should be notice 

that in particular cases, the proposed normalization causes a lack of sensitivity to relative 

small gradients in the flow field. When this happens, it could be useful to avoid the 

normalization by setting 1m   or taking another local maximum for normalizing the 

indicator. 

7.2 The strategy 

Once the refinement criterion has been applied, the remaining of the proposed adaptive 

procedure can be reduced to three main steps: the insertion of new points, the removal of 

existing points and an update. The latter makes reference to the construction of the data 

associated to each new point and the re-construction of the data associated to affected existing 

points respectively. We consider that an existing point is affected when a new point falls 

inside its cloud, or the spatial position of any point in its cloud changes due to smoothing. 

7.2.1 Insertion of new points 

When a star point xi is marked to refine (i > max), its Delaunay grid of nearest neighbours is 

used to calculate the Voronoi vertices surrounding xi. Next, new candidate points xc are set at 

these vertices, i.e. at the centre of the empty circumcircle/circumsphere calculated for each 

triangle/tetrahedron (2-D/3-D) composing the Delaunay grid of nearest neighbours. Each 

candidate point xc is accepted if it meets the following requirements: 



26 

r1. The radius of the empty circumcircle/circumsphere (rc) complies with rc > rmin, being rmin a 

user-defined parameter which stands for the minimum admissible distance between points. 

r2. The radius rc is smaller than a certain internal measure (de) of the triangle/tetrahedron 

which originates the empty circumcircle/circumsphere. The internal measure de is calculated 

as ˆ ˆ ˆmax(| | | )e j j jd , ,   e i | e j | e k |  where subscript j stands for each edge of the 

triangle/tetrahedron and ˆ ˆ ˆ( ), ,i j k  are unit vectors in each spatial direction. 

r3. The distance from the candidate point xc to another new point previously accepted is 

greater than the minimum admissible distance between points rmin. 

If any of the edges/triangles of the local Delaunay grid of nearest neighbours lies on the 

boundaries, a new candidate boundary point is obtained as an average of the position of the 

points defining this edge/triangle. The candidate boundary point is accepted if the distance to 

the nearest point is greater than rmin. In our algorithm we perform the boundary refinement 

first and then we refine the discretization into the domain. Note that when the initial boundary 

discretization is very coarse, the straightforward procedure proposed for boundary refinement 

could deteriorate the boundaries, resulting in a lack of reliability of the computational model. 

In such cases, the position of new boundary points can be obtained using a higher-order 

interpolation of the underlying existing boundary points (cf. [33]). Figure 15 sketches the 

refinement procedure for a 2D cloud of points. 

7.2.2 Removal of existing points 

Point removal capabilities are indispensable for treating non-stationary problems. In this 

work, the removal of points is restricted only to the existing points that have been inserted in 

prior refinement levels. In other words, the initial set of points (original coarse discretization) 

is conserved through the calculation, although the spatial position of these points could 

change due to smoothing. This criterion avoids several time-consuming verifications and 

guarantees a minimum appropriate geometrical support for the calculation.  



27 

 
Figure 15: Refinement of a bi-dimensional cloud of points. The filled points xc meet the requirements r1-r3 and, 

in consequence, are inserted around the star point xi. 

7.2.3 Update 

Once the insertion and removal of points is finished, a few steps of a Laplacian smoothing are 

carried out on the affected area. This is particularly helpful when points have been removed in 

large quantities. After that, the clouds of points and shape functions concerning the new 

points are constructed. In addition, the data concerning existing clouds of points affected by 

the insertion of new points or smoothing is re-constructed. Finally, the flow variables at new 

points are calculated as an average of the variables at their previously existing nearest 

neighbours. 

8. SOME EXAMPLES OF ADAPTIVE FINITE POINT CALCULATIONS 

In this Section several numerical examples are presented in order to illustrate the performance 

of the proposed FP adaptive procedure. We begin with two computation cases intended to 

verify the adaptive numerical solution. The first example concerns a 2D adaptive calculation 

of a supersonic flow around a double-wedge airfoil and the second one deals with the solution 

of a shock-tube problem in a 2D domain. A third example is related to the solution of a 

transonic flow over a NACA 0012 airfoil and the fourth and last example involves a 3D flow 

calculation over the ONERA M6 wing. The two final calculation cases give an idea about the 

possibilities of application of the present adaptive FP meshless technique to practical 

engineering problems. 

8.1 Supersonic flow past a double wedge airfoil  

This example resolves the flow around a double wedge airfoil immersed in a supersonic flow. 

The airfoil has a unitary chord c = 1 and the wedge angle is  = 20º; the upstream Mach 



28 

number is M = 2 and the airfoil is set at an incidence angle  = 0º. The initial coarse 

discretization is composed by an unstructured distribution of 1279 points and second-order 

spatial approximations are built in clouds where 15 20np  . The final adapted 

discretization, achieved after 70 refinement levels, consists of 51907 points. Next, the initial 

and the final adapted discretization are shown in Figure 16. 

 

 

Figure 16: Supersonic flow past a double wedge airfoil. Left: original coarse discretization; Right: final adapted 

discretization (70 refinement levels). The coloured points show Cp results. M=2.0 and =0º. 

Figure 17 presents a comparison between the analytical solution of the problem, calculated 

along an x-cut in the domain located 0.1c above the airfoil chord-line, and the numerical 

solution computed at successive refinement levels. There can be observed how the numerical 

solution of successive refined-discretizations converges into the analytical solution of the 

problem. Finally, the time convergence of the problem is shown in Figure 18 where the 

complete process of the adaptive numerical computation can be seen. 



29 

 
Figure 17: A comparison between the analytical Cp distribution along an x-cut on the domain and computed 

numerical results obtained at different refinement levels.  The cut is located at y/c=0.1 and the airfoil leading 

edge coincides with the point (x,y) = (0,0). M=2.0 and =0º. 

 

Figure 18: Convergence history of the double wedge airfoil calculation (70 refinement levels). M=2.0 and 

=0.0º. 



30 

When the simulation starts, some time steps are performed using the low-order scheme in 

order to initialize the flow field around the airfoil. Then, the flow solver switches to the high-

order scheme and, even though it affects the convergence, the latter is recovered after a few 

time steps. For a value of the density temporal residual of 1.0E-5, the first refinement level is 

performed. Then, consecutive refinement levels are carried out every 200 time steps. Note 

that the peaks of the convergence curve correspond to each refinement level performed during 

the computation. 

8.2 The shock tube problem  

The shock tube problem is a one-dimensional non-stationary Riemann problem proposed by 

Sod in 1978 [34]. In this example we adopt a unitary-length bi-dimensional domain and carry 

out an adaptive shock tube simulation defined by the following initial conditions 

  
 
 

T

L
0 T

R

1,0,0, 2.5 0.5
, t

0.125,0,0, 0.25 0.5

x

x

  
 

 

U
U x

U
 (43) 

which give a pressure ratio across the diaphragm pL/pR = 10 (notice that the diaphragm 

position is x=0.5). According to the given initial conditions, the intensity of the shock is 

moderate and the flow regime after the expansion is subsonic. 

The computational domain is initially discretized by a coarse homogeneous distribution of 

217 points and second-order spatial approximations are calculated in clouds with 

12 20np  . After the rupture of the diaphragm, successive refinement levels are performed 

at regular periods. The simulation time in this example is t = 0.2 seconds, for which the 

adapted discretization reaches a total of 1761 points. Next, Figure 19 presents some snapshots 

of adapted discretizations taken at different times from the rupture of the diaphragm. There, 

the coloured points show flow density numerical results. 



31 

 

Figure 19: Adapted discretizations obtained for the shock-tube problem (pL/pR=10) at different times from the 

rupture of the diaphragm (the top image shows the initial coarse discretization). 

Figure 20 displays several comparisons between the numerical and the analytical solution for 

the density variable along the tube, corresponding to the simulation times pointed out in 

Figure 19. 



32 

 

Figure 20: Comparison between numerical and analytical solutions for the density distribution along the 

centreline of the shock tube at different times from the rupture of the diaphragm (pL/pR=10). The numerical 

solution at the bottom right corner is calculated using a fine discretization without performing any refinement 

level. 



33 

In Figure 20, a considerable smoothing of the numerical solution can be observed in the first 

refinement levels (t = 0.045 and 0.1 secs.) for which the discontinuities are noticeable 

smeared. This fact can be explained to a great extend by the coarse discretization employed in 

order to start the simulation. Note that the number of points to be added in a given refinement 

level depends upon the flow field variables but also on the existing point discretization (cf. 

Section 7.2.1). Consequently, certain geometrical restrictions limit the maximum number of 

new points inserted at a given refinement level, this makes the discretization unable to adapt 

instantaneously to the flow variables in a proper manner. Nevertheless, a closer agreement 

between the numerical and the analytical solution is obtained for the simulation times t = 

0.14, 0.19 and 0.20 secs. In these cases, an improved flow resolution but also minor 

inaccuracies in the discontinuities location can be observed. We suspect that this behaviour 

could be related either to the straightforward procedure proposed to interpolate the numerical 

solution between the old and the new refined discretization or to the Laplacian smoothing 

performed after each addition and/or removal of points. However, the solution should not be 

sensitive to the smoothing operations if a proper interpolation procedure is employed.  

A numerical calculation performed with a fixed homogeneous discretization, having a point 

density similar to that in the final adapted discretization of Figure 19, is presented at the 

bottom left corner of Figure 20. Comparing the latter result with its counterpart obtained 

using the adaptive simulation, it is possible to observe that the numerical dissipation 

introduced by the refinement procedure is quite small. It should be noticed that the problem 

setting employed in both calculations is the same. Finally, it can be observed that the 

normalization adopted for calculating the refinement indicator may cause some detriment to 

the contact discontinuity resolution as stronger gradients are present at the shock location. In 

cases like this, it would be useful to adopt a local criterion for calculating the refinement 

indicator. 

8.3 Transonic flow around a NACA 0012 airfoil  

This example concerns the computation of a transonic inviscid flow past a NACA 0012 

airfoil. The freestream Mach number is M = 0.8 and the incidence angle is  = 1.25º. The 

initial spatial discretization involves an unstructured distribution of 976 points and second-

order spatial approximations are calculated in clouds with 15 20np  . The finest adapted 

discretization consists of 4938 points and is achieved after 15 refinement levels. Both, the 

initial and the final discretizations are shown in Figures 21 and 22 respectively. 



34 

 

Figure 21: A view of the original coarse discretization in the proximity of the NACA 0012 airfoil. 

 
Figure 22: A view of the finest adapted discretization in the proximity of the NACA 0012 airfoil obtained after 

15 refinement levels. 

 



35 

Notice that the adaptive procedure captures all the flow features with precision. The strong 

shock wave on the upper side of the airfoil, the weaker shock on its lower side and the leading 

and trailing edge regions are appropriately captured via the refinement procedure. Figure 23 

shows the Cp field around the airfoil calculated for the final adapted discretization.  

 

Figure 23: Cp isolines in the near-field of the NACA 0012 airfoil obtained with the finest adapted discretization. 

M=0.80 and =1.25º. 

The computed Cp distribution on the airfoil is compared to numerical reference results [35] in 

Figure 24, where good agreement can be observed. Finally, the time convergence history of 

the problem is presented in Figure 25. 

 

Figure 24: Cp distribution on the NACA 0012 airfoil obtained with the finest adapted discretization. A 

comparison between computed and numerical reference results [37]. M=0.80 and =1.25º. 



36 

 

Figure 25: Convergence history of the NACA 0012 airfoil calculation (15 refinement levels). M=0.80 and 

=1.25º. 

8.4 A three-dimensional example: the ONERA M6 wing 

This example solves the 3D flow around the ONERA M6 wing adopting the freestream 

conditions given in Section 6.2. The initial coarse discretization consists of an unstructured 

distribution of 66864 points and second-order approximation bases are employed in clouds 

with 30 45np  . In this simulation the adapted discretization reaches a total of 102592 

points after 35 refinement levels. Next, Figure 26 shows the original and final discretizations 

of the wing; coloured points display Cp results. 

 

Figure 26: A view of the upper side of the ONERA M6 wing. Left: original coarse discretization; Right: finest 

adapted discretization (35 refinement levels). M=0.84 and =3.06º. 



37 

The initial discretization of the wing consists of 14221 points and 28314 triangle elements 

whereas the final adapted discretization is composed of 15537 points and 30942 triangles. 

Note that new points are mainly concentrated around the strong shock wave spanning the 

wing where large gradients are detected. In order to make the refinement indicator (42) also 

sensitive to the smaller gradients in the flow field, we can decrease the parameter max or 

change the normalization criterion. However, as the indicator becomes more sensitive, the 

refinement procedure loses its local character. This would lead to an insertion of large sets of 

new points for each refinement level and the convergence of the problem could be seriously 

affected in some cases. Thus, the adoption of local maxima for normalizing the indicator 

seems a more adequate choice.  

Figure 27 compares the Cp distributions along two sections of the wing calculated with the 

original and the finest discretization. In the same figure, a view of the finest adapted point 

discretization for a cut in the plane x-z of the domain (passing through the same spanwise 

stations) is presented. Finally, the convergence history of the problem is shown in Figure 28. 

 

Figure 27: Left: Cp distributions along two wing sections =0.44 (top) and =0.95 (bottom) calculated with the 

original and the final adapted discretization. Right: cuts x-z of the finest refined domain passing through wing 

stations =0.44 (top) and =0.95 (bottom). ONERA M6 wing M=0.84 and =3.06º. 



38 

 

Figure 28: Convergence history of the ONERA M6 wing adaptive calculation (35 refinement levels). M=0.84 

and =3.06º 

Regarding the computational cost of the proposed FP adaptive technique, numerical 

experiments show that the CPU-time required by each refinement level is approximately 

equal to the time involved for the update stage (cf. Section 7.2.3) and the cost of inserting and 

removing points is almost negligible. In general, the overall CPU-time involved for each 

refinement level is only a fraction of the time required for advancing the problem solution a 

single time-step.  

9. CONCLUSIONS 

An adaptive Finite Point Method (FPM) for compressible flow calculations has been 

presented. On the basis of a robust WLSQ procedure and an iteratively-improved local 

approximation, an upwind semi-discrete scheme is constructed for each cloud of points. This 

methodology, in conjunction with a multi-stage time integration scheme, allows solving real 

3D problems minimizing the dependence of the numerical results on the spatial discretization 

of the analysis domain, the local cloud topology and the parameters of the local 

approximation. All these are important achievements which make possible further 

enhancement and extension of the FPM capabilities for practical 3D applications. 

In the introduction to this article we made reference to certain topics in numerical simulation 

which offer good opportunities for the development and promotion of meshless techniques. 



39 

With the aim of exploiting these opportunities, an adaptive FPM for compressible flow 

calculations has been developed. Several test cases involving stationary and non-stationary 

flow problems have been presented with the purpose of exemplifying the performance of the 

proposed technique. All the examples demonstrate that the adaptive FPM is capable of 

properly resolve the essential flow features, achieving robust and reliable adaptive solutions 

with a low computational cost. Although some numerical tests (of which a few have been 

reported here) highlight the need for more accurate refinement criteria and an improved 

treatment of moving discontinuities, the overall performance of the proposed adaptive FPM is 

highly satisfactory and this can be seen as the main achievement of this work. 

Real viscous flow involves certain features where meshless techniques, and especially 

adaptive meshless techniques, could make important contributions, e.g. boundary layer 

discretization and shock-boundary layer interaction problems. In this sense, we have 

developed the basic tools for tackling these kinds of problems and solving them constitutes 

our next short-term goal.       

Regarding computational efficiency we must say that at present we still lack precise 

performance comparisons between the FPM described here and conventional discretization 

techniques. However, we estimate that the computational cost of a 3D FP computation using 

the methodology presented in this paper would typically exceed a similar FE-based 

computation by a cost factor of 3 being 5 a typical value. Hence, if a competitive FPM is to be 

achieved, an improvement in computational efficiency is indispensable. In that respect, 

numerous techniques can be implemented in order to accelerate convergence to the steady 

state. Combining these techniques with a suitable data-structure and an optimized way to 

perform the numerical calculations, it is possible to enhance the efficiency of the present FPM 

considerably. Moreover, performance comparisons between the present FPM and other 

meshless techniques accomplishing similar tasks are essential for placing the FPM into the 

actual meshless methods scenario. In conclusion, the results obtained with the FPM are very 

encouraging, though efficiency is still a pending matter. Consequently, future research efforts 

will take highly into consideration the improvement of this key point. 

ACKNOWLEDGEMENTS 

The first author would like to acknowledge the support of Alan Program, the European 

Union Programme of High Level Scholarships for Latin America, scholarship Nº 

E04D027284AR. We express our gratitude to Dr. Nestor Calvo for helping with the point 



40 

generation technique employed in this work. Last but not least, the many valuable 

contributions of Dr. Roberto Flores to this work are also gratefully acknowledged. 

REFERENCES 

[1] Belytschko T., Krongauz Y., Organ D., Fleming M., Krysl P. Meshless methods: An 

overview and recent developments. Computer Methods in Applied Mechanics and 

Engineering 1996; 139: 3-47. 

[2] Fries T., Matthies H. Classification and overview of meshfree methods. Department of 

Mathematics and Computer Science, Technical University of Braunschweig. Inf. 2003-3, 

2004. 

[3] Li S., Liu W. K. Meshfree and particle methods and their applications. Applied 

Mechanics Reviews 2002; 55:1-34. 

[4] Gu Y. T. Meshfree methods and their comparisons. International Journal of 

Computational Methods 2005, 4:477-515. 

[5] Duarte C. A. A review of some meshless methods to solve partial differential equations. 

Texas Institute for Computational and Applied Mathematics, TICAM Report 95-06. 

[6] Liu W. K., Chen Y., Jun S. and Belytschko T. Overview and application of the 

reproducing Kernel particle method. Archives of Computational Methods in Engineering 

1996, 5(1):3-80. 

[7] Dolbow J., Belytschko T. An introduction to programming the meshless element free-

Galerkin method. Archives of Computational Methods in Engineering 1998, 5(3):207-

241. 

[8] Oñate E., Idelsohn S., Zienkiewicz O. C., Taylor R. L., Sacco C. A Finite Point Method 

for analysis of fluid mechanics problems. Applications to convective transport and fluid 

flow. International Journal for Numerical Methods in Engineering 1996; 39: 3839-3866. 

[9] Oñate E., Idelsohn S., Zienkiewicz O. C., Fisher T. A Finite Point Method for analysis of 

fluid flow problems. Proceedings of the 9th Int. Conference on Finite Elements Methods 

in Fluids, Venize, Italy, 1995; 15-21.  

[10] Oñate E., Idelsohn S., Zienkiewicz O. C., Taylor R. L., Sacco C. A stabilized Finite Point 

Method for analysis of fluid mechanics problems. Computer Methods in Applied 

Mechanics and Engineering 1996; 139: 315-346. 

[11] Oñate E., Sacco C., Idelsohn S. A Finite Point Method for incompressible flow problems. 

Computing and Visualization in Science 2000; 3: 67-75. 

[12] Fischer T. R. A contribution to adaptive numerical solution of compressible flow 



41 

problems. Ph.D. Thesis, Universitat Politècnica de Catalunya, 1996. 

[13] Sacco C. Development of the finite point method in fluid mechanics (in Spanish). Ph.D. 

Thesis, School of Civil Engineering, Universitat Politècnica de Catalunya, 2001. 

[14] Löhner R., Sacco C., Oñate E., Idelsohn S. A Finite Point Method for compressible flow. 

International Journal for Numerical Methods in Engineering 2002; 53:1765-1779. 

[15] Oñate E., Perazzo F., Miquel J. A Finite Point Method for elasticity problems. Computers 

& Structures 2001; 79: 2151-2163. 

[16] Perazzo F., Miquel J., Oñate E. A finite point method for solids dynamic problems (in 

Spanish). Revista Internacional de Métodos Numéricos para Cálculo y Diseño en 

Ingeniería 2004; 20(3):235-246. 

[17] Perazzo F., Oller S., Miquel J., Oñate E. Advances in the finite point method for solid 

mechanics (in Spanish). Revista Internacional de Métodos Numéricos para Cálculo y 

Diseño en Ingeniería 2006; 22(3):153-167. 

[18]  Oñate E. Derivation of stabilized equations for numerical solution of advective-diffusive 

transport and fluid flow problems. Computer Methods in Applied Mechanics and 

Engineering 1998; 151:233-265. 

[19] Sridar D., Balakrishnan N. An upwind finite difference scheme for meshless solvers. 

Journal of Computational Physics 2003; 189:1-29. 

[20] Praveen C. A positive meshless method for hyperbolic equations. ARDB Centre of 

Excellence for Aerospace CFD, Department of Aerospace Engineering, Indian Institute 

of Science, Report 2004-FM-16, 2004. 

[21] Boroomand B., Tabatabaei A. A., Oñate E. Simple modifications for stabilization of the 

finite point method. International Journal for Numerical Methods in Engineering 2005; 

63:351-379. 

[22] Ortega E., Oñate E., Idelsohn S. An improved finite point method for three-dimensional 

potential flows. Computational Mechanics 2007; 40:949-963. 

[23] Perazzo F., Löhner R., Perez-Pozo L. Adaptive methodology for meshless finite point 

method. Advances in Engineering Software 2007; 39:156-166. 

[24] Lancaster P., Salkauskas K. Surfaces generated by moving least squares methods. 

Mathematics of Computation 1981; 37:141-158. 

[25] Demmel J. W. Applied numerical linear algebra. Society for Industrial and Applied 

Mathematics, 1997. 

[26] Idelsohn S., Calvo N., Oñate E., Polyhedrization of an arbitrary 3D point set. Computer 

Methods in Applied Mechanics and Engineering 2003; 192:2649-2667. 



42 

[27] Roe P. L. Approximate Riemann solvers, parameter vectors and difference schemes. 

Journal of  Computational Physics, 1981; 43:357-372. 

[28] Turkel E., Improving the accuracy of central difference schemes. ICASE Report 88-53, 

1988. 

[29] Van Leer B., Towards the ultimate conservative difference scheme. V, A second order 

sequel to Godunov’s method. Journal of Computational Physics, 1979; 32:101-136. 

[30] Schmitt V., Charpin F. Pressure distributions on the ONERA-M6-wing at transonic Mach 

numbers. Experimental data base for computer program assessment. Report of the Fluid 

Dynamics Panel Working Group 04, AGARD AR 138, 1979 

[31] NPARC Alliance CFD verification and validation web site. Web page: 

http://www.grc.nasa.gov/WWW/wind/valid/archive.html 

[32] Loving D., Estabrooks B., Transonic-wing investigation in the Langley 8-foot high-speed 

tunnel at high subsonic Mach numbers and at a Mach number of 1.2. Analysis of pressure 

distribution of wing-fuselage configuration having a wing of 45º sweepback, aspect ratio 

4, taper ratio 0.6, and NACA 65A006 airfoil section. National Advisory Committee for 

Aeronautics. Research Memorandum NACA RM L51F07, 1951. 

[33] Zorin D., Schröder, P., Sweldens, W. Interpolating Subdivision for Meshes with 

Arbitrary Topology. In Proceedings of SIG-GRAPH, 1996; 96:189–192. 

[34] Sod G. A. A survey of several finite-differences methods for systems of nonlinear 

hyperbolic conservation laws. Journal of Computational Physics, 1978; 27:1-31. 

[35] Pulliam T. H., Barton J. T., Euler computations of AGARD Working Group 07 Airfoil 

Test Cases. AIAA 23rd Aerospace Summer Meeting, Reno, Nevada, 1985; AIAA Paper 

85-0018. 


