











































An adaptive Fixed-Mesh ALE method for free surface flows

Joan Baiges∗,1,2, Ramon Codina2,1, Arnau Pont2,1 and Ernesto Castillo 3

1 Centre Internacional de Mètodes Numèrics a l’Enginyeria (CIMNE),
Edifici C1, Campus Nord UPC C/ Gran Capità S/N 08034 Barcelona, Spain

2 Universitat Politècnica de Catalunya, Jordi Girona 1-3, Edifici C1, 08034 Barcelona, Spain
3 Universidad de Santiago de Chile, USACH. Av. Bernardo O’Higgins 3363, Santiago de Chile, Chile

∗jbaiges@cimne.upc.edu

September 23, 2016

Abstract

In this work we present a Fixed-Mesh ALE method for the numerical simulation of free sur-
face flows capable of using an adaptive finite element mesh covering a background domain. This
mesh is successively refined and unrefined at each time step in order to focus the computational
effort on the spatial regions where it is required. Some of the main ingredients of the formulation
are the use of an Arbitrary-Lagrangian-Eulerian formulation for computing temporal derivatives,
the use of stabilization terms for stabilizing convection, stabilizing the lack of compatibility be-
tween velocity and pressure interpolation spaces, and stabilizing the ill-conditioning introduced
by the cuts on the background finite element mesh, and the coupling of the algorithm with an
adaptive mesh refinement procedure suitable for running on distributed memory environments.
Algorithmic steps for the projection between meshes are presented together with the algebraic
fractional step approach used for improving the condition number of the linear systems to be
solved. The method is tested in several numerical examples. The expected convergence rates
both in space and time are observed. Smooth solution fields for both velocity and pressure are
obtained (as a result of the contribution of the stabilization terms). Finally, a good agreement
between the numerical results and the reference experimental data is obtained.

1 Introduction

In the numerical simulation of physical phenomena many times one is faced with the need of simulat-
ing problems where the physical domain evolves in time. This is the case for instance in the numerical
simulation of structural problems involving large deformations, multifluid flow problems or problems
involving a free surface, amongst others. One of the main issues in such cases is to decide how to
tackle with this movement. If a computational physics mesh is used, as for instance in finite elements
simulations, a mesh which covers the physical domain is required (other possibilities which do not
require a computational mesh exist such as meshless methods [56] or spectral methods [25], although
these are perhaps not so common in day-to-day engineering practice).

This computational mesh needs to deal with the displacement of the physical domain. In many
cases, the mesh can adapt to the shape of the domain by using Lagrangian formulations [17] which
take into account large displacements and geometric non-linearities, or Arbitrary Lagrangian-Eulerian
(ALE) formulations [38]. In most solid dynamics problems and even in fluid-structure interaction
problems where the solid body is subject to large deformations but still has an anchor point [62],
the simulation can be approached using these methods. In other cases, however, domain displace-

1



ments and deformations are so large that it is impossible for the mesh to adapt its shape to the new
configuration without suffering from element distortion or element folding.

Several methodologies have been devised to address this situation. The most straightforward
approach consists in, when an excessive mesh deformation is reached, computing a new mesh which
covers the deformed configuration domain and project the results from the deformed mesh to the
new mesh [5, 37, 54]. However, this step can require the use of external software for meshing the
deformed domain, an operation which might be difficult to perform if simulations are run in a parallel
environment. Moreover, in problems undergoing very large and quick deformations this step can be
required to be repeated many times during the overall simulation and can become expensive in terms
of computational time. Alternative approaches to remeshing strategies are for instance the use of
meshless methods which do not require a computational mesh but rely instead on an approximation
space of overlapping functions in the physical space [56]. Particle finite element methods [58] on the
contrary, adopt a purely Lagrangian framework where each node of the finite element mesh is tracked
through time. Although nodes are kept during the whole simulation, elements can be destroyed and
regenerated at each time step if their deformation is too large.

Another approach (and the one in which this work is focused) is what is known as embedded or
fixed mesh methods. In fixed mesh methods the boundary of the physical domain does not need to
match with the boundary of the mesh. In this case boundary conditions need to be applied in a bound-
ary which is immersed, and the variational finite element equations do only have physical meaning
over the part of the mesh which is occupied by the physical domain. Families of fixed mesh methods
are often classified precisely depending, firstly, on the way each method deals with the imposition
of boundary conditions, and secondly, on the way they deal with time and space integration over
the fixed mesh [55]. Regarding the imposition of Dirichlet boundary conditions, several approaches
exist such as the use of penalty terms as in the original immersed boundary method [50, 59], the
use of Lagrange multipliers [15, 42, 43, 13, 33, 20, 16, 3] which may require the use of additional
unknowns accounting for the fluxes on the Dirichlet boundary, or the well-known Nitsche’s method
[57, 47, 44, 23], which yields symmetric, stable variational formulations through the use of a limited
penalty term whose value needs to be estimated.

Regarding the way time and space integration is performed, several approaches can be adopted as
well. In the original immersed boundary method [59] and in the fictitious domain method [43], the
part of the computational mesh which is not covered by the physical domain is considered to be, and
computed as if it was, made of the same material as the physical domain. Although this approach
can be convenient and it has advantageous properties when dealing with fluid-structure interaction
problems using a partitioned approach and facing the so called added-mass effect [41, 9, 8, 21, 32],
it also introduces an error due to the fact that temporal derivatives in nodes close to the boundary are
computed using velocity values from the non-physical, meaningless domain. This is also the case for
other approaches like the ones presented in [61, 52, 51], where some kind of approximation needs to
be done in order to compute the time derivative close to the interface. In order to cope with this issue,
the Fixed-Mesh ALE method [34] was developed with the objective of accurately computing the
temporal derivative at nodes close to the boundary by using an ALE strategy followed by a projection
step back to the original background mesh. Other methodologies such as isogeometric analysis have
also been applied to the problem of free surface flows recently (see [2, 4]).

In this paper we present the extension of the Fixed-Mesh ALE method to an adaptive framework
for the simulation of free surface flows. The Fixed-Mesh ALE method was first used in [45] for the
simulation of lost foam casting and in [35] in an application to free surface flows. The general formu-
lation with details on the implementation and side ingredients like imposition of Dirichlet boundary
conditions in immersed boundaries and a Lagrange Multiplier strategy for performing interpolations
with restrictions can be found in [34], and its extension to fluid-structure interaction in [11, 12].
More recently, the Fixed-Mesh ALE method has been used in [60] in the context of rigid bodies-fluid

2



interaction in a parallel setting.
Here, we extend the method and we couple it with several ingredients which allow to use it in an

adaptive setting. Firstly, the Fixed-Mesh ALE method is put together with the adaptive refinement
library RefficientLib [10], which makes the method capable of running on distributed memory
parallel systems and handling meshes with hanging nodes. This is complemented with a refinement
criteria that forces the mesh to improve its accuracy in the region close to the free surface interface.

Secondly, the stability properties of the finite element formulation are enhanced for the geometri-
cal configurations in which the free surface cuts the mesh in an ill-conditioned manner. For this, we
rely on ghost stabilization terms [19] which ensure that, independently on the geometry of the mesh
and the free surface, the resulting system of equations is stable and has a good condition number. For
the orthogonal projections involved in this type of non-consistent stabilization terms, we rely on L2

projections which are evaluated after each non-linear iteration in order to optimize the sparsity pattern
of the linear system matrix.

Finally, a splitting scheme for the Navier-Stokes equations is used which allows to separate the
solution of the momentum and the pressure equations. Although the splitting scheme is a common
one and has been used in previous works, its application to free surface problems has some particular-
ities which are highlighted here. In particular, two types of splitting schemes for the incompressible
Navier-Stokes equations are considered, namely a pressure Poisson equation based fractional step
method and a purely algebraic fractional step method. In both cases, specific terms for the stabiliza-
tion of ill-conditioned cuts in the finite element mesh are considered.

The paper is organized as follows. In Section 2 the Fixed-Mesh ALE formulation is presented.
Emphasis is put in the finite element formulation, temporal discretization, computation of the tempo-
ral derivatives and the tracking of the free surface interface through a level set method. In Section 3,
the algorithmic details of the projection step between meshes of the Fixed-Mesh ALE method are ex-
plained, and the particularities of its application in a parallel adaptive setting are detailed. In Section
4, two different approaches for the solution of the system of equations arising from the incompress-
ible Navier-Stokes equations in its application to the solution of free surface flows are presented. In
this section the focus is centered on the required additional stabilization terms when solving free sur-
face problems and the required ingredients for the imposition of Dirichlet boundary conditions in the
pressure Poisson equation. In Section 5, the adaptive approach for the Fixed-Mesh ALE method is
described. Besides the adaptive algorithm, the refinement criteria implementation is also explained.
Numerical examples which illustrate the performance of the method are presented in Section 6, and
conclusions close the work in Section 7.

2 Fixed-Mesh ALE formulation

In this section we summarize the Fixed-Mesh ALE formulation and all the new numerical ingredients
required in order to obtain a stable and accurate solution for the adaptively refined finite element
method for free surface problems. This summary can be split into several parts, which cover the main
ingredients of the method: stabilized finite element formulation, ALE mesh movement definition,
level set function tracking and projection step.

2.1 Physical setting

Let us define the background domain Ω0 ⊂ Rd with d = 2,3 indicating the space dimensions. This
is the domain which can be occupied by the fluid during the time interval [0,T ], and we denote by
Ω(t) the part of Ω0 which is effectively occupied by the fluid at each time instant t ∈ [0,T ]. The
moving boundary of Ω(t) is called the free surface, and it will be represented as Γfree(t) = ∂Ω(t) \(
∂Ω

0∩∂Ω(t)
)
. The movement of the fluid and the time evolution of the free surface causes the fluid

3



domain Ω(t) to change in time, and associated to this movement we define an ALE domain velocity
uuudom(xxx, t)∈Rd , where xxx ∈Ω0 are the spatial coordinates. In order to do this let us define the bijective
mapping χχχ which for every point XXX ∈Ω(0) and time instant t returns a point xxx = χχχ(XXX , t) ∈Ω(t). The
domain velocity can then be defined as

uuudom(xxx, t) =
∂ χχχ(XXX , t)

∂ t
.

In the Fixed-Mesh ALE method, this domain velocity does not coincide in general with the velocity
of the fluid in Ω(t). In fact, only the component of the velocity on Γfree orthogonal to the free surface
and the normal component of the velocity on the boundary of Ω0, ∂Ω0, need to coincide with the
velocity of the fluid uuu(xxx, t) ∈ Rd :

nnn ·uuudom = nnn ·uuu in Γfree∪∂Ω0, (1)

where nnn denotes the outward pointing normal on Γfree and ∂Ω0 and uuu is the fluid velocity. In the rest
of Ω0 the domain velocity will be defined once the spatial discretization is introduced in such a way
that the bijective nature of χχχ on Ω(t) is respected and the computational cost and the mesh distortion
are minimized. We also define the ALE local temporal derivative of a function f as

∂ f
∂ t

∣∣∣∣
χχχ

=
∂ f (χχχ(XXX , t), t)

∂ t
.

Taking these definitions into account, the incompressible Navier-Stokes equations in the ALE frame
of reference can be written as:

ρ
∂uuu
∂ t

∣∣∣∣
χχχ

+ρ (uuu−uuudom) ·∇uuu−∇ ·
(
2µ∇Suuu

)
+∇p = ρ fff ,

∇ ·uuu = 0,

where ρ is the fluid density, µ the viscosity, p the pressure, f the vector of body forces and ∇su is the
symmetrical part of ∇u. Boundary and initial conditions need to be provided for this problem. We
define the fluid stresses as

σσσ = 2µ∇Suuu− pIII,

where III is the identity tensor. Usually boundary conditions can be subdivided into Neumann and
Dirichlet boundary conditions:

uuu = ūuu on ΓD,

σσσ ·nnn = hhh on ΓN ,

where ΓD is the Dirichlet boundary and ΓN is the Neumann boundary. To simplify the exposition
we will take ūuu = 000. When considering free surface flows, the effect of any fluid outside the Ω(t) is
neglected. Also, the effect of surface tension is neglected, which is a reasonable assumption given
the dimensions and fluid properties of the engineering problems we are interested in. In cases where
the effect of the surface tension is not negligible, it could be taken into account by adding the corre-
sponding boundary forces terms. As a consequence, the boundary condition we enforce in the free
surface is:

σσσ ·nnn = 000 on Γfree.

4



  Figure 1: Background domain Ω0 , and fixed background mesh. The domain covered by the fluid
Ω(t) (in blue) evolves in time. The free surface boundary Γfree cuts some elements of the mesh in
an arbitrary manner. This introduces the need for integrating the finite element equations only on the
region covered by Ω(t) in these elements, leading to subintegration.

2.2 Variational form

Let us consider V =
{

v ∈ H1(Ω(t))d |v = 0 on ΓD
}

and Q = L2(Ω(t)). Let L2(0,T ;V ) be the set of
functions whose V−norm in space is L2 in time and D ′(0,T ;Q) the set of functions whose Q−norm
in space is a distribution in time. Let us also define the forms:

B([vvv,q] , [aaa;uuu, p]) : = ρ 〈vvv,aaa ·∇uuu〉+2µ
(
∇

Svvv,∇Suuu
)
− (p,∇ · vvv)+(q,∇ ·uuu)

L([vvv,q]) : = 〈ρvvv, fff 〉+ 〈vvv,hhh〉
ΓN

,

where aaa = uuu−uuudom is the advective velocity. Here, (·, ·) stands for the L2(Ω(t)) inner product, 〈·, ·〉
for the integral in Ω(t) of the product of two functions, not necessarily in L2(Ω(t)), and 〈·, ·〉

ΓN
for the

integral over ΓN of the product of two functions. The weak form of the problem consists in finding
[uuu, p] ∈ L2(0,T ;V )×D ′(0,T ;Q) such that:

ρ

(
vvv,

∂uuu
∂ t

∣∣∣∣
χχχ

)
+B([vvv,q] , [aaa;uuu, p]) = L([vvv,q]) ∀vvv ∈V,∀q ∈ Q. (2)

Appropriate initial conditions need to be added to this variational form.

2.3 Finite element approximation

In order to approximate problem (2) numerically we aim to use a finite element method using a back-
ground mesh whose boundary does not necessarily match the boundary of Ω(t). This background
mesh will cover Ω0 and can be Cartesian or generally unstructured using general purpose mesh gen-
erators. Note that since the integrals in variational form (2) extend only over Ω(t), subintegration
needs to be performed in elements cut by the fluid free surface Γfree. This is illustrated in Fig. 1.

Let us now introduce the finite element partition Th := {K} defined over domain Ω0, h denoting
the element size. From this partition the finite element spaces Vh⊂V and Qh⊂Q are constructed. The
straightforward introduction of these finite element spaces in equation (2) leads to unstable solutions
of the incompressible Navier-Stokes equations due to the three following causes:

• Instabilities caused by the convective term, which lead to oscillating solutions if the cell Reynolds
number is large.

• The requirement of compatibility conditions between the velocity and the pressure approxima-
tion spaces due to the LBB [18] inf-sup condition.

5



• The ill-conditioning and unstable behavior caused by the subintegration in the elements cut by
the free surface Γfree.

In order to overcome these instabilities, stabilization terms need to be added to variational form (2).
The stabilization terms we use can be classified into two different groups, although they are in fact
very similar and share the same stabilization mechanism.

The first group of stabilization terms corresponds to the Split Orthogonal Subgrid Scale stabiliza-
tion (Split-OSS) presented in [30]. These terms allow to avoid the stabilization problems due to the
convective term and the velocity-pressure inf-sup condition and can be derived from the Variational
Multiscale framework [46]. Their form is the following:

SOSS ([vvvh,qh] , [aaah;uuuh, ph])=∑
K

τK
〈
aaah ·∇vvvh, P̃V (aaah ·∇uuuh)

〉
K(Ω(t))+∑

K
τK
〈
∇qh, P̃Q (∇ph−ρ fff )

〉
K(Ω(t)) .

Here 〈·, ·〉K(Ω(t)) denotes the integral in element K of the mesh only in the part of the element covered
by Ω(t). The stabilization parameter τK is defined at the element level as:

τK =

(
c1

µ

ρh2
+ c2
|aaah|
ρh

)−1
,

where c1 and c2 are algorithmic constants of the formulation (see for instance [28, 29] where the sta-
bilized formulation for incompressible flows is derived). c1 = 4 and c2 = 2 are used in the numerical
examples. P̃V and P̃Q denote a projection onto the space orthogonal to Vh and Qh respectively, which
can be computed as:

P̃V (aaah ·∇uuuh) = aaah ·∇uuuh−PVh(aaah ·∇uuuh),
P̃Q (∇ph−ρ fff ) = (∇ph−ρ fff )−PQh (∇ph−ρ fff ) ,

where PVh is a certain projection or interpolator operator onto Vh and PQh is a certain projection or
interpolator operator onto Qh. Note that the added stabilization terms are not consistent, since they
are not residual based. However the consistency error decreases fast enough with the element size h
thanks to the approximation properties of the projectors PVh and PQh , and the final rates of convergence
of the proposed finite element method are not affected by this lack of consistency (see [30]). Also,
it is important to remark that the integrals for this stabilization terms extend only over Ω(t). Many
projection operators can be used which result in a stable formulation. In our formulation we opt
for an L2 projection, which involves the solution of a system of equations involving a mass matrix.
In the numerical examples, where linear elements are used, we opt for using a lumped mass matrix
projection, which yields an easy to invert projection matrix, and, most importantly, is not affected by
ill-conditioned cuts because it fulfills the discrete maximum principle.

The second group of stabilization terms are in charge of avoiding the unstable behavior caused by
the subintegration in elements cut by Γfree. These instabilities and ill-conditioning appear when the
free surface cuts the elements close to the interior fluid nodes and far away from the external nodes.
This causes the contribution of the element integral in the external nodes to be small compared to
contributions in other nodes, and instabilities appear. This is illustrated in Fig. 2. A solution for
this issue was proposed in [19] for general finite element problems in what was called ghost penalty
stabilization. The main feature of this method is that it allows to add stabilization terms which ensure
the control on a given field in the cut elements without harming the convergence rate of the method,
even if the added penalty terms are not consistent. This is so because the consistency error of the
ghost terms depends on the difference between the considered field and its interpolation using a given
projector: if the projector is chosen wisely, this consistency error decreases with the mesh size in
such a way that the convergence of the method is not affected. See [39] and [19] for a more detailed
elaboration on the properties of interpolators and the ghost-penalty method. The first applications

6



Figure 2: Left: free surface cuts causing ill-conditioning on the final linear system of equations.
Right: Definition of the domain Ωcut(t) (in orange) used to integrate the ghost penalty stabilization
terms.

of the ghost-penalty method to flow problems can be found in [22, 24, 61]. In this work we have
applied the ideas of the ghost penalty method to the incompressible Navier-Stokes equations in the
context of an adaptive Fixed-Mesh ALE method. The stabilization terms we add are very similar to
the ones used for stabilizing convection and the inf-sup condition, the main difference is that now the
integrals do not extend over Ω(t) but over Ωcut(t), which is composed by the region occupied by the
elements cut by Γfree and the first layer of neighbor elements inside the fluid. The definition of Ωcut(t)
is illustrated in Fig. 2.

The definition for these ghost penalty stabilization terms is the following:

SGhost ([vvvh,qh] , [aaah;uuuh, ph]) = ∑
K

γ1K
〈
∇vvvh, P̃Vcut (∇uuuh)

〉
K(Ωcut(t))

+∑
K

γ2K
〈
∇qh, P̃Qcut (∇ph−ρ fff )

〉
K(Ωcut(t))

,

where the orthogonal projections in the cut elements are defined as:

P̃Vcut (∇uuuh) = ∇uuuh−PVh,cut(∇uuuh),
P̃Qcut (∇ph−ρ fff ) = ∇ph−ρ fff −PQh,cut (∇ph−ρ fff ) .

Note that the integrals for the calculation of the projection operators PVh,cut and PQh,cut span over the
Ωcut(t) domain. As in the previous cases, in our formulation we opt for an L2 projection for operators
PVh,cut and PQh,cut . Again, a lumped mass matrix projector is used for these projectors in the numerical
examples, where linear elements are used. The stabilization parameters γ1K and γ2K are defined
elementwise as follows:

γ1K = c3h
2
τ
−1
K ,

γ2K = c4τK .

As it can be seen they have been defined as a function of the Split-OSS stabilization parameter.
Ideally, c3 = 1 and c4 = 1, but in practical cases different values are required in order to obtain a
stable solution. In the numerical examples presented in this work, c3 = 0.5 and c4 = 0.5 were chosen,
since these values provided the best numerical results.

Finally, the stabilized formulation for the incompressible Navier-Stokes equations in the back-

7



ground non-boundary-matching mesh can be obtained as follows: Find [uuuh, ph] such that

ρ

(
vvvh,

∂uuuh
∂ t

∣∣∣∣
χχχ

)
+B([vvvh,qh] , [aaah;uuuh, ph])

+SOSS ([vvvh,qh] , [aaah;uuuh, ph])+SGhost ([vvvh,qh] , [aaah;uuuh, ph]) = L([vvvh,qh]) ∀vvvh ∈Vh,∀qh ∈ Qh. (3)

2.4 Temporal discretization

For the temporal discretization we rely on simple differencing schemes. Consider a uniform partition
of [0,T ] into N time intervals of lengh δ t. The velocity field at time step n+ 1 is denoted as uuun+1,
whereas its discrete time derivative is denoted as δtuuun+1. We will consider the use of the second order
backward differencing scheme, for which this derivative can be computed as:

δtuuu
n+1 =

3
2 uuu

n+1−2uuun + 12 uuu
n−1

δ t
.

Let us now suppose that we are given a computational domain at time tn with spatial coordinates χχχn,
and uuun and pn are known in this domain. The velocity at tn+1 can the obtained as the solution to:

ρ

(
vvvh, δtuuu

n+1
h

∣∣
χχχ

)
+B

(
[vvvh,qh] ,

[
aaan+1h ;uuu

n+1
h , p

n+1
h

])
+SOSS

(
[vvvh,qh] ,

[
aaan+1h ;uuu

n+1
h , p

n+1
h

])
+SGhost

(
[vvvh,qh] ,

[
aaan+1h ;uuu

n+1
h , p

n+1
h

])
= L([vvvh,qh]) ∀vvvh ∈Vh,∀qh ∈ Qh.

(4)

2.5 Finite element solution in Ω0\Ω(t)

Equation (4) provides the final variational form for the solution of uuuh and ph in Ω(t). However,
something needs to be done for the values of the unknowns in Ω0\Ω(t), since in principle no equation
has been defined so far for the solution of the problem unknowns in this region. Although in principle
the solution is not needed in this region, it is convenient to have some kind of smooth extension which
ensures that no numerical oscillations or sharp gradients are artificially introduced in the algorithm.
For these unknowns we use a harmonic extension from the Ω(t) region to the Ω0\Ω(t) region. The
velocity harmonic extension uuu∗ can be found by solving, at each time step:

−∆uuu∗ = 0 in Ω∗(t),
uuu∗ = uuu in Γ∗(t).

Here Ω∗(t) represents the domain limited by the last layer of nodes belonging to elements covering
(at least partially) Ω(t), Γ∗(t), see Fig. 3. Note that the Dirichlet boundary condition for this problem
can be enforced exactly since Γ∗(t) is formed by the external faces of elements.

Similarly, the harmonic extension for p∗ can be found by solving, at each time step:

−∆p∗ = 0 in Ω∗(t),
p∗ = p in Γ∗(t).

We denote by uuu∗h and p
∗
h the standard finite element approximation to uuu

∗ and p∗, respectively. Note
that no temporal derivative is solved for these harmonic extensions.

8



Figure 3: Definition of Ω∗(t) and Γ∗(t) (in green) for the harmonic extension of uuuh and ph into
Ω

0\Ω(t).

2.6 ALE mesh movement

For the Arbitrary-Lagrangian-Eulerian mesh movement various possibilities for defining the mesh
velocity exist. The essential requisite for the mesh movement is that the area of the mesh which
covers Ω(tn) at tn is deformed in such a way that it covers Ω

(
tn+1

)
at tn+1. This translates into a

boundary condition in the components of the mesh velocity normal to the external boundaries, as seen
in equation (1).

For the movement in the rest of the domain, a smooth extension of the mesh displacement in
the boundaries needs to be obtained. Several methods exist for this which minimize the element
distortion, such as solving elastic problems with elementally varying stiffness coefficients, or using
Laplace problems. In our case we opt for the last choice, which results in a good enough geometry of
the deformed mesh. The problem we need to solve in the interior of Ω0 is then:

∆uuudom = 0 in Ω
0,

nnn ·uuudom = nnn ·uuu on Γfree∪∂Ω0.

This problem is solved using a finite element approximation. Whereas the variational form of the
problem is in principle standard, the application of the Dirichlet boundary conditions needs to take
into account that Γfree is immersed in Ω0 and cuts the elements of the mesh in an arbitrary manner. In
the ∂Ω0 boundary, on the contrary, this Dirichlet boundary condition can be easily applied, because
the nodes of the mesh are on top of the domain boundary. In order to enforce the mesh velocity on Γfree
we rely on the symmetric method for enforcing boundary conditions in embedded grids presented in
[13] and further extended and analyzed in [33, 49], which can be understood as a Linked Lagrange
Multiplier method. This method can be related to Nitsche’s method, its main advantage with respect
to this classical method being that it does not require to estimate the value of the penalty parameter,
and that it ensures that the resulting system is stable with respect to the imposition of the boundary
conditions.

Let us consider that the same interpolation space is used for the approximation of the mesh ve-
locities uuudom and the fluid velocities uuu. If Poisson’s problem is used to compute the smooth mesh
velocity field in the domain interior, the final variational form of the problem including the terms for
enforcing the boundary conditions in Γfree is: for each tn, find uuuh,dom ∈Vh such that:

(∇vvvh,∇uuuh,dom)Ω0 + 〈vvvh,nnn ·PΣh (uuuh,dom)〉Γfree = 〈vvvh,nnn ·PΣh (uuuh)〉Γfree ∀vvvh ∈Vh, (5)

where PΣ (uuuh,dom) is a tensor defined only in the elements cut by Γfree. It is obtained as the vol-

9



ume/boundary projection of uuuh,dom onto an elementwise discontinuous stress space Σh:

1
2
(τh,PΣ (uuuh,dom))ΩΓfree

= 〈nnn · τh,uuuh,dom〉Γfree ∀τh ∈ Σh, (6)

where ΩΓfree is the domain occupied by the elements cut by Γfree (including both the part of the
elements inside Ω(t) and the part outside of it). The stresses space Σh is usually taken to be an order
of interpolation lower than the space for the velocities Vh, although equal order interpolation is also
possible. Equations (5) and (6) are coupled and need to be solved simultaneously. However, taking
into account that the τh functions are elementwise discontinuous and that they extend only over a
single element, the expression of the projection can be computed at the element level and condensed
prior to the matrix assembly. The main feature of the method is that it guarantees stability without the
need of a penalty parameter. See [13] for a detailed description of the method and its properties.

2.7 Fixed-Mesh ALE

Equation (4) provides a stabilized finite element formulation for the incompressible Navier-Stokes
equations in an ALE framework using a non-boundary-matching mesh. However, additional ingredi-
ents need to be introduced in order to deal with simulations where the computational domain under-
goes very large deformations. In these cases, Ω(t) changes its shape greatly when time evolves, and
the mesh becomes too distorted or can have folded elements. The solution to this issue in classical
ALE methods is to build a new mesh with good element geometrical properties in the configuration
at time t and then proceed to a projection step from the distorted mesh to the new mesh. However,
building the new mesh can be computationally expensive and require to stop the simulation in order
to call a mesh generator. The main advantage of the Fixed-Mesh ALE method is that since the mesh
does not need to match the boundary of the physical domain, the original undistorted mesh covering
Ω

0 can always be used as the new mesh when element distortion becomes too large. The algorithmic
steps of the Fixed-Mesh ALE method are then the following:

• The simulation starts by using the original background mesh M (0) covering the background
domain Ω0, and integrating the corresponding equations in Ω(t), and the harmonic extension
equations in Ω∗(t).

• When advancing a time step, the domain Ω(t) changes. The original mesh M (0) needs to be
deformed following an ALE strategy: the mesh movement in Γfree follows the normal velocity
of the particles, whereas in some points on ∂Ω0 there is no mesh movement. The mesh at time
instant t, M (t) is obtained by deforming M (0) following the ALE mesh movement criteria.

• At each step or after several time steps (both choices are possible), a remeshing step is per-
formed, which consists in projecting the results from M (t) to M (0). After this, we redefine
M (t)←M (0) and continue with the simulation.

In previous works on the Fixed-Mesh ALE, the number of steps between each projection from M (t)
to M (0) was limited to one, meaning that at each time step the results were projected to the back-
ground mesh after what was called a virtual mesh deformation. This allowed the ALE mesh move-
ment to be limited to only a few layers of elements surrounding Γfree, because mesh distortion did not
accumulate over time. In this work, on the contrary, we open the possibility to allow our formulation
to deform the mesh during several time steps before projecting back to the original background mesh.

2.8 Level set function

For the tracking of the boundary defining the free surface, Γfree, we rely on the classical level set
method. The main feature of the level set method is that it allows for a sharp tracking of the free

10



surface Γfree which results in an accurate definition of the fluid domain at time t, Ω(t). The level set
function ψ is defined in such a way that, at each time instant t:

ψ(t) = 0 in Γfree,

ψ(t)> 0 in Ω(t),

ψ(t)< 0 in Ω0\Ω(t).

It is important to remark, that the solution of the level set problem is done using the adapted mesh.

2.8.1 Initialization

Many strategies exist for the initialization of the level set function. Most of them rely in the compu-
tation of a positive (in the fluid part) and negative (in the part of the domain outside Ω(t)) distance
function from Γfree. However, these approaches either rely in a search strategy which can be expen-
sive if not implemented properly environment, or in enforcing the restriction |∇ψ| = 1, which is a
non-linear restriction which needs to be solved iteratively. Our approach for the initialization of ψ
does not rely on a distance function, but instead we solve the following diffusion-reaction problem
(see [12, 26] for more details on this strategy):

−∆ψ + sψ = g in Ω0, (7)
ψ = 0 in Γfree, (8)

nnn ·∇ψ = 0 in ∂Ω0, (9)

where nnn is the external normal in the boundary of Ω0, and the source term g is defined as:

g = 1 in Ω(t),

g =−1 in Ω0\Ω(t),

and s is a reactive term which we typically take as s = 1, although other values are possible. This
ensures a smooth ψ function and an accurate tracking of the free surface. Note that condition (8)
enforces that the gradient of ψ in the the direction of the external boundary normal is null, except in
those elements cuts by Γfree, where the essential boundary condition prevails. This approach yields
a smooth initial field, which is the main objective we pursue. Again, this equation is solved using
a finite element approach. Since the Dirichlet boundary condition in (8) is embedded in the mesh,
the linked-Lagrange multiplier method [13] is used again to enforce the boundary condition. Let us
define the finite element space for the level set function Ψh ⊂ H1 (Ω) . The variational problem to be
solved to initialize the level set function is: find ψh ∈Ψh such that:

(∇φh,∇ψh)Ω0 + 〈φh,nnn ·PΣh (ψh)〉Γfree = 〈φh,g〉Ω0 ∀φh ∈Ψh,

where now Σh corresponds to the elementwise discontinuous space for the level set stresses and PΣh is
the projection operation defined in equation (6). This results in a smooth initial level set field which
defines the Ω(t) domain. See [13] for more details on the linked-Lagrange multiplier method.

After several time steps of the simulation the level set function can loose smoothness and become
difficult to advect. In this case, what is called a reinitialization step is required. For this, we rely in
the same algorithm we use to initialize the level set function.

2.8.2 Transport

The level set function needs to evolve in time so that ψ(t) = 0 in Γfree(t). In Arbitrary-Lagrangian
Eulerian methods, this is solved by advecting the level set function using the fluid velocity in Ω(t) as
the advection velocity:

∂tψ +aaah ·∇ψ = 0, (10)

11



with the advection velocity defined as aaah = uuuh− uuuh,dom. If the method is purely Eulerian, aaah = uuuh,
whereas if the method is Lagrangian on Γfree , then aaah = 000 on Γfree and equation (10) does not need
to be solved (the relative position of Γfree with respect to the nodes of the mesh does not change). In
the case of the Fixed-Mesh ALE method we need to distinguish between two cases:

The first case corresponds to the situation in which several time steps of the ALE simulation
are computed before the results are projected from the deformed to the background mesh. In this
case, equation (10) is not solved, the nodal values for the level set function do not change during the
simulation until the projection onto the background mesh is performed.

The second case corresponds to the situation in which the results are projected back onto the fixed
background mesh at each time step. In this case we can opt by the following two options:

• Not solving equation (10), and projecting the level set function at the end of each time step
after the mesh has been deformed.

• Solving equation (10) with aaah = uuuh and avoiding the projection step only for the computation
of the level set function.

In this case we opt for the second option, because we have observed that it results in smoother level
set fields in the long term.

For the finite element solution of equation (10), we rely on a strategy similar to the one applied to
the Navier-Stokes equations, with the particularity that only convection needs to be stabilized.

2.8.3 Mass correction

The advection of the level set function does not guarantee that the amount of mass in the simulation
volume after a time step has been solved is conserved. In practical cases, this usually results in a
small amount of mass being lost at each time step. After hundreds or thousands of time steps this
mass loss cumulates and can represent a significant fraction of the total volume. In order to avoid this
we introduce a mass loss correction scheme which ensures that total mass is conserved at each time
step. The mechanism consists in computing the amount of mass lost at the end of each time step and
then moving the level set function in a uniform manner in the direction orthogonal to the free surface
in order to correct this mass loss. The mechanism works in a global sense, and thus cannot ensure
mass conservation at the local level. If Sfree is the area (length in two dimensions) of the free surface,
Vlost the lost volume and ψ0(t) the level set function solution field prior to the mass correction, then:

ψ(t) = ψ0(t)+
Vlost
Sfree
·PΩΓfree (nnn ·∇ψ0(t)) ,

with the following definition for PΩΓfree (nnn ·∇ψ0(t)) ∈Ψh(ΩΓfree) :(
φh,PΩΓfree (nnn ·∇ψ0(t))

)
ΩΓfree

= 〈φh,nnn ·∇ψ0(t)〉ΩΓfree ∀φh ∈Ψh(ΩΓfree),

where ΩΓfree(t) is defined as the region of the domain occupied by elements cut by Γfree(t).

3 Algorithmic strategy for the projection step

Let us start this section by remarking that the method proposed in this work is implemented in a
distributed memory parallel platform. Algorithmic parallelism is achieved by computing a partition
of the finite element mesh by using graph partitioning algorithms, specifically ParMetis [48] is used
for the partitioning of the mesh graph. The mesh partitioning algorithm in our approach is nodally
based, which means that each node belongs to a single subdomain or processor, whereas elements
can belong to multiple subdomains if they own nodes owned by different processors.

12



As explained in the previous section, the Fixed-Mesh ALE method involves a stage at each time
step where the unknowns are projected onto the background fixed mesh. Independently of which type
of projection is used, when dealing with this in a parallel framework the element in which a node or
integration point lays after the deformation might belong to a different processor and parallel subdo-
main, which introduces the additional difficulty of a parallel spatial search across multiple threads.
Several possible strategies exist for treating this issue.

The first strategy relies in taking a time step small enough related to the mesh size so that the
free surface crosses at most one element in a single time step [60]. This allows to ensure that when
looking for the position of a node or integration point in the deformed mesh, it will be found in the
first-layer of elements adjacent to the node or integration point, which will be locally stored in the
processor owning the node. However, this introduces a limitation in the time step size in the form of
a Courant–Friedrichs–Lewy condition (CFL) [36], which may not be convenient when using implicit
methods for solving the incompressible Navier-Stokes equations.

The second possible approach does not introduce a constraint in the time step size, but its effi-
ciency still relies in the fact that the time step is not too large when compared to the CFL condition.
It consists in starting the search in the elements adjacent to the node and progressively advancing
the search to the neighbor elements in successive layers. When the search reaches the boundary of a
processor subdomain before the sought element is found, a communication step is required in order
to proceed with the search in the neighbor subdomain. This strategy can be used independently of the
time step size and the number of subdomains. However, it requires a neighbor processor communi-
cation step after searching a layer of elements, which can limit the performance of the algorithm in
high-performance computing environments. Moreover, when implemented in an adaptive framework
where meshes can have hanging nodes, it requires to advance through neighbor elements in different
refinement levels, a step which may not be straightforward to code.

The third approach consists in implementing an octree-based (quadtree in two dimensions) search
algorithm whose efficiency does not depend on the time step size. This is precisely the approach we
adopt. It is important in this case to implement the search algorithm so that it can be used in a parallel
framework. The strategy we follow is to build first an octree search data structure for the processor
corresponding to each subdomain. This is followed by the construction of a subdomain octree which
allows to decide which, amongst the neighbor processors, contains the sought element when it is
not found in the current processor. Since in the adaptive Fixed Mesh-ALE method the number of
elements and the position of the nodes evolves in time, the octree needs to be rebuilt at each time step.
The efficient parallel implementation we have pursued goes as follows.

Each processor (associated to a physical subdomain and a submesh), starts by computing its
coordinate range, which is defined as the set of maximum and minimum nodal coordinates in each
coordinate axis. This allows to subdivide the rectangular prism which encloses the local subdomain
into eight subprisms, which we call the leafs of the tree. Elements are then assigned to each leaf,
taking into account that an element can belong to multiple leafs if the coordinates of their nodes lay
in different sides of the virtual boundaries that delimit the newly created leafs. Dynamical linked
lists are used to store this information. As usual in octree based search algorithms, if the number of
elements in a leaf is too large, the leaf is further subdivided and the elements of the leaf are reclassified
in the new subleafs. The criteria used in order to decide when to stop the subdivision process needs
to ensure that the classification and search process is efficient. If points were being classified instead
of elements, a reasonable criteria would be to stop the subdivision process when at most one point
per leaf is found. However, since elements occupy a volume, this can lead to an infinite recursion. In
order to avoid this, three criteria for stopping the recursion process are applied:

• If the number of elements in the leaf is smaller than a number of elements threshold, stop the
recursive process.

13



• If the leaf level is larger than a level threshold, stop the recursive process.

• If the the ratio between the size of the volume enclosed in the leaf and the size of the elements
is smaller than a leaf volume threshold, stop the recursive process.

After building the octree structure following these criteria, the search at the local level can be carried
out. If the time step is not too large, most of the searches for the projection will be successful by
searching only in the elements of the current processor. However, in some cases, specially if the time
step is large, the sought element can belong to a different processor. In this case it is convenient
to have a processor octree which allows to decide in which processor should the element be looked
for. The strategy is very similar to what has been explained for the element octree: first, every
processor sends its coordinates range to all the other processors. This is an all-to-all communication
process, but involves only the communication of two real variables per space dimension and needs to
be done only once. With this information each processor is capable of building the global processor
octree following the same steps as in the element octree. This processor octree is replicated in all
the processors. Once each processor has built its own local element octree, and all the processors
have built the global processor octree, the steps for the spatial search of the coordinates of a point or
integration point in the projection step are:

• Try finding the element inside which the point is placed in the local subdomain using the local
element octree. If the element is found, note down the element and the interpolation coefficients
so that the search needs not to be performed again for multiple field interpolation.

• If the element is not found in the local subdomain, choose which are the candidate subdomains
where the element needs to be looked for using the global processor octree. The coordinates of
the point need to be sent to each of the candidate processors.

• Receive the coordinates of the points from other processors which need to be looked for in the
current processor. Look for them using the local element octree and return a flag indicating
whether the element was found or not to the processor owner of the node. If the element is
found, note down the element and the interpolation coefficients so that the search needs not to
be performed again for multiple field interpolation.

Once this preparatory stage is done, the interpolation of a field from the deformed to the background
mesh can be efficiently done by:

• Interpolating the field for all the points which are local and whose corresponding element is
also local.

• Interpolating the field for the points which were asked by other processors and sending them to
these processors.

• Receiving the interpolated values from other processors for the local nodes whose correspond-
ing element is not local.

Following these criteria an efficient global octree search algorithm for the projection step of arbitrary
fields in the Fixed-Mesh ALE method is obtained.

4 Fractional step approach for free surface flows

The formulation described so far allows one to solve a free surface problem involving incompressible
fluids using finite elements. However, at each time step several linear systems need to be solved in-
volving the momentum and continuity equations. The problem at this point is that if the number of

14



Figure 4: Projection from the deformed to the background mesh. Top left: original mesh. Top right:
deformed mesh. Bottom left: projection process. Four different processors and subdomains exist
in this case. In the bottom left image, the projection from the deformed to the background mesh
is performed. Some nodes lay in the same processor for the deformed and the undeformed mesh
(top left square green nodes, for instance). Other nodes however, need information from a different
processor in order to do the projection step. This is the case of the bottom left central blue star node,
which needs to be interpolated from the bottom-left red domain. Inter-processor communications are
required in this case.

unknowns is large, these linear systems become ill-conditioned despite the stabilization methods em-
ployed. In these cases it is sometimes convenient to tackle this problem by splitting the global system
into the iterative solution of subsystems involving only the velocity or the pressure unknowns, what
are known as fractional step methods. In the following, two approaches for the fractional step splitting
of the incompressible Navier-Stokes equations are presented. The first one is based on a modification
of the monolithic incompressible Navier-Stokes equations, while the second one is associated to a
purely algebraic approach.

4.1 Pressure Poisson equation based fractional step method

The type of fractional step schemes based on the solution of a Laplacian as an approximation to the
pressure Schur complement were first proposed in [27]. In these schemes the solution of the mono-
lithic system is decomposed into the solution of several simpler problems: a convection-diffusion
equation for the velocity unknown, a pressure-Poisson equation and a projection step. Here we sum-
marize the used fractional step method for a backward Euler time integration scheme, which can then
be adapted to any other type of time integrator. We start by introducing an intermediate velocity ûuuh,
for which we consider:

ûuunh = uuu
n
h.

The steps of the fractional step scheme are then the following:

15



1. Convection-diffusion equation. We solve for the intermediate quantity ûuun+1h :

ρ

(
vvvh, δt ûuu

n+1
h

∣∣
χχχ

)
+B

(
[vvvh,0] ,

[
âaan+1h ; ûuu

n+1
h , p

n
h
])

+SOSS
(
[vvvh,0] ,

[
âaan+1h ; ûuu

n+1
h , p

n
h
])

+SGhost
(
[vvvh,0] ,

[
âaan+1h ; ûuu

n+1
h , p

n
h
])

= L([vvvh,qh]) , (11)

where âaan+1h = ûuu
n+1
h −uuuh,

2. Pressure Poisson equation. We solve for pn+1h :

(qh,∇ · ûuun+1h )+SOSS
(
[000,qh] ,

[
âaan+1h ; ûuu

n+1
h , p

n+1
h

])
+SGhost

(
[000,qh] ,

[
âaan+1h ; ûuu

n+1
h , p

n+1
h

])
= δ t(∇(pn+1h − p

n
h),∇qh), (12)

3. Projection step: We solve for uuun+1h :

ρ
1
δ t

(vvvh,uuu
n+1
h − ûuu

n+1
h )+(vvvh,∇p

n+1
h −∇p

n
h)

+SGhost
(
[vvvh,0] ,

[
000;uuun+1h − ûuu

n+1
h , p

n
h
])

= 0. (13)

The previous scheme provides a way to decouple the solution of the velocity and the solution of the
pressure unknown. However, some errors are introduced which can affect the accuracy of the solution:
the first error is due to the fact that the momentum equation (11) is solved for the intermediate velocity
ûuun+1h instead of the end of step velocity uuu

n+1
h . The second source of error is caused by the natural

boundary condition of equation (12), which implicitly states that nnn ·∇ph = 0 on ∂Ω0. This causes
a spurious pressure boundary layer to appear in the walls of the computational domain. Finally, and
maybe the most important source of error in the case of free surface flows, a Dirichlet boundary
condition needs to be provided for equation (12). The Dirichlet boundary condition we enforce is:

p = 0 on Γfree.

This condition is again applied using the Linked-Lagrange multiplier method. For low viscous flows
this approximation is reasonable, since the effect of the viscosity is small. However, the proper
boundary condition to be applied would be:

σσσ ·nnn = 000 on Γfree.

As a consequence, an additional source of error is introduced by the fractional step method. Moreover,
equation (12) allows to prescribe the end of step velocity values only in the direction normal to the
boundary, nnn ·uuuh, which is also a source of error.

4.2 Algebraic approach

Algebraic approaches for fractional step methods appear precisely to overcome some of the errors
introduced by Laplacian based methods. At the algebraic level we can skip the discussion about the
correct boundary conditions to be imposed. In fact, at the discrete level, the end-of-step velocity
satisfies the good boundary conditions. Even more important, no boundary conditions have to be
imposed for the pressure. See [7] for more details on algebraic pressure segregation methods for the
incompressible Navier-Stokes equations. The numerical examples in Section 6 were run using the
algebraic fractional step approach. We depart from the algebraic linear system for the monolithic
problem, which is the algebraic counterpart of equation (4):[

Auu Aup
Apu App

][
U
P

]
=

[
Ru
Rp

]
,

with the straightforward identification of matrices and arrays. The algebraic approach we use for
solving the incompressible Navier-Stokes equations consists in the following steps:

16



1. Solve for an intermediate velocity Ûn+1:

AuuÛ
n+1 = Ru−AupPn. (14)

2. Solve for an algebraic pressure Poisson equation. We solve for the pressure Pn+1:(
App−Apu

[
L(Auu)

−1 Aup
])

Pn+1 = Rp−ApuÛn+1−Apu
[
L(Auu)

−1 Aup
]

Pn, (15)

where L(Auu)−1 is the inverse of the lumping of matrix Auu.

This purely algebraic approach for the fractional step solution of the incompressible Navier-Stokes
equations works well for the split OSS stabilized formulation (4) using linear finite elements. In this
case the lumping of the Auu matrix, L(Auu), does not contain any contribution from the stabilization
terms, since all of them involve the spatial derivatives of uuuh, and these terms disappear due to the
lumping. The viscous and convective terms also disappear since they contain spatial derivatives of
uuuh. Also, Aup and Apu do not contain any contribution from the stabilization terms. This causes that
for linear elements, the resulting approximated Schur complement matrix:

S = App−Apu
[
L(Auu)

−1 Aup
]
, (16)

is identical to explicitly built algebraic methods [31], where the Schur complement matrix is computed
as:

S = App−DM−1G,

where matrix D is associated to the terms (qh,∇ · (·)), M is a lumped mass matrix arising from the
temporal derivative terms (vvvh,∂t (·)), and G is the gradient matrix associated to (∇ · vvvh, ·). Note that
the stabilization effect of the ghost-penalty terms remains in this formulation, since equation (14)
continues to contain the original ghost-penalty terms for stabilizing the velocity gradients, and equa-
tion (16) continues to contain the original ghost-penalty terms for the stabilization of the pressure
gradients. The lumping affects only the approximation of the Schur complement in equation (16).

For higher order elements, the purely algebraic approach cannot be directly built from the mono-
lithic system for the incompressible Navier-Stokes equations, because the lumping of the mass matrix
results in a singular matrix with zeroes on the diagonal. In these cases, a diagonal or easy to invert
approximation to matrix Auu should be devised. This is also the case for other stabilization methods
like the residual based SUPG method, even in the case of linear elements: in this case there are sta-
bilization terms in the Aup and Apu matrices, and these stabilization terms affect the quality of the
approximated Schur complement matrix. See [7] for a detailed review on algebraic fractional step
methods.

Remark Taking into account the possibility of building the algebraic fractional step method di-
rectly from the matrices of the monolithic system, it is worth explaining how this has been imple-
mented in an in-house parallel finite element computational code. Our finite element code relies on
the PETSc library [14] for the solution of linear systems of equations. Amongst other features, the
PETSc library allows to solve saddle point problems like the incompressible Navier-Stokes equations
by building block preconditioners, in what are called field split preconditioners. In particular, the
algebraic fractional step method described in equations (14)-(15) can be implemented by directly
assembling the monolithic system (4) and then passing the following commandline options to the
PETSc linear system solver:

−k s p t y p e r i c h a r d s o n
−k s p m a x i t 2

−p c t y p e f i e l d s p l i t

17



−p c f i e l d s p l i t t y p e s c h u r
−p c f i e l d s p l i t s c h u r f a c t o r i z a t i o n t y p e f u l l
− p c f i e l d s p l i t 0 f i e l d s 0 ,1
− p c f i e l d s p l i t 1 f i e l d s 2
−p c f i e l d s p l i t s c h u r p r e c o n d i t i o n s e l f p
− f i e l d s p l i t 1 m a t s c h u r c o m p l e m e n t a i n v t y p e lump
− f i e l d s p l i t 1 k s p t y p e p r e o n l y
− f i e l d s p l i t 1 p c t y p e ksp

Moreover, if the exact solution of the monolithic system is required, the algebraic fractional step
method can be used as a preconditioner. In this case the Richardson driver can be replaced by a
Krylov method, and the number of iterations can be incremented so that the monolithic solution is
recovered:

−k s p t y p e gmres
−k s p m a x i t 200
−k s p t o l 1e−8

−p c t y p e f i e l d s p l i t
−p c f i e l d s p l i t t y p e s c h u r
−p c f i e l d s p l i t s c h u r f a c t o r i z a t i o n t y p e f u l l
− p c f i e l d s p l i t 0 f i e l d s 0 ,1
− p c f i e l d s p l i t 1 f i e l d s 2
−p c f i e l d s p l i t s c h u r p r e c o n d i t i o n s e l f p
− f i e l d s p l i t 1 m a t s c h u r c o m p l e m e n t a i n v t y p e lump
− f i e l d s p l i t 1 k s p t y p e p r e o n l y
− f i e l d s p l i t 1 p c t y p e ksp

5 Adaptive approach

In the previous sections we have presented a stabilized variational formulation for the solution of in-
compressible free surface flows using the Fixed-Mesh ALE method and finite elements. This scheme
needs now to be coupled with the adaptive refinement approach. For the adaptive refinement we rely
in the algorithm presented in [10], which allows the distributed memory parallel finite element code
to efficiently modify the mesh in a hierarchical manner (both refining and coarsening of the mesh are
possible) so that it is refined only in the regions of the computational domain where it is required. In
the following we summarize the main features of the adaptive refinement algorithm and its coupling
with the Fixed-Mesh ALE method.

The adaptive refinement algorithm is based in a nodal parallel partition. This means that each
node of the mesh belongs to a processor, whereas an element can belong to multiple processors if it
owns nodes from more than one subdomain. This feature, which is strongly linked to the design of
the parallel finite element code, introduces some particularities when designing the hierarchical mesh
refiner, which are summarized next:

• The distributed data structure handles two and three dimensional unstructured meshes com-
posed of triangular, quadrilateral, tetrahedral and hexahedral elements. This approach is capa-
ble of describing complex geometries, and doing non-uniform refinements.

• Each processor stores only the local information of the partitioned distributed mesh. This
reduces the memory consumption, and allows scaling up to thousands of processors.

• The parallel refinement procedure is based on a hierarchical data structure for the refined ele-
ments of the mesh, that is used to efficiently search neighboring elements at the inter-processor
level. A data structure containing parent and children pointers is implemented, where new
refinement levels are successively added to or substracted from the computational mesh.

18



• Resulting meshes are non conforming with hanging nodes on sides where two levels of refine-
ment meet. Contrary to other adaptive refinement methods, the algorithm proposed here does
not enforce a balancing restriction in the refinement level of adjacent elements: the jump in the
refinement level between neighbor elements can be arbitrarily large.

• For the parallel refinement process, the algorithm deals with element and node identification
across processors by using a global element and global point identifier structure. This ensures
that the global numbering structure and general nodal and elemental information can be trans-
ferred to all the neighboring processors in an efficient manner.

• To balance the processors load a dynamical parallel repartitioning framework is used that
changes the ownership of the mesh nodes when load unbalance reaches a certain threshold,
and then transfers the associated elements to the corresponding processors. Contrary to other
algorithms for load rebalancing in hierarchical adaptive mesh refinement, our algorithm is in-
dependent from the renumbering strategy of the load rebalancing process. In particular, graph
partitioning schemes and space-filling methods for load rebalancing can both be used.

Despite these interesting properties, from the Fixed-Mesh ALE point of view the adaptive refinement
algorithm acts as a black box that allows to modify the mesh during runtime, with two particularities:
First, a mesh refinement criteria needs to be provided so that the algorithm can decide which areas
of the mesh need to be refined. Secondly, the finite element solver needs to deal with hanging nodes
which, if a straightforward implementation is done, results in non-conforming discretizations.

With regards to the mesh refinement criteria, a very simple decision making algorithm has been
used, which enforces that the elements occupied by the fluid are sufficiently fine. We define the
refinement level as the number of hierarchical parents (in the refinement process) an element has.
Based on this, the criteria reads as follows:

• If an element is occupied by the fluid and its refinement level is less than nRef, then refine it.

• Else if the element is less than nLay layers of elements away from the free surface Γfree and its
refinement level is less than nRef−Lay , then refine it.

• Else if the element is occupied by the fluid and its refinement level is greater than nRef, then
unrefine it.

• Else, unrefine the element.

This ensures that the refinement level of the elements covered by the fluid is sufficiently fine and also
that some additional refinement can be introduced in the region surrounding Γfree in order to have a
more accurate representation of the geometry of the free surface. The only care which needs to be
taken is in the parallel implementation of this refinement criteria: as explained in [10], the parallel
refinement algorithm requires that the refinement criteria passed to the refiner is the same in all the
processors. The problem for this is that the nLay criteria is geometric and needs to propagate from
the free surface through several layers of elements. When these layers cross from one subdomain
(attached to a parallel processor) to another, communications are needed. The solution to this problem
is to communicate the refinement criteria by marking the nodes of the elements to be refined and
then proceeding to communicate this information through the processor boundaries as a usual nodal
unknown communication in a nodally based partition finite element code. Obviously, an adaptive
refinement strategy based on error estimators could also be used, although this has not been used in
the numerical experiments presented in this work.

Regarding the way to deal with hanging nodes, the main problem is that the standard shape
functions for hanging nodes result in non-conforming finite element approximations. It is possi-
ble to deal with non-conforming approximations in the variational form (see for instance [6], where

19



Discontinuous-Galerkin terms are used to deal with the discontinuities of shape functions in meshes
with hanging nodes), but then a specifically designed variational formulation needs to be developed
for each physical equation. The second possibility consists in modifying the shape functions so that
they become conforming. For this, the adaptive refinement algorithm presented in [10] provides infor-
mation on what are called hanging parents and their averaging coefficients, and then the finite element
solver can proceed as if the considered mesh is flat, instead of hierarchical. The procedure consists in
completely eliminating hanging nodes from the finite element equations, and the contribution of their
test and shape functions is added to their hanging parents, whose test and shape functions are then
modified. In general, the test and shape functions of a hanging parent node (hp), with several hanging
children nodes (hci), are modified in the following manner:

N∗hp(xxx) = Nhp(xxx)+
nchild

∑
i=1

(Nhp(xxxi)Nhci(xxx),

where Nhp and Nhci denote the original shape and test functions for the parent and children nodes
respectively, N∗hp(xxx) denotes the modified hanging parent shape function, and xxxi denotes the position
in space of the ith hanging children. The test and shape functions for the hanging children nodes are
completely eliminated from the final finite element problem.

Take for instance the example in Fig. 5. The shape and test function for node 1, N1, is modified
into N∗1 so that:

N∗1 (xxx) = N1(xxx)+
1
2

N3(xxx)+
1
4

N4(xxx).

Similarly, the test and shape functions for node 2, N2, is modified into N∗2 (xxx) so that:

N∗2 (xxx) = N2(xxx)+
1
2

N3(xxx)+
3
4

N4(xxx).

The shape and test functions for nodes 3 and 4 are completely eliminated from the finite element
equations, although their nodal value can be recovered once the finite element problem has been
solved by saying:

u4 =
1
4

u1 +
3
4

u2,

u3 =
1
2

u1 +
1
2

u2.

Note that these relations are recursive, so an arbitrary difference in the refinement level of neighbor
elements is possible.

20



Figure 5: Hanging nodes. Node 4 is a hanging node, its hanging parents being nodes 2 and 3. Node
3 is in turn a hanging node, its hanging parents being nodes 1 and 2. The hanging node value for the
unknown at node 4, u4 is: u4 =

1
2 u3 +

1
2 u2 =

1
4 u1 +

3
4 u2.

6 Numerical experiments

In this section we present some numerical experiments which illustrate the behavior of the proposed
method.

6.1 2D sloshing in a rectangular tank

In this first numerical example we study the numerical performance of the proposed algorithm. For
this, a bi-dimensional tank of dimensions 1.73×1.05 m2 partially filled with water up to a height of
0.6 m is studied. The tank is then subject to an horizontal movement, which is characterized by an
amplitude of 0.031 m and a period of 1.5 s:

x = 0.031 · sin
(

4π
3

t
)
. (17)

The setting is similar to the one presented in section 6.2 and Fig. 12 , but the simulations are done in
2D so that the numerical method can be assessed more easily.

6.1.1 Spatial convergence

In this example we do not compare with experimental results, but with results obtained using a finer
finite element mesh. The reference solution is obtained by solving the problem in a relatively fine and
uniform mesh composed of 104960 linear elements. The first test we perform consists in studying the
spatial convergence of the method. Only 10 time steps are simulated with a time step of 0.01 seconds.
At each time step, the position of the free surface at 50 uniformly spaced height gauges is measured,
and compared to the solution in the reference mesh. The relative error is computed as:

e =

√ˆ 1.73
0

ˆ 0.01
0

(hcoarse(x, t)−hfine(x, t))
2 dxdt,

where hcoarse(x, t) and hfine(x, t) represent the height of the free surface at an abscissa x at a given
time t, for the coarse and fine meshes respectively. Since very few time steps are simulated, the
cumulative error caused by the time integration does not affect the results of the convergence study.
In order to study, not only the convergence of the method, but also the effect of the adaptive mesh
refinement, the convergence study is done in two different kinds of meshes: in the first kind of mesh,

21



Figure 6: Uniformly refined mesh (left) and adaptively refined mesh (right) used for the convergence
study in the 2D sloshing tank.

10
0

10
1

10
−6

10
−5

10
−4

10
−3

10
−2

slope 2

slope 1

e

Refinement Level

 

 

Uniform Refinement
Adaptive Refinement

Figure 7: Spatial convergence for the 2D sloshing in a rectangular tank.

the refinement is uniform. In the second one, the criteria explained in section 5 is applied, with 1
additional refinement level in the 5 first layers of elements. Fig. 6 shows a uniformly refined mesh,
and an adaptively refined mesh for a given refinement level. Note that the adaptively refined mesh
does not add elements in the region of the flow which is not occupied by the fluid, and concentrates
elements in the region surrounding the free surface.

Fig. 7 shows the spatial convergence results for both the uniformly refined and the adaptively
refined cases. It can be observed that the spatial convergence ratio is quadratic (as expected, since
linear elements are used), and that the results can be improved at a low increase in the computational
cost by using the adaptive refinement technique.

6.1.2 Temporal convergence

The second test we perform consists in studying the convergence of the temporal discretization. For
this, we consider a fixed element discretization size (with a uniformly refined mesh) which results in
a mesh composed of approximately 7000 elements and we study the effect of the variation of the time

22



10
2

10
3

10
−5

10
−4

10
−3

10
−2

10
−1

slope 2

slope 1

e

1/δ t s

Figure 8: Temporal convergence for the 2D sloshing in a rectangular tank.

step size. Again, the reference solution is obtained by considering a small time step of 0.001 s. For
this example, a viscosity of µ = 1Pa · s is considered instead of the viscosity of water so that the tests
do not require of a turbulence model. The relative error associated to the temporal discretization is
then computed as:

e =

√ˆ 1.73
0

(hcoarse(x, tend)−hfine(x, tend))
2 dx,

where now hcoarse(x, tend) and hfine(x, tend) represent the position of the free surface at the end of the
simulation computed with the coarse time step and with the reference fine time step respectively. A
total simulation time of 0.32 s is computed. Fig. 8 shows the results obtained with the Fixed-Mesh
ALE method. A second order time integrator (BDF2) is being used in all the equations (advection of
the level set, integration of the Navier-Stokes equations), so a second order in time scheme is obtained
for sufficiently refined time steps.

6.1.3 Effect of the ghost stabilization terms

It is also interesting to evaluate the effect of some of the numerical ingredients of the proposed for-
mulation. We have already seen that the ghost penalty terms do not harm the spatial convergence of
the solution, in the following test we deactivate the ghost penalty stabilization terms and observe the
results if these terms are not considered. As expected, the solution explodes when a bad cut is found.
This is shown in Fig. 9 where the velocity field and level set function for a bad cut configuration are
shown with and without ghost penalty stabilization terms. The velocity without ghost stabilization
terms explodes as expected, resulting in a non-physical position of the computed free surface. Also,
the condition number of the linear system matrix explodes to 5.4 ·1014. On the other hand, with the
ghost stabilization terms, the velocity field is controlled (although with some oscillations in the nodes
outside the physical domain, with little influence in the Ω(t) region), and the free surface position
is correct for the corresponding physical configuration. The condition number for the linear system
matrix in this very bad configuration is 1.75 · 1011, which although large, is much better than the
condition number without the ghost penalty stabilization terms.

23



Figure 9: Effect of the ghost penalty stabilization terms. Top: Result without the ghost penalty
stabilization terms for a bad cut configuration. Bottom: Results with the ghost penalty stabilization
terms.

6.1.4 Effect of the mass loss correction scheme

Here we study the effect of the mass loss correction terms. For this a very coarse mesh (410 linear
triangle elements) and a very coarse time step (0.2 s) are used, together with the very dissipative
backward Euler scheme. Fig. 10 shows the initial volume of water, and the volume of water obtained
with, and without mass correction scheme. As expected, if no correction is applied, a great amount
of mass is lost in the process. On the other hand, the mass is conserved if the global mass correction
scheme is used.

6.1.5 Effect of the level set reinitialization scheme

Another ingredient of the formulation is the level set reinitialization scheme. Here we evaluate the
results for a mesh of 1640 linear triangles and a time step of 0.1 s after 200 steps have been simulated.
Two cases are considered: in the first case no reinitialization is done at all, in the second one, a
reinitialization step is done at each time step. In Fig. 11 the level set function and position of the
free surface are presented at the end of the simulation. It can be observed that the level set function
is different if the reinitialization scheme is used, but the position of the free surface is practically the
same in both cases, even after 200 reinitialization steps. From this we conclude that the proposed
reinitialization scheme is a good option for the transport of level set functions.

6.2 3D sloshing in a rectangular tank

This example was first studied in [40], where both numerical and physical experiments were per-
formed and the elevation of the free surface of the problem was tracked. An almost bi-dimensional
rectangular tank of dimensions 1.73×1.05×0.2 m is partially filled with water up to a height of 0.6
m. The tank dimensions and initial configuration of the free surface are shown in Fig. 12.

24



Figure 10: Effect of the mass loss correction scheme. Top: Initial level set configuration. Bottom:
Level set position at the end of the simulation without (left) and with (right) mass loss correction
scheme.

Figure 11: Effect of the level set reinitialization scheme. Left: Without reinitialization. Right: With
reinitialization.

25



Figure 12: Initial configuration for the sloshing in a rectangular tank (1.73×1.05×0.2 m) problem.

The tank is then subject to an horizontal movement, which is characterized by an amplitude of
0.031 m and a period of 1.5 s, the same oscillation which was applied in the example in section 6.1
and in equation (17). When this displacement is applied to the tank, the interior fluid starts oscillating.
The time history of the elevation (coordinate y) at a height gauge situated at coordinates x = 0.05 m,
z = 0.1 m is then measured and compared to experimental results.

Experimental results show that the contribution of the depth coordinate to the solution of this
problem is negligible, so a bidimensional mesh of dimensions 1.73×1.05 m is used. Slip boundary
conditions which allow the free movement of the fluid in tangential directions are enforced on the
tank boundary. A time step of 0.01 s is set and second order backward difference schemes are used
for the time integration. An initial mesh of 4000 elements is used, from which all refined meshes are
built. The mesh is refined around the section which is cut by the free surface, allowing for a better
tracking of the fluid interface. In this case the refinement criteria is as follows: the mesh is refined
only one level in the region surrounding the free surface and up to three layers of elements in each
side. This results in a computational cost similar to the original problem without refinement, but it
also allows a higher precision in the selected region. As it can be observed in Fig. 13, the mesh is
successively refined and unrefined so that only the area surrounding the free surface is solved using
the fine mesh at each time step. For the linear system of equations strategy, the algebraic fractional
step approach presented in Section 4.2 is used, but we allow the solver to iterate until the monolithic
solution is recovered.

Fig. 13 shows the velocity field at the free surface at a time shortly after the water surface impacts
the tank ceiling. The obtained velocity and level set function fields are smooth, the adaptive mesh
allows to accurately (and smoothly) capture the geometry of the free surface, as well as the velocity
and pressure fields. Fig. 14 shows a smooth pressure field in one of the simulation steps.

Fig. 15 compares the water surface elevation at the height gauge in the experimental case pre-
sented in [40] with the results obtained with the proposed numerical method. As it can be observed,
the natural oscillation period of the fluid in the tank does not coincide with the forced oscillation pe-
riod, which is the cause for the beating effect observed, in which the amplitude of the fluid oscillation
increases and mitigates successively.

A good agreement is obtained, both in the oscillation frequency, the beating frequency and the
amplitude of the oscillations. For the first beating period the agreement is almost exact, despite the
initial conditions being different for the experimental and numerical problems. After that, the error in
the oscillation frequency and the effect of the initial conditions accumulates and the measured heights
do not exactly overlap, although the beating period (of around 12 s) is also correctly captured by the
numerical method.

26



Figure 13: Mesh and position of the free surface (right) and velocity vectors (right) at several time
instants of the simulation. Vector colors indicate velocity magnitudes, vector arrowheads indicate
velocity direction.

27



Figure 14: Smooth pressure field for the sloshing problem.

0 5 10 15 20 25 30 35 40 45 50

−0.2

0

0.2

0.4

0.6

Time (s)

E
le

va
tio

n
 (

m
)

 

 

Experimental Results
Adaptive FMALE

Figure 15: Water surface elevation at an elevation gauge situated at x = 0.05, z = 0.1.

28



Figure 16: Free falling jet problem. Left: free surface plot. Right: Velocity vector field when the
stationary state is reached. Vector colors indicate velocity magnitude, vector arrowheads indicate
direction.

6.3 Free overfall experiment

In this numerical example we study the behavior of a free falling jet. The problem setting is depicted
in Fig. 16. The free surface flow enters the problem domain in the top-left area with a uniform
horizontal velocity of 0.857 m/s, and a free surface height of 0.075 m. Shortly after the entry point,
the canal abruptly ends and the flow falls freely forming a jet. In this case the shape of the jet is
studied and compared against the experimental results presented in [53].

In this case we depart from a finite element mesh composed of approximately 1000 triangular
elements, and we adaptively refine it only in the region around the free surface region (4 hierarchical
levels of refinement are considered) until a mesh of 33301 elements is obtained. The time step is set
to 0.01 s, and a second order backward differences in time integration scheme is used. The simulation
is run until a stationary state is reached. As it is shown in Fig. 16, the resulting free surface is
smooth even in the point where the water jet separates from the canal wall, although some numerical
oscillations appear which could be treated by using for instance a shock capturing technique for the
advection of the level set function.

The equivalent uniform refinement mesh covering the whole computational domain region would
be composed of 515690 , from where it is clear that an important gain in the required computation
effort is obtained. The adaptively refined mesh when the stationary state is reached is depicted in
Fig. 17. The mesh is heavily refined in the area surrounding the free surface, jumps of up to 4
refinement levels are obtained between neighbor elements. Finally, in Fig. 18 the results of the
numerical simulation are compared against experimental results presented in [53]. The agreement is
almost exact, thanks to the capability of the Adaptive Fixed-Mesh ALE method of concentrating the
computational effort in the critical regions, which in this case are the free surface and specially the
separation point where the jet departs from the canal and starts its free fall movement.

6.4 Green water flow experiment

This numerical example consists in the simulation of the water flow over the deck of a ship followed
by the impact of the resulting wave against an obstacle. This is a well known benchmark for free
surface problems and has been studied experimentally by the Maritime Research Institute Netherlands
(MARIN). Experimental data are available in [1]. The setting of the problem is the following: a large
tank with an open roof is considered. In one of the sides of the tank, a gate aisles a volume of water
which lays at rest at a constant free surface height. In the other side of the gate there is a prismatic
obstacle representing a container on the deck of a ship. This obstacle is static and no fluid-structure
interaction effects are considered. The initial configuration is depicted in Fig. 19. The experiment
starts when the gate quickly opens (the duration of the gate opening process is considered to be zero)
and the resulting water wave impacts against the obstacle and the walls of the tank. The pressure

29



Figure 17: Free falling jet problem. Adaptively refined mesh and level set function field when the
stationary state is reached.

0 0.1 0.2 0.3 0.4 0.5 0.6

−0.05

0

0.05

0.1

0.15

0.2

0.25

0.3

0.35

0.4

 

 

Experimental
Adaptive FMALE

Figure 18: Comparison of experimental and numerical simulation results for the free falling jet prob-
lem.

30



Figure 19: Kleefman’s dambreaking experiment initial configuration

time history at several points on the surface of the obstacle is then measured and compared against
experimental results.

An initial mesh composed of 3756 linear tetrahedral elements is used. Slip boundary conditions
which allow the free movement of the fluid in tangential directions are enforced on the walls. These
boundary conditions are enforced in a strong manner. At each time step the mesh is adapted so that
two additional levels of refinement are applied to the region occupied by the fluid, and one additional
level of refinement is applied in the three layers of elements closest to the free surface. The time step
is set to 0.01 s and a total of 6 s are simulated. Again, second order backward difference schemes
are used for the integration of the problem in time. The finite element mesh is then successively
adapted until an average of half a million elements is obtained for the computational mesh at each
time step. The mesh refinement is heavily localized around the free surface. The resulting adaptively
refined mesh element sizes are equivalent to a uniform mesh of two and a half million elements if the
element size used for the free surface area is uniformly applied to the whole computational domain,
which leads to important savings in the computational effort.

In Fig. 20 the position of the free surface at several time instants is shown, together with the
mesh at each of these time steps. As it can be observed, the mesh is heavily refined in the region
surrounding the free surface, it is coarser in the fluid regions farther from the free surface, and ex-
tremely coarse in the region of the domain which is not occupied by the fluid, and thus of no interest
for the simulation. Fig. 21 shows the comparison of the pressure time history obtained through nu-
merical simulation with experimental results. Numerical and experimental results show a very good
agreement both qualitatively and quantitatively. The most salient difference between experiments and
numerical simulations is that the returning wave (which impacts the obstacle at t ' 5 s after the water
front has reached first the left wall of the tank, then the right wall, and has returned to finally collide
with the obstacle) is slightly delayed in the numerical experiments. Apart from this, the pressure
levels through time match the pressure values of experimental results with a good accuracy. Fig. 22
shows the velocity vectors at the water surface. Thanks to the stabilization terms the velocity field

31



is smooth even at the free surface where bad cuts of the mesh elements can occur depending on the
geometry of the free surface.

7 Conclusions

In this work we have presented an adaptive Fixed-Mesh ALE (Arbitrary-Lagrangian-Eulerian) method
for free surface flows. The main ingredients of the proposed strategy are the use of stabilized formu-
lations, including stabilization terms for the cut elements in the free surface and terms stabilizing
convection and the classical LBB condition, the use of an ALE frame of reference for accurately
computing the temporal derivatives and the contribution of the advective term, a method to prescribe
boundary conditions on non-matching meshes, and the coupling with a set of adaptive mesh refine-
ment algorithms. These adaptive mesh refinement algorithms allow for the solution of the problem
in a distributed memory environment while reducing the overall computational cost by focusing the
computational effort in the regions where it is needed at each time step. Other important components
of the formulation are a simple mass correction procedure which ensures that mass is conserved at the
global level throughout the simulation, an efficient algorithm for the element search in the projection
step from the deformed to the background mesh, and the use of an algebraic fractional step approach
for the incompressible Navier-Stokes equations which ensures that the resulting systems of equations
is easy to solve while at the same time it converges to the solution of the original monolithic problem.

The performance of the method has been tested in three numerical examples representing the
sloshing inside a tank subject to a horizontal acceleration, a free falling jet, and the impact of a wave
against an obstacle after a quick gauge opening. Both spatial and temporal convergence have been
assessed, and the behavior of each of the ingredients of the formulation has been successfully tested.
The results obtained for the proposed adaptive Fixed-Mesh ALE method are in good agreement with
experimental results, and the obtained velocity and pressure fields are smooth thanks to the terms
stabilizing both the bad element cuts and the convective and inf-sup sources of instability.

Acknowledgements

The authors would like to acknowledge Eric Burman for the fruitful discussions on the Ghost Penalty
method. This work is partially funded through the ELASTIC-FLOW project, Ref. DPI2015-67857-R
of the Spanish Government. J. Baiges acknowledges the support of the Spanish Government through
the Ramón y Cajal grant RYC-2015-17367. R. Codina acknowledges the support received though
the ICREA Acadèmia Research Program of the Catalan Government. E. Castillo gratefully ac-
knowledges the support received from CONICYT (Programa de Formación de Capital o Humano
Avanzado/Becas-Chile Folio 72120080).

References

[1] S.E.R.I. community. http://wiki.manchester.ac.uk/spheric/index.php..

[2] I. Akkerman, Y. Bazilevs, C. Kees, and M. Farthing. Isogeometric analysis of free-surface
flow. Journal of Computational Physics, 230(11):4137 – 4152, 2011. Special issue High Order
Methods for {CFD} Problems.

[3] S. Amdouni, M. Moakher, and Y. Renard. A local projection stabilization of fictitious domain
method for elliptic boundary value problems. Applied Numerical Mathematics, 76:60–75, 2014.

32



(a) t = 0.03 s

(b) t = 0.6 s

(c) t = 1.29s

Figure 20: (a) Position of the free surface and computational mesh at several instants of the simulation
for the green water flow case.

33



(d) t = 2.61 s

(e) t = 3.87 s

(f) t = 5.49 s

Figure 20: (b) Position of the free surface and computational mesh at several instants of the simulation
for the green water flow case .

34



0 2 4 6 8
−2000

0

2000

4000

6000

8000

10000

12000

Time (s)

P
re

ss
u

re
 (

P
a

)

 

 

Experimental results
Numerical Results

0 2 4 6 8
−2000

0

2000

4000

6000

8000

10000

Time (s)

P
re

ss
u

re
 (

P
a

)

 

 

Experimental results
Numerical Results

0 2 4 6 8
−500

0

500

1000

1500

2000

Time (s)

P
re

ss
u

re
 (

P
a

)

 

 

Experimental results
Numerical Results

0 2 4 6 8
−500

0

500

1000

1500

2000

2500

Time (s)

P
re

ss
u

re
 (

P
a

)

 

 

Experimental results
Numerical Results

Figure 21: Comparison of experimental and numerical values for the pressure time history at several
points of the obstacle surface (P1 to P4). From left to right and then top to bottom: P1: (0.8245,
0.021, 0.4965), P2: (0.8245, 0.141, 0.4965), P3: (0.7635, 0.161, 0.4965), P4: (0.7235, 0.161, 0.4965)

35



(a) t = 0.03 s, vmax = 1.06 m/s. (b) t = 0.6 s, vmax = 1.73 m/s.

(c) t = 1.29 s, vmax = 2.69 m/s. (d) t = 3.87 s, vmax = 1.86 m/s.

(e) t = 5.49 s, vmax = 2.59 m/s.

Figure 22: Velocity vectors at the free surface for the dam-break problem at several time steps. Vector
colors indicate velocity magnitudes (with light red indicating the maximum velocity, dark blue indi-
cating fluid at rest), vector arrowheads indicate flow direction. The maximum fluid nodal velocity at
each time step is indicated in the captions.

36



[4] R. Amini, R. Maghsoodi, and N. Z. Moghaddam. Simulating free surface problem using iso-
geometric analysis. Journal of the Brazilian Society of Mechanical Sciences and Engineering,
38(2):413–421, 2016.

[5] H. Askes and L. J. Sluys. Remeshing strategies for adaptive ale analysis of strain localisation.
European Journal of Mechanics-A/Solids, 19(3):447–467, 2000.

[6] S. Badia and J. Baiges. Adaptive finite element simulation of incompressible flows by hy-
brid continuous-discontinuous galerkin formulations. SIAM Journal on Scientific Computing,
35(1):A491–A516, 2013.

[7] S. Badia and R. Codina. Algebraic pressure segregation methods for the incompressible Navier-
Stokes equations. Archives of Computational Methods in Engineering, 15(3):1–52, 2007.

[8] S. Badia, F. Nobile, and C. Vergara. Robin-Robin preconditioned Krylov methods for fluid-
structure interaction problems. Computer Methods in Applied Mechanics and Engineering,
198:2768–2784, 2009.

[9] S. Badia, A. Quaini, and A. Quarteroni. Modular vs non-modular preconditioners for fluid-
structure systems with large added-mass effect. Computer Methods in Applied Mechanics and
Engineering, 197:4216–4232, 2008.

[10] J. Baiges and C. Bayona. Refficientlib: An efficient load-rebalanced adaptive mesh refinement
algorithm for high performance computational physics meshes. Submitted, 2015.

[11] J. Baiges and R. Codina. The Fixed Mesh-ALE approach applied to solid mechanics and fluid-
structure interaction problems. International Journal for Numerical Methods in Engineering,
81:1529–1557, 2009.

[12] J. Baiges, R. Codina, and H. Coppola-Owen. The Fixed-Mesh ALE approach for the nu-
merical simulation of floating solids. International Journal for Numerical Methods in Fluids,
67(8):1004–1023, 2011.

[13] J. Baiges, R. Codina, F. Henke, S. Shahmiri, and W. A. Wall. A symmetric method for weakly
imposing dirichlet boundary conditions in embedded finite element meshes. International Jour-
nal for Numerical Methods in Engineering, 90(5):636–658, 2012.

[14] S. Balay, S. Abhyankar, M. F. Adams, J. Brown, P. Brune, K. Buschelman, L. Dalcin, V. Ei-
jkhout, W. D. Gropp, D. Kaushik, M. G. Knepley, L. C. McInnes, K. Rupp, B. F. Smith,
S. Zampini, and H. Zhang. PETSc Web page. http://www.mcs.anl.gov/petsc, 2015.

[15] H. Barbosa and T. Hughes. The finite element method with Lagrangian multipliers on the bound-
ary: circumventing the Babuška-Brezzi condition. Computer Methods in Applied Mechanics
and Engineering, 85:109–128, 1991.

[16] G. R. Barrenechea and F. Chouly. A local projection stabilized method for fictitious domains.
Applied Mathematics Letters, 25(12):2071 – 2076, 2012.

[17] T. Belytschko, W. Liu, and B. Moran. Nonlinear finite elements for continua and structures.
John Wiley, 2001.

[18] F. Brezzi and M. Fortin. Mixed and hybrid finite element methods. Springer Verlag, 1991.

[19] E. Burman. Ghost penalty. Comptes Rendus Mathematique, 348(21):1217–1220, 2010.

37



[20] E. Burman. Projection stabilization of lagrange multipliers for the imposition of constraints on
interfaces and boundaries. Numerical Methods for Partial Differential Equations, 30(2):567–
592, 2014.

[21] E. Burman and M. Fernandez. Stabilization of explicit coupling in fluid-structure interaction
involving fluid incompressibility. Computer Methods in Applied Mechanics and Engineering,
198:766–784, 2009.

[22] E. Burman and M. A. FernÃ¡ndez. An unfitted nitsche method for incompressible fluid-structure
interaction using overlapping meshes. Computer Methods in Applied Mechanics and Engineer-
ing, 279:497 – 514, 2014.

[23] E. Burman and P. Hansbo. Fictitious domain finite element methods using cut elements: Ii. a
stabilized nitsche method. Applied Numerical Mathematics, 62(4):328–341, 2012.

[24] E. Burman and P. Hansbo. Fictitious domain methods using cut elements: Iii. a stabilized
nitsche method for stokes’ problem. ESAIM: Mathematical Modelling and Numerical Analysis,
48(3):859–874, 2014.

[25] C. Canuto, M. Y. Hussaini, A. M. Quarteroni, A. Thomas Jr, et al. Spectral methods in fluid
dynamics. Springer Science & Business Media, 2012.

[26] E. Castillo, J. Baiges, and R. Codina. Approximation of the two-fluid flow problem for vis-
coelastic fluids using the level set method and pressure enriched finite element shape functions.
Journal of Non-Newtonian Fluid Mechanics, 225:37 – 53, 2015.

[27] A. Chorin. The numerical solution of the Navier–Stokes equations for an incompressible fluid.
AEC Research and Development Report, NYO-1480-82. New York University, New York, 1967.

[28] R. Codina. A stabilized finite element method for generalized stationary incompressible flows.
Computer Methods in Applied Mechanics and Engineering, 190:2681–2706, 2001.

[29] R. Codina. Stabilized finite element approximation of transient incompressible flows using
orthogonal subscales. Computer Methods in Applied Mechanics and Engineering, 191:4295–
4321, 2002.

[30] R. Codina. Analysis of a stabilized finite element approximation of the Oseen equations using
orthogonal subscales. Applied Numerical Mathematics, 58:264–283, 2008.

[31] R. Codina and S. Badia. On some pressure segregation methods of fractional-step type for the
finite element approximation of incompressible flow problems. Computer Methods in Applied
Mechanics and Engineering, 195:2900–2918, 2006.

[32] R. Codina and J. Baiges. Finite element approximation of transmission conditions in fluids and
solids introducing boundary subgrid scales. International Journal for Numerical Methods in
Engineering, 87:386–411, 2011.

[33] R. Codina and J. Baiges. Weak imposition of essential boundary conditions in the finite ele-
ment approximation of elliptic problems with non-matching meshes. International Journal for
Numerical Methods in Engineering, 2014.

[34] R. Codina, G. Houzeaux, H. Coppola-Owen, and J. Baiges. The fixed-mesh ALE approach for
the numerical approximation of flows in moving domains. J. Comput. Phys., 228:1591–1611,
2009.

38



[35] H. Coppola-Owen and R. Codina. A finite element model for free surface flows on fixed meshes.
Int. J. Num. Meth. Fluids, 54:1151–1171, 2007.

[36] R. Courant and K. Friedrichs. Supersonic Flow and Shock Waves. Springer–Verlag, 1948.

[37] P. Dı́ez and A. Huerta. A unified approach to remeshing strategies for finite element h-adaptivity.
Computer Methods in Applied Mechanics and Engineering, 176:215–229, 1999.

[38] J. Donea, A. Huerta, J.-P. Ponthot, and A. Rodriguez-Ferran. Encyclopedia of computational
mechanics vol. 1: Fundamentals., chapter 14: Arbitrary lagrangian-eulerian methods, 2004.

[39] A. Ern and J.-L. Guermond. Theory and Practice of Finite Element. Springer-Verlag, 2004.

[40] O. M. Faltinsen, O. F. Rognebakke, I. A. Lukovsky, and A. N. Timokha. Multidimensional
modal analysis of nonlinear sloshing in a rectangular tank with finite water depth. Journal of
Fluid Mechanics, 407:201–234, 2000.

[41] C. Forster, W. Wall, and E. Ramm. Artificial added mass instabilities in sequential staggered
coupling of nonlinear structures and incompressible viscous flows. Computer Methods in Ap-
plied Mechanics and Engineering, 196:1278–1293, 2007.

[42] A. Gerstenberger and W. Wall. An embedded Dirichlet formulation for 3D continua. Interna-
tional Journal for Numerical Methods in Engineering, 82:537–563, 2010.

[43] R. Glowinski, T. Pan, T. Hesla, D. Joseph, and J. Périaux. A distributed Lagrange multiplier/-
fictitious domain method for flows around moving rigid bodies: application to particulate flow.
Int. J. Num. Meth. Fluids, 30:1043–1066, 1999.

[44] P. Hansbo and M. Larson. Discontinuous Galerkin methods for incompressible and nearly in-
compressible elasticity by Nitsche’s method. Computer Methods in Applied Mechanics and
Engineering, 191:1895–1908, 2002.

[45] G. Houzeaux and R. Codina. A finite element model for the simulation of lost foam casting. Int.
J. Num. Meth. Fluids, 46:203–226, 2004.

[46] T. Hughes, G. Feijóo, L. Mazzei, and J. Quincy. The variational multiscale method–a paradigm
for computational mechanics. Computer Methods in Applied Mechanics and Engineering,
166:3–24, 1998.

[47] M. Juntunen and R. Stenberg. Nitsche’s method for general boundary conditions. Helsinki
University of Technology, Institute of Mathematics, Research Reports A530, 2007.

[48] G. Karypis and V. Kumar. A fast and high quality multilevel scheme for partitioning irregular
graphs. International Conference on Parallel Processing, pages 113–122, 1995.

[49] S. Kollmannsberger, A. Özcan, J. Baiges, M. Ruess, E. Rank, and A. Reali. Parameter-free,
weak imposition of dirichlet boundary conditions and coupling of trimmed and non-conforming
patches. International Journal for Numerical Methods in Engineering, 101(9):670–699, 2015.

[50] M.-C. Lai and C. Peskin. An immersed boundary method with formal second-order accuracy
and reduced numerical viscosity. J. Comput. Phys., 160:705–719, 2000.

[51] A. Larese, R. Rossi, and E. Oñate. Finite element modeling of free surface flow in variable
porosity media. Archives of Computational Methods in Engineering, 22(4):637–653, 2015.

39



[52] R. Löhner, J. Cebral, F. Camelli, J. Baum, and E. Mestreau. Adaptive embedded/immersed
unstructured grid techniques. Archives of Computational Methods in Engineering, 14:279–301,
2007.

[53] E. Marchi. On the free overfall. Journal of Hydraulic Research, 31(6):777–790, 1993.

[54] E. Mestreau, R. Lohner, and S. Aita. TGV tunnel entry simulations using a finite element code
with automatic remeshing, 1993. AIAA Paper 93-0890.

[55] R. Mittal and G. Iaccarino. Immersed boundary methods. Annual Review of Fluid Mechanics,
37:239–261, 2005.

[56] V. P. Nguyen, T. Rabczuk, S. Bordas, and M. Duflot. Meshless methods: a review and computer
implementation aspects. Mathematics and computers in simulation, 79(3):763–813, 2008.

[57] J. Nitsche. Über ein Varationsprinzip zu Lösung von Dirichlet-Problemen bei Verwendung von
Teilräumen, die keinen Randbedingungen unterworfen sind. Abhandlungen aus dem Mathema-
tisches Seminar der Universität, 36:9–15, 1971.

[58] E. Oñate, S. R. Idelsohn, F. Del Pin, and R. Aubry. The particle finite element method-an
overview. International Journal of Computational Methods, 1(02):267–307, 2004.

[59] C. Peskin. Flow patterns around heart valves: A numerical method. J. Comput. Phys., 10:252–
271, 1972.

[60] C. Samaniego, G. Houzeaux, E. Samaniego, and M. Vázquez. Parallel embedded boundary
methods for fluid and rigid-body interaction. Computer Methods in Applied Mechanics and
Engineering, 290:387 – 419, 2015.

[61] B. Schott and W. Wall. A new face-oriented stabilized xfem approach for 2d and 3d incom-
pressible navier–stokes equations. Computer Methods in Applied Mechanics and Engineering,
276:233–265, 2014.

[62] S. Turek and J. Hron. Proposal for numerical benchmarking of fluid–structure interaction be-
tween an elastic object and laminar incompressible flow. In H. J. Bungartz and M. Schäfer,
editors, Fluid–Structure Interaction – Modelling, Simulation, Optimization, number 53 in Lec-
ture Notes in Computational Science and Engineering, pages 371–385. Springer, Berlin, 2006.
ISBN 3-540-34595-7.

40


