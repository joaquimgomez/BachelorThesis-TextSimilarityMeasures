











































Subspace Procrustes Analysis

Xavier Perez-Sala1,3,4, Fernando De la Torre2, Laura Igual3,5,
Sergio Escalera3,5, and Cecilio Angulo4

1 Fundació Privada Sant Antoni Abat, Vilanova i la Geltrú, 08800, Spain.
2 Robotics Institute, Carnegie Mellon University, Pittsburgh, PA, 15213. USA.

3 Computer Vision Center, Universitat Autònoma de Barcelona, Bellaterra, Spain.
4 Universitat Politècnica de Catalunya, Vilanova i la Geltrú, 08800, Spain.

5 Universitat de Barcelona, Barcelona, 08007, Spain.

Abstract. Procrustes Analysis (PA) has been a popular technique to
align and build 2-D statistical models of shapes. Given a set of 2-D
shapes PA is applied to remove rigid transformations. Later, a non-rigid
2-D model is computed by modeling the residual (e.g., PCA). Although
PA has been widely used, it has several limitations for modeling 2-D
shapes: occluded landmarks and missing data can result in local minima
solutions, independent PA and PCA steps might result in a sub-optimal
model, and there is no guarantee that the 2-D shapes provide a uniform
sampling of the 3-D space of rotations for the object. To address previous
issues, this paper proposes Subspace PA (SPA).
Given several instances of a 3-D object, SPA computes the mean and a
2-D subspace that can simultaneously model all rigid and non-rigid defor-
mations of the 3-D object. We propose a discrete (DSPA) and continuous
(CSPA) formulation for SPA, assuming that 3-D samples of an object
are provided. DSPA extends the traditional PA, and produces unbiased
2-D models by uniformly sampling different views of the 3-D object.
CSPA provides a continuous approach to uniformly sample the space of
3-D rotations, being more efficient in space and time. We illustrate the
benefits of SPA in two experiments. First, SPA is used to learn 2-D face
and body models from 3-D datasets. Experiments on the FaceWarehouse
and CMU motion capture (MoCap) datasets show the benefits of our 2-D
models against the state-of-the-art PA approaches and conventional 3-D
models. Second, SPA learns an unbiased 2-D model from CMU MoCap
dataset and it is used to estimate the human pose on the Leeds Sports
dataset. Our feature selection by subspace matching formulation show
the benefits of our models over state-of-the-art approaches in human pose
estimation.

1 Introduction

In computer vision, Procrustes Analysis (PA) has been extensively used to align
shapes (e.g., [30, 6]) and appearance (e.g., [32, 18]) as a pre-processing step to
build 2-D models of shape variation. Usually, shape models are learned from a
discrete set of 2-D landmarks through a two-step process [11]. Firstly, the rigid
transformations are removed by aligning the training set w.r.t. the mean using



(a) (b) (c)

Fig. 1. Illustration of Continuous Subspace Procrustes Analysis (CSPA). CSPA builds
an unbiased 2-D model of human joints’ variation (b) by integrating over all possible
viewpoints of a 3-D motion capture data (a). This 2-D body shape model is used to
detect body joints from different viewpoints (c). Our CSPA model generalizes well
across poses and camera views because it is learned from a 3-D model.

PA; next, the remaining deformations are modeled using Principal Component
Analysis (PCA) [26, 8].

PA has been widely employed despite suffering from several limitations: (1)
the 2-D training samples do not necessarily cover a uniform sampling of all 3-D
rigid transformations of an object and this can result in a biased model (i.e., some
poses are better represented than others); (2) it is computationally expensive to
learn a shape model by sampling all possible 3-D rigid transformations of an
object; (3) the models that are learned using only 2-D landmarks cannot model
missing landmarks due to large pose changes. Moreover, PA methods can lead
to local minima problems if there are missing components in the training data;
(4) finally, PA is computationally expensive, it scales linearly with the number
of samples and landmarks and quadratically with the dimension of the data.

To address these issues, this paper proposes a discrete and a continuous
formulation of Subspace Procrustes Analysis (SPA). SPA is able to efficiently
compute the non-rigid subspace of possible 2-D projections given several 3-D
samples of a deformable object. Note that our proposed work is the inverse
problem of Non-Rigid Structure From Motion (NRSFM) [34, 33, 4]. The goal of
NRSFM is to recover 3-D shape models from 2-D tracked landmarks, while SPA
builds unbiased 2-D models from 3-D data. As we show in the experimental
section, the learned 2-D model has the same representational power of a 3-D
model but leads to faster fitting algorithms [22]. SPA uniformly samples the
space of possible 3-D rigid transformations, and it is extremely efficient in space
and time. The main idea of SPA is to combine functional data analysis with
subspace estimation techniques.

Fig. 1 illustrates the main idea of this work. In Fig. 1 (a), we represent
many samples of 3-D Motion Capture (MoCap) data of humans performing



several activities. SPA simultaneously aligns all 3-D samples projections, while
computing a 2-D subspace (Fig. 1 (b)) that can represent all possible projections
of the 3-D MoCap samples under different camera views. Hence, SPA provides
a simple, efficient and effective method to learn a 2-D subspace that accounts
for non-rigid and 3-D geometric deformation of 3-D objects. These 2-D subspace
models can be used for human pose estimation (i.e., constrain body joints, see
Fig. 1 (c)). Observe that the SPA subspace model is able to reconstruct all 3-D
rigid projections and non-rigid deformations. As we will show in the experimental
validation, the models learned by SPA are able to generalize better than existing
PA approaches across view-points (because they are built using 3-D models)
and preserve expressive non-rigid deformations. Moreover, computing SPA is
extremely efficient in space and time.

In order to estimate the human pose in images, state-of-the-art approaches [25,
36, 28, 29] use discriminative detectors to estimate the likelihood of image pixels
to belong to each body part. Then, body configurations are constrained by gen-
erative models [2, 25, 36], also trained from labeled images. Although successful,
these 2-D models typically require a large amount of training data across views
to achieve view-invariance. In a preliminary version of this work [27], we showed
that unbiased 2-D models learned from 3-D data outperform those trained from
2-D data, also on human pose estimation datasets. In order to reconstruct body
configurations from different viewpoints, this paper reformulates the human pose
estimation problem as a subspace matching [31, 21] between image pixels and
2-D deformable models trained on 3-D MoCap data. As we show in the exper-
imental section, our method outperforms state-of-the-art approaches on Leeds
Sports dataset [16] (LSP) because it is able to handle large viewpoint variations.
In addition, our method is robust to occlusions and outliers, and we efficiently
solved the subspace matching problem with linear programming.

The rest of the document is organized as follows, Section 2 reviews previous
work in PA and motivates SPA, detailed in Section 3. In Section 4 we describe our
feature selection method to use SPA models for human pose estimation. Section 5
reports our experimental results and, finally, Section 6 presents the conclusions
and outlines our future work. Additionally, we review the vec-transpose operator
in Appendix A, we discuss how to build 2-D models directly from a 3-D model in
Appendix B and we provide additional details about derivation steps of CSPA
in Appendix C.

2 Procrustes Analysis Revisited

This section describes three different formulations of PA with a unified and
enlightening matrix formulation.

Procrustes Analysis (PA): Given a set of m centered shapes (see nota-
tion6) composed by ` landmarks Di ∈ Rd×`,∀i = 1, . . . ,m, PA [9, 12, 11, 14,

6 Bold capital letters denote a matrix X, bold lower-case letters a column vector x. xi
represents the ith column of the matrix X. xij denotes the scalar in the i

th row and



3] computes the d-dimensional reference shape M ∈ Rd×` and the m transfor-
mations Ti ∈ Rd×d (e.g., affine, Euclidean) that minimize the reference-space
model [14, 11, 3] (see Fig. 2 (a)):

ER(M,T) =

m∑
i=1

||TiDi −M||2F , (1)

where T = [TT1 , · · · ,TTm]T ∈ Rdm×d. In the case of two-dimensional shapes

(d = 2), Di =

[
x1 x2 . . . x`
y1 y2 . . . y`

]
. Alternatively, PA can be optimized using the

data-space model [3] (see Fig. 2 (b)):

ED(M,A) =

m∑
i=1

||Di −AiM||2F , (2)

where A = [AT1 , · · · ,ATm]T ∈ Rdm×d. Ai = T−1 ∈ Rd×d is the inverse trans-
formation of Ti and corresponds to the rigid transformation for the reference
shape M.

The error function Eq. (1) of the reference-space model minimizes the differ-
ence between the reference shape and the registered shape data. In the data-space
model, the error function Eq. (2) compares the observed shape points with the
transformed reference shape, i.e., shape points predicted by the model and based
on the notion of average shape [37]. This difference between the two models leads
to different properties. Since the reference-space cost (ER, Eq. (1)) is a sum of
squares and it is convex in the optimization parameters, it can be optimized
globally with Alternated Least Squares (ALS) methods. On the other hand, the
data-space cost (ED, Eq. (2)) is a bilinear problem and non-convex. If there is
no missing data, the data-space model can be solved using the Singular Value
Decomposition (SVD). A major advantage of the data-space model is that it is
gauge invariant (i.e., the cost does not depend on the coordinate frame in which
the reference shape and the transformations are expressed) [3]. Benefits of both
models are combined in [3]. Recently, Pizarro et al. [30] have proposed a convex
approach for PA based on the reference-space model. In their case, the cost func-
tion is expressed with a quaternion parametrization which allows conversion to a
Sum of Squares Program (SOSP). Finally, the equivalent semi-definite program
of a SOSP relaxation is solved using convex optimization.

PA has also been applied to learn appearance models invariant to geometric
transformations. When PA is applied to shapes, the geometric transformation
(e.g., Ti or Ai) can be directly applied to the image coordinates. However, to
align appearance features the geometric transformations have to be composed
with the image coordinates, and the process is a bit more complicated. This is

jth column of the matrix X. All non-bold letters represent scalars. In ∈ Rn×n is an
identity matrix. ‖x‖2 = 2

√∑
i
|xi|2 and ‖X‖F =

√∑
ij
x2ij denote the 2-norm for

a vector and the Frobenius norm of a matrix, respectively. X⊗Y is the Kronecker
product of matrices and X(p) is the vec-transpose operator, detailed in Appendix A.



(a) (b)

Fig. 2. (a): Reference-space model. (b): Data-space model. Note that Ai = T
−1
i .

the main difference when applying PA to align appearance and shape. Frey and
Jojic [10] proposed a method for learning a factor analysis model that is invari-
ant to geometric transformations. The computational cost of this method grows
polynomially with the number of possible spatial transformations and it can be
computationally intensive when working with high-dimensional motion models.
To improve upon that, De la Torre and Black [32] proposed parameterized com-
ponent analysis: a method that learns a subspace of appearance invariant to
affine transformations. Miller et al. proposed the congealing method [18], which
uses an entropy measure to align images with respect to the distribution of the
data. Kookinos and Yuille [17] proposed a probabilistic framework and extended
previous approaches to deal with articulated objects using a Markov Random
Field (MRF) on top of Active Appearance Models (AAMs).

Projected Procrustes Analysis (PPA): Due to advances in 3-D capture
systems, nowadays it is common to have access to 3-D shape models for a variety
of objects. Given n 3-D shapes Di ∈ R3×`, we can compute r projections Pj ∈
R2×3 for each of them (after removing translation) and minimize PPA:

EPPA(M,Aij) =

n∑
i=1

r∑
j=1

‖PjDi −AijM‖
2
F
, (3)

where Pj = PR(ωj) is an orthographic projection of a 3-D rotation R(ωj) in
a given domain Ω, defined by the rotation angles ωj = {φ, θ, ψ}. Note that,
while data and reference shapes are d-dimensional in Eq. (1) and Eq. (2), data
Di and reference M ∈ R2×` shapes in Eq. (3) are fixed to be 3-D and 2-D,
respectively. Hence, Aij ∈ R2×2 is a 2-D transformation mapping M to the 2-
D projection of the 3-D data. ALS is a common method to minimize Eq. (2)
and (3). ALS alternates between minimizing over M and Aij ∈ R2×2 with the



following expressions:

Aij = PjDiM
T (MMT )−1 ∀i, j, (4)

M = (

n∑
i=1

r∑
j=1

ATijAij)
−1(

n∑
i=1

(

r∑
j=1

ATijPj)Di). (5)

Note that PPA and its extensions deal with missing data naturally. Since
they use the whole 3-D shape of objects, the enhanced 2-D dataset resulting
of projecting the data from different viewpoints can be constructed without
occluded landmarks.

Continuous Procrustes Analysis (CPA): A major limitation of PPA is
the difficulty to generate uniform distributions in the Special Orthogonal group
SO(3) [24]. Due to the topology of SO(3), different angles should be sampled
following different distributions, which becomes difficult when the rotation ma-
trices must be confined in a specific region Ω of SO(3), restricted by rotation
angles ω = {φ, θ, ψ}. Moreover, the computational complexity of PPA increases
linearly with the number of projections (r) and 3-D objects (n).

In order to deal with these drawbacks, a continuous formulation (CPA) was
proposed in [14] by formulating PPA within a functional analysis framework.
CPA minimizes:

ECPA(M,A(ω)i) =

n∑
i=1

∫
Ω
‖P(ω)Di −A(ω)iM‖

2
F dω, (6)

where dω = 1
8π2

sin(θ)dφdθdψ ensures a uniform sampling of the SO(3) space [24]
for the rotated 3-D object. This continuous formulation finds the optimal 2-D
reference shape of a 3-D dataset, rotated and projected in a given domain Ω, by
integrating over all possible rotations in that domain. The main difference be-
tween Eq. (3) and Eq. (6) is that the entries in P(ω) ∈ R2×3 and A(ω)i ∈ R2×2
are not scalars anymore, but functions of the integration angles ω = {φ, θ, ψ}.
After some linear algebra and functional analysis, it is possible to find an equiv-
alent expression to the discrete approach (Eq. (3)), where A(ω)i and M have
the following expressions:

A(ω)i = P(ω)DiM
T (MMT )−1 ∀i, (7)

M =

(
n∑
i=1

∫
Ω

A(ω)Ti A(ω)idω

)−1( n∑
i=1

(∫
Ω

A(ω)Ti P(ω)dω

)
Di

)
. (8)

It is important to notice that the 2-D projections are not explicitly computed in
the continuous formulation. The solution of M can be found in closed form:

M = (ZMT (MMT )−1)−1Z, (9)

where Z = (MMT )−1M
(∑n

i=1(D
T
i ⊗D

T
i ) vec(X)

)(`)
, and the definite integral7

X =
∫
Ω P(ω)

TP(ω)dω ∈ R3×3 averages the rotation covariances. Note that X
is not data dependent, and it can be computed off-line.

7 See Appendix A for an explanation of the vec-transpose operator.



Our work extends [14] in several ways. First, CPA only computes the ref-
erence shape of the dataset. In this paper, we add a subspace that is able to
model non-rigid deformations of the object, as well as rigid 3-D transformations
that the affine transformation cannot model. As we will describe later, adding
a subspace to the PA formulation is not a trivial task. For instance, modeling a
subspace following the standard methodology based on CPA would still require
to generate r rotations for each 3-D sample. Hence, the CPA efficiency is lim-
ited to rigid models while our approach is not. Second, we provide a discrete
and continuous formulation in order to provide a better understanding of the
problem, and experimentally show that it converges to the same solution when
the number of sampled rotations (r) increases. Finally, we evaluate the models
in two challenging problems: human pose estimation in still images, as well as
faces and joints’ modeling.

3 Subspace Procrustes Analysis (SPA)

This section proposes Discrete Subspace Procrustes Analysis (DSPA) and Con-
tinuous Subspace Procrustes Analysis (CSPA) to learn unbiased 2-D models
from 3-D deformable objects.

Discrete Subspace Procrustes Analysis (DSPA): Given a set of r
viewpoints Pj ∈ R2×3 of n 3-D shapes represented by ` landmarks, where
di = vec(Di) ∈ R3`×1, DSPA extends PA by considering a subspace B ∈ R2`×k
and the weights cij ∈ Rk×1 which model the non-rigid deformations that the
mean M and the transformation Aij are not able to reconstruct. DSPA mini-
mizes the following function:

EDSPA(M,Aij ,B, cij) =

n∑
i=1

r∑
j=1

∥∥∥PjDi −AijM− (cTij ⊗ I2)B(2)∥∥∥2
F

= (10)

n∑
i=1

r∑
j=1

‖(I` ⊗Pj)di − (I` ⊗Aij)µ−Bcij‖
2
2
, (11)

where Pj = PR(ωj) is a particular 3-D rotation, R(ωj), that is projected using
an orthographic projection into 2-D, µ = vec(M) ∈ R2`×1 is the vectorized ver-
sion of the reference shape, cij are the k weights of the subspace for each 2-D
shape projection, and B(2) ∈ R2k×` is the reshaped subspace. Observe that the
difference with Eq. (3) is that we have added a subspace. This subspace will com-
pensate for the non-rigid components of the 3-D object and the rigid component
(3-D rotation and projection to the image plane) that the affine transformation
cannot model (see Fig. 3 (a), where the first three basis of the subspace capture
non-rigid and rigid deformations). Recall that a 3-D rigid object under ortho-
graphic projection can be recovered with a three-dimensional subspace (if the
mean is removed), but PA cannot recover it because it is only rank two. Also,
observe that the coefficient cij depends on two indexes, i for the object and j for
the geometric projection. Dependency of cij on the geometric projection is a key



(a)

(b)

(c)
µ µ+ b1 µ+ b2 µ+ b3

Fig. 3. Illustration of the reference shape (µ) and the first three basis (b1, b2, b3) of
the 2-D subspace models from (a) DSPA, and (b) CSPA; as well as a conventional (c)
3-D model (PA + PCA). We sampled each basis 4 times between the standard limits [7]
to show their deformation behavior. All models were trained on the FaceWarehouse [5]
dataset, with 10 3-D faces from expressions number 0 and 1 (neutral and open mouth,
respectively). Pitch an yaw integration limits were set to φ, θ ∈ [−π/2, π/2] for (b),
and 100 projections were generated for each 3-D shape within the same interval to
train (a). Note that µ and bi in (c) are 3-D. They are projected frontally for a better
comparison.

point. If the jth index is not considered, the subspace would not be able to cap-
ture the variations in pose and its usefulness for our purposes would be unclear.
Although Eq. (10) and the NRSFM problem follow similar formulation [4], the
assumptions are different and variables have opposite meanings. For instance,
the NRSFM assumptions about rigid transformations do not apply here, since
Aij are affine transformations in our case.

Given an initialization of B = 0, DSPA is minimized by finding the trans-
formations A∗ij and the reference shape M

∗ that minimize Eq. (3), using the
same ALS framework as in PA. Then, we substitute A∗ij and M

∗ in Eq. (11)
that results in the expression:

EDSPA(B, cij) =

n∑
i=1

r∑
j=1

∥∥∥D̃ij − (cTij ⊗ I2)B(2)∥∥∥2
F

= (12)

n∑
i=1

r∑
j=1

∥∥∥d̃ij −Bcij∥∥∥2
2

=
∥∥∥D̃−BC∥∥∥2

F
, (13)

where D̃ij = PjDi−A∗ijM
∗ ∈ R2×`, d̃ij = vec(D̃ij) ∈ R2`×1, D̃ = [d̃1 . . . d̃nr] ∈

R2`×nr, and C ∈ Rk×nr. Finally, we can find the global optima of Eq. (13) by
Singular Value Decomposition (SVD): B = U and C = SVT , where D̃ =
USVT .

Continuous Subspace Procrustes Analysis (CSPA): As it was dis-
cussed in the introduction, the discrete formulation of PA is not efficient in
space nor time, and might suffer from not uniform sampling of the original
space. CSPA generalizes DSPA by extending it with a functional formulation.



CSPA minimizes the following functional:

ECSPA(M,A(ω)i,B, c(ω)i) =
n∑
i=1

∫
Ω

∥∥∥P(ω)Di −A(ω)iM− (c(ω)Ti ⊗ I2)B(2)∥∥∥2
F
dω = (14)

n∑
i=1

∫
Ω
‖(I` ⊗P(ω))di − (I` ⊗A(ω)i)µ−Bc(ω)i‖

2
2 dω, (15)

where dω = 1
8π2

sin(θ)dφdθdψ. The main difference between Eq. (15) and Eq. (11)
is that the entries in c(ω)i ∈ Rk×1, P(ω) ∈ R2×3 and A(ω)i ∈ R2×2 are not
scalars anymore, but functions of integration angles ω = {φ, θ, ψ}.

Given an initialization of B = 0, and similarly to the DSPA model, CSPA is
minimized by finding the optimal reference shape M∗ that minimizes Eq. (6).
We used the same fixed-point framework as CPA. Given the value of M∗ and
the expression of A(ω)∗i from Eq. (7), we substitute them in Eq. (15) resulting
in:

ECSPA(B, c(ω)i) =

n∑
i=1

∫
Ω

∥∥∥P(ω)D̄i − (c(ω)Ti ⊗ I2)B(2)∥∥∥2
F
dω = (16)

n∑
i=1

∫
Ω

∥∥(I` ⊗P(ω))d̄i −Bc(ω)i∥∥22 dω, (17)
where D̄i = Di(I`− (M∗T (M∗M∗T )−1M∗)) and d̄i = vec(D̄i). We can find the
global optima of Eq. (17) by solving the eigenvalue problem, ΣB = BΛ, where
Λ are the eigenvalues corresponding to columns of B.

After some algebra (see Appendix C) we show that the covariance matrix
Σ = ((I` ⊗ Y) vec(

∑n
i=1

∑r
j=1 d̄ijd̄

T
ij))

(2`), where the definite integral Y =∫
Ω P(ω) ⊗ (I` ⊗ P(ω))dω ∈ R

2`×2` can be computed off-line, leading to an
efficient optimization in space and time. Though the number of elements in ma-
trix Y increase quadratically with the number of landmarks `, note that the
integration time is constant since Y has a sparse structure with only 36 different
non-zero values (recall that P(ω) ∈ R2×3).

Although A(ω)i and c(ω)i are not explicitly computed during training, this is
not a limitation compared to DSPA. During testing time, training values of c(ω)i
are not needed. Only the deformation limits in each principal direction of B are
required. These limits also depend on the eigenvalues [7], which are computed
with CSPA. The three principal basis between these limits are illustrated in
Fig. 3. We show how the first 2 basis of CSPA (Fig. 3 (b)) and DSPA (Fig. 3 (a))
learn viewpoint changes, as well as the common expression for all the subjects
in the training set (mouth opening) is learned as the third basis. Note that the
3-D (PA+PCA) model (Fig. 3 (c)) learns the common facial expression in the
first basis (because the 3-D shapes are not rotated to train the 3-D model),
and its following basis model inter-person differences. These distinctive person
characteristics are also learned by SPA models in their following basis.



4 Subspace Feature Selection for Human Pose Estimation

This section describes how CSPA can be applied to estimate the human pose
in images, given the unbiased 2-D model computed in Section 3. Human pose
estimation refers to the problem of finding body configuration of humans in
images [25, 36, 28, 29]. When body configurations are modeled by means of a 2-
D subspace model, we can formulate the human pose estimation challenge as a
subspace feature selection [31, 21], between a 2-D deformable model of joints’
variation and a pool of features for each body joint. These features or pixel
candidates are the result of running state-of-the-art body part detectors.

The goal of subspace feature selection is to choose the subset of ` landmarks
from nf candidate image features or landmarks that minimize the distance to a
subspace model. It was first introduced in [31] for establishing correspondences
between a sparse set of d-dimensional image features Q ∈ Rd×nf and a previ-
ously learned model of frontal faces. Given the candidate features and a model
composed of a reference shape M ∈ Rd×` and k basis B ∈ Rd`×k, the problem
consists on finding the optimal correspondence S and the subspace coefficients
c ∈ Rk×1 which minimize the following error:

min
S,c

∥∥vec(QST )− µ−Bc∥∥2
2
, (18)

s.t. S ∈ {0, 1}`×nf ,S1nf = 1`,

where µ = vec(M) ∈ Rd`×1 is the vectorization of the mean and the constraint
enforces to select only one candidate for each landmark. To reduce the number of
parameters, c is replaced by its optimal value c = (BTB)−1BT (vec(QST )− µ)
and the solution of S is found by means of Quadratic Programming (QP). Al-
though novel, this formulation has three main drawbacks: (1) QP is computa-
tionally expensive and the solution is found by combining the error of two QP
problems, one for the shape (location of the pixels in the image, d = 2), and
another one for the appearance (SIFT description of the image at those loca-
tions, d = 128); (2) only frontal objects (faces) are modeled; and (3) deformation
parameters c are not restricted to be plausible values [7].

Feature selection has also been studied in the topic of graph matching. In [19],
they introduced a matching method based on a locally affine-invariant geometric
constraint and Linear Programming (LP) techniques. This work was extended
in [38], making the method more robust to non-rigid facial poses contained in
the training set, and adding additional constraints to reduce the search space.

In this work, we build on [31] but solving the above mentioned drawbacks:
(1) we reformulated the joint shape and appearance minimization as a single
LP problem [19] instead of two QP problems, making feasible to handle the
large number of candidate features of human pose estimation problems (nf ≥
2 · 104); (2) we added an affinity transformation A ∈ R2×2 to model non-frontal
objects; and (3) we introduced constraints on the subspace parameters to guide
the optimization to plausible values of deformation.

Moreover, we borrowed landmark-candidate association formulation and con-
straints (see Fig. 4) from the graph matching literature [38]. In the rest of the



2× nf

`× nf `× nf `× nf
G S H

Fig. 4. Illustration of the candidate features matrix Q, as the concatenation of the
detector responses for each body joint. More specifically, Q concatenates those pixel
locations Qt with high detection score after applying each tth joint’s filter. Association
matrix G is illustrated by a sparse matrix, only having ones in those positions of each
tth row that correspond with Qt candidates. Similarly, H provides an association cost
for each of those selections, obtained from the detection score. S shows an example of
feature selection matrix, satisfying G restrictions and H cost.

paper, Q = [Q1, . . . ,Q`] ∈ R2×nf denotes the set of 2-D candidate image pix-
els, where Qt ∈ R2×nt is the subset of candidates of the tth landmark and
nf =

∑`
t=1 = nt. Each set t of candidates results from applying the state-

of-the-art body part detector [36] for the corresponding joint. Each of the nf
candidates is known to be associated with one of the ` landmarks and have an
assignation cost, depending on the detector response. The landmark-candidate
relation is encoded in the binary matrix G ∈ {0, 1}`×nf , where gti = 1 if the
ith candidate belongs to the tth landmark. In the same way, the assignation cost
hti of choosing the i

th candidate as the tth landmark is computed as the SVM
score by an efficient two-pass dynamic programming inference [25] and encoded
in the matrix H ∈ R`×nf .

Given the candidate features, association constraints and cost (Q, G, H), and
the shape model (mean M ∈ R2×`, B ∈ R2`×k), the problem consists on finding
the optimal correspondence S, the affinity transformation A, the translation t,
and the deformation weights c that minimize the following error:

min
S,A,c

η tr(HST ) +
∥∥vec(QST )− (I` ⊗A)µ−Bc− (1` ⊗ t)∥∥1 , (19)

s.t. S ∈ {0, 1}`×nf ,S1nf = 1`,
sti = 0, [t, i] ∈ {[t, i]|gti = 0},
− 3
√
λj ≤ cj ≤ 3

√
λj ,∀j = 1..k,

where the first term in the objective function measures the assignation cost, and
the second one the self reconstruction error. η is a parameter to trade off between
the two terms. In the experiments, we always set the value to η = 100 and we
found the final result was not sensitive to small change of this weight. Note that,
instead of using l2 norm, the reconstruction error is defined in l1 norm because of
its efficiency and robustness. Similarly to Eq. (18), the first constraint enforces S
to select only one candidate for each landmark. However, the second constraint



only allows S to select candidates for the tth landmark from the corresponding
set of candidates Qt defined by G. Finally, the third constraint imposes the
subspace parameters to be plausible deformation values, where λ ∈ Rk×1 is a
column vector containing the first k eigenvalues of the covariance matrix, of the
training data.

However, optimizing Eq. (19) is NP-hard because of the integer constraints
on S. As in [19, 38], we approximate the problem with a continuous constraint,
S ∈ [0, 1]`×nf , and reformulate the problem in order to apply LP:

min
S,A,u,v

η tr(HST ) + 1T2`(u + v), (20)

s.t. vec(QST )− (I` ⊗A)µ−Bc = u− v,u ≥ 02`,v ≥ 02` (21)
S ∈ [0, 1]`×nf , sti = 0, [t, i] ∈ {[t, i]|gti = 0},
− 3
√
λj ≤ cj ≤ 3

√
λj ,∀j = 1..k,

where the two auxiliary variables u,v ∈ R2` replace the l1 norm with a smooth
term, and the linear constraint defined in Eq. (21). Finally, we gradually dis-
cretize S, after solving the LP, by taking successive refinements based on trust-
region shrinking [15]. Note that several elements in S will be 0 during the opti-
mization process (illustrated in gray in Fig. 4). We simplify the optimization task
by removing those elements (i.e. [t, i] ∈ {[t, i]|gti = 0}), reducing the number of
variables and the LP cost from O(`nf ) to O(nf ).

5 Experiments & Results

This section illustrates the benefits of DSPA and CSPA, and compares them
with state-of-the-art PA methods to build shape models of faces and human
body joints’ variation. First, we compare the performance of PA+PCA and SPA
to build a 2-D shape model of faces and Motion Capture (MoCap) using 3-D
datasets. For these experiments we use FaceWarehouse [5] and Carnegie Mellon
University (CMU) MoCap [1] datasets, respectively. Finally, we illustrate the
generalization of our 2-D body model in the problem of human pose estimation,
in synthetic experiments on the CMU MoCap dataset, and real experiments on
the Leeds Sports (LSP) [16] dataset.

5.1 Learning 2-D Face and Human Body Joints’ Models

This section illustrates the benefits of DSPA and CSPA, and compares them with
state-of-the-art PA methods to represent 2-D shape models of human skeletons
and faces. First, we compare the performance of PA+PCA and SPA to represent
a 2-D shape model of faces from FaceWarehouse dataset (Experiment 1). Next,
we compare our discrete and continuous approaches in a large scale experiment
(Experiment 2). Afterwards, we learn a model to represent 3-D joints of humans
from the Carnegie Mellon University MoCap dataset [1]. We compare its gen-
eralization with the state-of-the-art PA methods (Experiment 3) and in a large



scale experiment (Experiment 4). Finally, we show the benefits of our continuous
2-D model (CSPA) over 3-D models (Experiment 5) in the same datasets.

The aim of Experiments 1 and 2 is to build a generic 2-D face model that can
reconstruct non-rigid facial deformation under a large range of 3-D rotations. For
training and testing, we used the FaceWarehouse dataset that is composed of
150 subjects, each one with 20 different facial expressions. For all the subjects,
dense point meshes are available, as well as RGB data generated from RGBD
scans. The original model has 11510 points, and we sub-sampled the mesh to 49
and 162 landmarks, depending on the experiment. We rotated the 3-D faces in
the yaw and pitch angles, within the ranges of φ, θ ∈ [−π/2, π/2]. The angles
were uniformly selected and we report results for 300 angles for testing, while
varying the number of angles (i.e., rotations) in training. We report the Mean
Squared Error (MSE) relative to the intra-eye size.

Similarly, the aim of Experiments 3 and 4 is to build a generic 2-D skeleton
model from 3-D Motion Capture (MoCap). For training and testing, we used the
Carnegie Mellon University MoCap dataset that is composed of 2605 sequences
performed by 109 subjects. The sequences cover a wide variety of daily human
activities and sports. Skeletons with 31 joints are provided, as well as RGB
video recordings for several sequences. We trained our models using the set of
14 landmarks as is common across several databases for human pose estimation,
and we rotated the shapes in the same way as the experiments 1 and 2. We
report the MSE relative to the torso size.

Experiment 1: Comparison with State-of-the-Art PA Methods on Faces
This section compares DSPA, CSPA methods with the state-of-the-art Stratified
Generalized Procrustes Analysis (SGPA)8 [3]. For training we randomly selected
20 subjects, three expressions per subject and 49 landmarks (this is due to the
memory limitations of SGPA). For testing we randomly selected 10 different
subjects with the same three expressions as training. We report results varying
the number of training rotations between 1 ∼ 100.

There are several versions of SGPA. We selected the “Affine-factorization”
with the data-space model to make a fair comparison with our method. Re-
call that under our assumption of non-missing data “Affine-All” and “Affine-
factorization” achieve the global optimum, being “Affine-factorization” faster.

Fig. 5 shows the mean reconstruction error and 0.5 of the standard devia-
tion for 100 realizations. Fig. 5 (a) reports the results comparing PA, CPA and
SGPA. As expected, PA and SGPA converge to CPA as the number of training
rotations increases. However, observe that CPA achieves the same performance,
but it is much more efficient. Fig. 5 (b) compares DSPA, CSPA, and SGPA fol-
lowed by PCA (we will refer to this method SGPA+PCA). From the figure one
can observe that error in the test for DSPA and SGPA+PCA decreases with the
number of rotations in the training, and it converges to CSPA, which provides
a bound on the lower error. Observe, that we used 60 3-D faces (20 subjects

8 The code was downloaded from author’s website (http://isit.u-clermont1.fr/˜ab).



(a) (b) (c)

Fig. 5. Comparisons as a function of the number of training viewpoint projections,
using a subspace of 25 basis for all deformable models. (a) Rigid and (b) Deformable
models from Experiment 1, respectively; (c) CSPA and DSPA deformable models from
Experiment 2.

Fig. 6. Experiment 2 results with 1 (top) and 20 (bottom) rotations. CSPA (solid red
lines) and DSPA (dashed blue lines) face reconstructions over ground truth (solid black
lines).

and 3 expressions) within rotating angles φ, θ ∈ [−π/2, π/2], and DSPA and
SGPA+PCA needed about 20 angles to achieve similar result to CSPA. In this
case, discrete methods need 20 times more space than the continuous. The execu-
tion times for each iteration with 20 rotations, on a 2.2GHz computer with 8Gb
of RAM, were 0.62 sec. (DSPA), 0.18 sec. (CSPA) and 1.47 sec. (SGPA+PCA).

Experiment 2: Comparison between CSPA and DSPA This experiment
compares DSPA and CSPA in a large-scale problem as a function of the number
of rotations between 1 ∼ 100. For training we randomly selected 120 subjects,
five expressions per subject and 162 landmarks. For testing we randomly selected
30 different subjects with the same five expressions as training.

Fig. 5 (c) shows the mean reconstruction error and 0.5 of the standard devi-
ation for the 100 realizations, comparing DSPA and CSPA. As expected, DSPA
converges to CSPA as the number of training rotations increases. However, ob-



(a) (b) (c)

Fig. 7. Comparisons as a function of the number of training viewpoint projections. (a)
Rigid and (b) Deformable models (using a subspace of 9 basis) from Experiment 1,
respectively; (c) CSPA and DSPA deformable models (using a subspace of 12 basis)
from Experiment 2.

serve that CSPA achieves the same performance, but it is much more efficient. In
this experiment, with 6000 3-D training faces (120 subjects and 5 expressions)
and domain: φ, θ ∈ [−π/2, π/2] discrete method required, again, around 20 2-D
viewpoint projections to achieve similar results to CSPA. Thus, discrete model
DSPA needs 20 times more storage space than CSPA. The execution times for
each iteration with 20 rotations, on a 2.2GHz computer with 8Gb of RAM, were
6.17 sec. (DSPA) and 0.52 sec. (CSPA).

Qualitative results from CSPA and DSPA models trained with different num-
ber of rotations are shown in Fig. 6. Note that training DSPA model with 1
rotation (top) results in not properly reconstructed faces. However, training it
with 20 rotations (bottom) leads to reconstructions almost as accurate as made
by CSPA.

Experiment 3: Comparison with State-of-the-Art PA Methods Sim-
ilarly to Experiment 1, this section compares DSPA, CSPA methods with the
state-of-the-art Stratified Generalized Procrustes Analysis (SGPA) [3]. For train-
ing we randomly selected 3 sequences with 30 frames per sequence from the set
of 11 running sequences of the user number 9. For testing we randomly selected
2 sequences with 30 frames from the same set. We rotated the 3-D models in
the yaw and pitch angles, within the ranges of φ, θ ∈ [−π/2, π/2]. The angles
were uniformly selected and we report results varying the number of considered
angles (i.e., rotations) between 1 ∼ 100 angles in training, and fixed 300 angles
for testing.

Fig. 7 shows the mean reconstruction error and 0.5 of the standard deviation
for the 100 realizations. Fig. 7 (a) reports the results comparing PA, CPA and
SGPA. As expected, PA and SGPA converge to CPA as the number of training
rotations increases. However, observe that CPA achieves the same performance,
but it is much more efficient. Fig. 7 (b) compares DSPA, CSPA, and SGPA
followed by PCA (we will refer to this method SGPA+PCA). From the figure one
can observe that the mean error in the test for DSPA and SGPA+PCA decrease
with the number of rotations in the training, and it converges to CSPA. CSPA



Fig. 8. Experiment 2 results with 1 (top), and 30 (bottom) rotations. Examples show
skeleton reconstructions from continuous (CSPA in solid red lines) and discrete (SPA
in dashed blue lines) models over ground truth (solid black lines).

provides a bound on the lower error. Observe, that we used 90 3-D bodies (3
sequences with 30 frames) within rotating angles φ, θ ∈ [−π/2, π/2], and DSPA
and SGPA+PCA needed about 30 angles to achieve similar result to CSPA. So,
in this case, discrete methods need 30 times more space than the continuous
one. The execution times with 30 rotations, on a 2.2GHz computer with 8Gb of
RAM, were 1.44 sec. (DSPA), 0.03 sec. (CSPA) and 3.54 sec. (SGPA+PCA).

Experiment 4: Comparison between CSPA and DSPA This experiment
compares DSPA and CSPA in a large-scale problem as a function of the number
of rotations. For training we randomly selected 20 sequences with 30 frames
per sequence. For testing we randomly selected 5 sequences with 30 frames.
We rotated the 3-D models in the yaw and pitch angles, within the ranges of
φ, θ ∈ [−π/2, π/2]. The angles were uniformly selected and we report results
varying the number of angles (i.e., rotations) between 1 ∼ 100 angles in training,
and 300 angles for testing.

Fig. 7 (c) shows the mean reconstruction error and 0.5 of the standard devi-
ation for the 100 realizations, comparing DSPA and CSPA. As expected, DSPA
converges to CSPA as the number of training rotations increases. However, ob-
serve that CSPA achieves the same performance, but it is much more efficient.
In this experiment, with 6000 3-D training bodies (20 sequences with 30 frames)
and domain: φ, θ ∈ [−π/2, π/2] discrete method required, again, around 30 2-D
viewpoint projections to achieve similar results to CSPA. Thus, discrete model
DSPA needs 30 times more storage space than CSPA. The execution times with
30 rotations, on a 2.2GHz computer with 8Gb of RAM, were 14.75 sec. (DSPA)
and 0.04 sec. (CSPA).

Qualitative results from CSPA and DSPA models trained with different num-
ber of rotations are shown in Fig. 8. Note that training DSPA model with 1 rota-



tion (top) results in poor reconstruction. However, training it with 30 rotations
(bottom) leads to reconstructions almost as accurate as made by CSPA.

Experiment 5: 2-D vs 3-D Models In previous experiments we have shown
that learning 2-D models with CSPA overcomes typical 2-D models learned with
DSPA or PCA. This is because the use of 3-D data allows us to build unbiased
models, able to generalize among different viewpoints. The question that strikes
at this point is: Why do not use a 3-D models directly in test time rather than
using the 3-D data to learn a 2-D model? From the comparison between 2-D
and 3-D face models performed in [22], one concludes that both models have
the same representation power, with 2-D models being faster in real time fitting.
Following [22] we perform a comparison between 2-D and 3-D models, in the
task of generalization to unseen samples.

This section compares unbiased 2-D (CSPA) to 3-D models in the task of faces
and skeletons modeling. In this comparison the 2-D model will be learned using
CSPA from Eq. (14). On the other hand, we will train the 3-D model optimizing
Eq. (2) with the number of dimensions d = 3, and A ∈ R3×3 being a rotation
matrix. For the 2-D fitting of the 3-D model, we will use the standard algorithm
from [13, 35], where the deformation parameters c3D ∈ Rk3D×1 of the 3-D model
M3D + (B3Dc3D)

(3), as well as the rotation and scaling of the projection matrix
P ∈ R2×3, are estimated until convergence in a 2-step iterative algorithm9. For
a fair comparison between models, the intrinsic camera matrix in P is fixed to
be a scaled orthographic projection.

We compared 2-D and 3-D methods on FaceWarehouse and CMU MoCap
datasets for faces and body joints’ modeling, respectively. For both datasets, we
performed the comparison with different angle domains (φ, θ ∈ [−π/4, π/4] and
φ, θ ∈ [−π/2, π/2]) for train and test, and we report results varying the num-
ber of subspace basis for both 2-D and 3-D models. For training the models on
the FaceWarehouse dataset we randomly selected 120 subjects, 20 expressions
per subject and 162 landmarks. For testing, we randomly selected 30 different
subjects performing 20 different expressions (all expressions of the dataset). For
training the models on the CMU MoCap dataset, we randomly selected 80 se-
quences with 30 frames per sequence and 14 landmarks. For testing we randomly
selected 20 different sequences with 30 frames. Recall that all models in this ex-
periment are trained with 3-D data. For testing, we rotated and projected 30
times each test shape.

Fig. 9 (a) shows the mean reconstruction error and 0.5 of the standard de-
viation for 100 realizations, incrementing the number of basis of the subspace
models. We show the MSE for both experiments performed in [−π/4, π/4] and
[−π/2, π/2] angle domains. Fig. 9 (b) reports the mean fitting time. Since ex-
periments in both angle domains have similar test times, we only provide the
time of one of them ([−π/2, π/2]) to avoid redundancy.

9 The code was downloaded from author’s website
(http://www.research.rutgers.edu/˜feiyang/web2/face morphing.htm).



1 5 10 20 30 40 50

0

2

4

6

8

10

12

x 10
−4

# basis

M
S

E

 

 

2−D
3−D

1 5 10 20 30 40 50

0

1

2

3

4

5

6

7

x 10
−3

# basis

M
S

E

 

 

1 5 10 20 30 40 50

0

0.02

0.04

0.06

0.08

0.1

# basis

M
e
a
n
 f
itt

in
g
 t
im

e

1 2 5 10 15

0

5

10

15

20

x 10
−3

# basis

M
S

E

 

 

1 2 5 10 15

0

0.01

0.02

0.03

0.04

# basis

M
S

E

 

 

1 2 5 10 15

0

0.01

0.02

0.03

0.04

0.05

# basis

M
e
a
n
 f
itt

in
g
 t
im

e

[−π/4, π/4] [−π/2, π/2]
(a) (b)

Fig. 9. Experiment 5 results on FaceWarehouse (top) and CMU MoCap (bottom)
datasets in [−π/4, π/4] and [−π/2, π/2] angle domains. Comparisons between 2-D and
3-D models as a function of the number of subspace basis, in terms of (a) mean recon-
struction error and (b) mean fitting time.

Fig. 9 (top) reports the comparison on FaceWarehouse dataset. For nar-
row angle domains ([−π/4, π/4]), both 3-D and 2-D face models have similar
performance, but 2-D models being faster (Fig. 9 (b)). However, 2-D models
are more stable than 3-D models in the experiment with a wider test domain
([−π/2, π/2]). The fitting algorithm between the 3-D model and the 2-D test
shape fails to estimate the projection matrix under extreme viewpoints, leading
to a poor convergence. Note that the 3-D subspace will compensate the poorly
estimated projection matrices, with enough number of basis.

The same effect occurs with models of body joints’ variation in Fig. 9 (bot-
tom), however, 2-D models outperformed 3-D for any number of basis on CMU
MoCap dataset. Although the performance deteriorates on both datasets under
large rotations, this is more evident on CMU MoCap dataset due to the high
variability non-rigid deformations of the human body (see Fig. 10).

Note that in those situations where 2-D models obtain similar reconstruction
error than 3-D models, increasing the number of basis of the 2-D model would
lead to more accurate reconstructions than 3-D models, still benefiting from the
fast 2-D model fitting.

5.2 Human pose estimation

This section compares our unbiased 2-D models and the subspace matching
method against state-of-the-art algorithms, in the problem of human pose esti-



−
π

8
−
π

4
−

3π

8
−
π

2

Fig. 10. Qualitative results from Experiment 5, rotating the test shapes in yaw on
FaceWarehouse (top) and CMU MoCap (bottom) datasets. 2-D model (solid red lines)
and 3-D model (dashed blue lines) reconstructions over ground truth (solid black lines).
For both models, the number of basis was k = 14 on CMU MoCap dataset, and k = 25
on FaceWarehouse dataset.

mation. We performed synthetic experiments on the CMU MoCap dataset, and
real experiments on the Leeds Sports (LSP) [16] dataset. For all experiments in
this section we used the continuous version of our 2-D models, CSPA, trained
with a set of 14 body joints.

Experiment 6: CMU MoCap dataset The aim of this experiment is to
show the performance of our subspace feature selection method in the problem
of human pose estimation, as a function of the number of outliers in the image.
This synthetic experiment compares our method against two baselines on the
CMU MoCap dataset: a greedy method for feature selection, and a method
restricting the shape as [31]. Since this model is composed by a mean and a
PCA of the data, we refer to this model as PCA. Recall that we introduced an
affinity transformation to the feature selection formulation, which allows us to
use a CSPA model in our approach. We refer to our method as CSPA. Also note
that we are using our own implementation of [31] optimized in l1 norm, since it
was infeasible to perform this experiment with the original implementation (we
add 100 times more features candidates and double of the number of landmarks
in our experiment).

For training we randomly selected 3 sequences, each one with 30 frames, from
the set of 11 running sequences of the user number 9. For testing we randomly se-
lected 2 sequences with 30 frames from the same set, and we rotated 30 times each
3-D shape in the yaw and pitch angles, within the ranges of φ, θ ∈ [−π/2, π/2],
as the training domain. For each projected 2-D skeleton we synthetically added
1 ∼ 15000 random outliers in the frame of the image, uniformly distributed per
each joint. See Fig. 11 (a) for examples of random feature candidates.



1000 5000 10000 15000

0

0.02

0.04

0.06

0.08

0.1

0.12

# outliers

M
S

E

CSPA

PCA

Greedy

(a) (b)

Fig. 11. Experiment 6 results on CMU MoCap dataset. (a) CSPA model (solid red
lines), PCA model (dashed blue lines), and Greedy (green solid lines) reconstructions
over ground truth (solid black lines) and 5000 outliers (grey dots); and (b) MSE for
each method as a function of the number of outliers.

We built the candidates matrix Q = [Q1, . . . ,Q`] ∈ R2×nf by concatenating
the pixel locations Qt ∈ R2×nt of the candidates features of each tth landmark.
The association cost of each candidate in matrix H is the euclidean distance
between the candidate feature and the ground truth landmark location plus a
random noise. We report the MSE relative to the torso size, varying the number
of candidates for three methods.

Fig. 11 (b) shows the mean reconstruction error and the standard deviation
for the 100 realizations. As expected, methods restricting the search with a shape
model have better performance than the greedy approach. Moreover, observe
that our approach using the CSPA model outperforms the one using just a PCA
model. This is due to the addition to the affinity transformation, as well as
the limits on the deformation parameters, in the feature selection formulation.
Fig. 11 (a) shows two examples of the user number 9 of CMU MoCap dataset
from two different viewpoints. Qualitative results also show that our method
achieves a better fitting by means of a selection method robust to outliers. The
execution times with 15000 outliers, on a 2.2GHz computer with 8Gb of RAM,
were 0.72 sec. (PCA) and 0.68 sec. (CSPA) per image.

Experiment 7: Leeds Sport Dataset In this experiment, we tested the per-
formance of CSPA models, in combination to the proposed subspace matching
method, to detect humans on Leeds Sports (LSP) dataset. LSP contains 2000
images of people performing different sports, some of them including extreme
viewpoints. We performed the comparison in the test set of 1000 images. We
trained our 2-D CSPA model in the CMU MoCap dataset [1] using 1000 frames.
From the 2605 sequences of the motion capture data, we randomly selected 1000
and the frame in the middle of sequence is selected as representative frame. Us-
ing this training data, we built the 2-D CSPA model using the following ranges
for the pitch, roll and yaw angles: φ, θ, ψ ∈ [−3/4π, 3/4π]. We built the candi-
dates matrix Q = [Q1, . . . ,Q`] ∈ R2×nf by concatenating the pixel locations



Qt ∈ R2×1000 of the 1000 candidates pixels with higher response of each tth
joint. Where the association cost of each candidate in matrix H is the nor-
malized response for each pixel, obtained the SVM detector score [36]. We will
refer to this model as CSPA. To evaluate the performance, we compared our ap-
proach with the state-of-the-art pose estimation method proposed by Yang and
Ramanan10 [36]. The error for each method is computed as the pixel distance
between the estimated and ground-truth part locations.

Table 1 compares the error for each body joint of our method against [36],
and a greedy approach. Our method improves the accuracy of all estimated
joints, compared to the baselines, and only the Neck estimation of the greedy
approach is better. Part of this is due to different anatomical labeling between
LSP dataset and the training set of our CSPA model, CMU MoCap dataset.
Qualitative results in Fig. 12 show that our approach has similar results to the
state-of-the-art, but being more accurate in the estimation of the limb lengths.

Table 1. Comparison of human pose estimation approaches on LSP dataset. Errors in
pixels are provided for each body joint (left and right joints are averaged), as well as
the mean estimated error for the 14 joints.

Method Head Neck Shoulder Elbow Wrist Hip Knee Ankle Mean

YR [36] 21.75 18.97 20.54 31.27 49.03 22.78 27.24 38.42 29.95
Greedy 22.48 18.41 20.73 32.81 48.58 23.41 27.36 40.04 30.48
CSPA 21.58 18.48 19.83 29.39 43.69 21.97 26.28 37.02 28.32

The execution time per image of our feature selection method, on a 2.2GHz
computer with 8Gb of RAM, was 6.84 sec. The most computationally intensive
part of the method is calculating the response for each image using [36], which
is shared with all compared methods.

6 Conclusions

This paper proposes an extension of PA to learn a 2-D subspace of rigid and non-
rigid deformations of 3-D objects. We propose two models, one discrete (DSPA)
that samples the 3-D rotation space, and one continuous (CSPA) that integrates
over SO(3). As the number of projections increases DPSA converges to CSPA.
CSPA has two advantages over traditional PA and PPA: (1) it generates unbiased
models because it uniformly covers the space of projections, and (2) it is more
efficient in space and time. Experiments comparing 2-D SPA models of faces and
bodies show improvements w.r.t. state-of-the-art PA methods. Additionally, we
show here that CSPA generates 2-D models that generalize as well as 3-D mod-
els, but are faster to fit in test time. We reformulated the human pose estimation

10 The code was downloaded from author’s website
(http://www.ics.uci.edu/˜dramanan/).



Fig. 12. Qualitative results for the LSP dataset. Left image from each pair of images
shows the result from [36], and the right image shows our full approach using the CSPA
model. Note how the CSPA leads to a more precise fitting of the body joints and more
accurate limb lengths from different viewpoints.

task as a subspace matching problem, and we proposed a feature selection ap-
proach to robust to occlusions and large amount of outliers. In particular, CSPA
models trained with motion capture data, combined with our subspace match-
ing method, outperformed human pose estimation state-of-the-art approaches
on the LSP dataset, since our unbiased 2-D models can successfully reconstruct
different viewpoints, and the proposed feature matching method is able to handle
occlusions and outliers. In future work, we plan to provide an in depth validation
of 2-D models directly built from 3-D models.

7 Acknowledgments

This work is partly supported by the Spanish Ministry of Science and Innova-
tion (projects TIN2012-38416-C03-01, TIN2012-38187-C03-01, TIN2013-43478-
P), project 2014 SGR 1219, SUR, Departament d’Economia i Coneixement, and
Comissionat per a Universitats i Recerca del Departament d’Innovació, Univer-
sitats i Empresa de la Generalitat de Catalunya.

A Appendix: Vec-transpose

Vec-transpose A(p) is a linear operator that generalizes vectorization and trans-
position operators [20, 23]. It reshapes matrix A ∈ Rm×n by vectorizing each ith
block of p rows, and rearranging it as the ith column of the reshaped matrix,



such that A(p) ∈ Rpn×
m
p ,

a11 a12 a13
a21 a22 a23
a31 a32 a33
a41 a42 a43
a51 a52 a53
a61 a62 a63




(2)

=



a11 a31 a51
a21 a41 a61
a12 a32 a52
a22 a42 a62
a13 a33 a53
a23 a43 a63


 ,



a11 a12 a13
a21 a22 a23
a31 a32 a33
a41 a42 a43
a51 a52 a53
a61 a62 a63




(3)

=




a11 a41
a21 a51
a31 a61
a12 a42
a22 a52
a32 a62
a13 a43
a23 a53
a33 a63



.

Note that (A(p))(p) = A and A(m) = vec(A). A useful rule for pulling a ma-
trix out of nested Kronecker products is, ((BA)(p)C)(p) = (CT ⊗ Ip)BA =
(B(p)C)(p)A , which leads to (CT ⊗ I2)B = (B(2)C)(2) .

B Appendix: How to build a 2-D model from a 3-D
model

We argued that unbiased 2-D and 3-D models have the same reconstruction
power, being 2-D models faster, as well as we detailed how to build multi-view
2-D models from 3-D data. However, we might be interested in building an
unbiased 2-D model even though we do not have access to the 3-D training
data (e.g. NRSFM model built from 2-D data). Here we discuss how to build a
2-D model directly from a 3-D model, integrating over all possible viewpoints
but also along the deformation parameters. Clearly, building a model from a
previous learned model will lead to a loose of information, but benefits in some
applications (e.g. real time fitting, enlarged pose variation models) can outweigh
the information loss.

A method to downgrade a 3-D model to its homologous in 2-D was presented
in [22]. They generate a 2-D dataset by a systematic sampling of the deformation
and rotation parameters of the 3-D model. Then, they built a 2-D model from this
enhanced 2-D dataset in a conventional manner. However, a uniform sampling
of the rotation angles does not lead to a uniform sampling of the rotation space
SO(3). In addition, it is not clear how much sub-sampling is needed in the
deformation parameters in order to generate a synthetic dataset with similar
variance to the original training data. Just to give some example values, imagine



that our model has only k = 10 basis, and we need r = 20 rotations to cover
the domain of viewpoints that we are modeling. If we sample 4 times each axis
of variance, we will need over 2 · 107 2-D samples to train the 2-D model. Note
that handle this dataset would be a large scale problem, even though we did not
take extreme values for the example.

We discuss here how to build a 2-D model directly from a 3-D model, ensuring
a uniform coverage of the rotation space, without the need of generating a huge
synthetic 2-D dataset. Given a 3-D model composed by a mean M3D ∈ R3×`, the
k3D basis B3D ∈ R3`×k3D , and their corresponding eigenvalues λ3D ∈ Rk3D×1,
we build a 2-D model (M ∈ R2×`, B ∈ R2`×k) by integrating along the axis of
variance B3D within a domain Γ , depending on the eigenvalues λ3D, as we will
discuss afterwards. Moreover, we rotate and project the 3-D model to the image
plane using P(ω) ∈ R2×3. Note that we ensure uniformity [24] in SO(3) by means
of the definite integral on the rotation domain Ω and dω = 1

8π2
sin(θ)dφdθdψ.

Given the 3-D model and the rotation domain Ω, we find its homologous
2-D model by minimizing the following error11:

E2D-3D(M,A(ω)i,B, c(ω)) =∫
Γ

∫
Ω

∥∥∥P(ω) [M3D + (c3D(γ)T ⊗ I3)B(3)3D]−A(ω,γ)M− (c(ω,γ)T ⊗ I2)B(2)∥∥∥2
F
dωdγ

(22)

where P(ω) is an orthographic projection of a 3-D rotation R(ω) in the given
domain Ω, defined by the rotation angles ω = {φ, θ, ψ}. The main difference
between Eq. (14) and Eq. (22) is that instead of learning a 2-D model from 3-D
shapes, our input now is a 3-D model. Hence, entries in the affinity transforma-
tion A(ω,γ) ∈ R2×2 and the subspace weights c(ω,γ) ∈ Rk×1, c3D(γ) ∈ Rk3D×1
are not only functions of the integration angles ω, but also functions of the de-
formation parameters γ = {γ1, . . . , γk3D}.

In addition, 2-D modeling from a 3-D model would be efficient, since the
diagonal matrix W =

∫
Γ c3D(γ)

T c3D(γ)dγ encoding the deformations does not
requires the explicit computation of the definite integral. This statement comes
from solving:

ECPACA(B, ci) =

∫
Γ
‖[µ1 + B1c1(γ)]−B2c2(γ)‖

2
2
dγ, (23)

where, assuming zero mean µ1 = vec(M1), we find that Σ2 = B1WB
T
1 . Since

Σ1 = B1Λ1B
T
1 , and Σ1 = Σ2, we find that the optimal value for the matrix

encoding the deformations is the diagonal matrix containing the eigenvalues
W = diag(λ3D).

Similarly to CPA model (see Section 2) we find M by minimizing Eq. (22)
using fixed point minimization (i.e. Eq. 9), where:

Z = (MMT )−1M
(
MT3DXM3D + B

T
3D((N⊗ I3) vec(X))

(3k3D)B3D

)
. (24)

11 See Appendix A for an explanation of the vec-transpose operator.



(a)

(b)
µ µ+ b1 µ+ b2 µ+ b3

Fig. 13. Illustration of the reference shape (µ) and the first three basis (b1, b2, b3) of
the 2-D subspace model (a) directly build from 3-D model (b). We sampled each basis
4 times between the standard limits [7] to show their deformation behavior. All models
were trained on FaceWarehouse [5] dataset, with 10 3-D faces from expressions number
0 and 1 (neutral and open mouth, respectively). Pitch an yaw integration limits were
set to φ, θ ∈ [−π/2, π/2] to train (a). Note that µ and bi in (b) are 3-D. They are
projected frontally for a better comparison.

Matrix N = (c3D(γ)⊗I3⊗c3D(γ)) is a sparse matrix, with the nonzero elements
being the eigenvalues in W and X =

∫
Ω P(ω)

TP(ω)dω ∈ R3×3 averages the
rotation covariances.

Similarly to CSPA model (see Section 3), substituting the optimal M∗ and
the expression A(ω,γ) in Eq. (22), allows us to find the optimal B by solving
the eigenvalue problem, ΣB = BΛ, where Λ are the eigenvalues corresponding

to columns of B, and the covariance matrix Σ = ((I` ⊗Y) vec [L])
(2`)

, being
Y =

∫
Ω P(ω) ⊗ (I` ⊗ P(ω))dω ∈ R

2`×2` and L = µ3Dµ
T
3D + B3DWB

T
3D ∈

R2`×2`.
As we illustrate in Figure 3 and Figure 13, our 2-D model Figure 13 (a)

built directly from a 3-D model Figure 13 (b) have the same behavior that those
models learned from the original 3-D data, Figure 3 (a-b), rotated and projected
to 2-D.

C Appendix: CSPA formulation

In this Appendix, we detail the steps from Eq. (14) to Eq. (17), as well as the
definition of the covariance matrix, introduced in Section 3.

Given the value of M∗ and the optimal expression of A(ω)∗i from Eq. (7),
we substitute them in Eq. (14) resulting in:

ECSPA(B, c(ω)i) =

n∑
i=1

∫
Ω

∥∥∥P(ω)Di −P(ω)DiH− (c(ω)Ti ⊗ I2)B(2)∥∥∥2
F
dω, (25)

where H = M∗T (M∗M∗T )−1M∗ and Di ∈ R3×`. Then,

ECSPA(B, c(ω)i) =
n∑

i=1

∫
Ω

∥∥∥P(ω)Di(I` −H)− (c(ω)Ti ⊗ I2)B(2)∥∥∥2
F
dω (26)

leads us to Eq. (16) and Eq. (17), where D̄i = Di(I` −H) and d̄i = vec(D̄i).
From Eq. (17), solving ∂ECSPA

∂c(ω)i = 0 we find:

c(ω)
∗
i = (B

T
B)

−1
B

T
(I` ⊗P(ω))d̄i. (27)



The substitution of c(ω)∗i in Eq. (17) results in:

ECSPA(B) =

n∑
i=1

∫
Ω

∥∥∥(I` ⊗P(ω))d̄i −B(BTB)−1BT (I` ⊗P(ω))d̄i∥∥∥2
2
dω = (28)

n∑
i=1

∫
Ω

∥∥∥(I−B(BTB)−1BT) (I` ⊗P(ω))d̄i∥∥∥2
2
dω = (29)

n∑
i=1

∫
Ω

tr
[(

I−B(BTB)−1BT
)

(I` ⊗P(ω))d̄i
(
(I` ⊗P(ω))d̄i

)T ]
dω = (30)

tr
[(

I−B(BTB)−1BT
)
Σ
]
, (31)

where:

Σ =

∫
Ω

(I` ⊗P(ω))

(
n∑

i=1

d̄id̄
T
i

)
(I` ⊗P(ω))T dω. (32)

We can find the global optima of Eq. (31) by solving the eigenvalue problem,
ΣB = BΛ, where Σ is the covariance matrix and Λ are the eigenvalues corre-
sponding to columns of B. However, the definite integral in Σ is data dependent.
To be able to compute the integral off-line, we need to rearrange the elements
in Σ. Using vectorization and vec-transpose operator12:

Σ = (vec [Σ])
(2`)

= (33)(
vec

[∫
Ω

(I` ⊗P(ω))

(
n∑

i=1

d̄id̄
T
i

)
(I` ⊗P(ω))T dω

])(2`)
= (34)

((∫
Ω

(I` ⊗P(ω))⊗ (I` ⊗P(ω))dω
)

vec

[
n∑

i=1

d̄id̄
T
i

])(2`)
, (35)

which finally leads to:

Σ =

(
(I` ⊗Y) vec

[
n∑

i=1

d̄ijd̄
T
ij

])(2`)
, (36)

where the definite integral Y =
∫
Ω P(ω) ⊗ (I` ⊗ P(ω))dω ∈ R

4`×9` can be
computed off-line.

References

1. Carnegie mellon motion capture database. http://mocap.cs.cmu.edu
2. Andriluka, M., Roth, S., Schiele, B.: Pictorial structures revisited: People detection

and articulated pose estimation. In: CVPR. pp. 1014–1021. IEEE (2009)
3. Bartoli, A., Pizarro, D., Loog, M.: Stratified generalized procrustes analysis. IJCV

101(2), 227–253 (2013)
4. Brand, M.: Morphable 3d models from video. In: CVPR. vol. 2, pp. II–456. IEEE

(2001)

12 See Appendix A for the vec-transpose operator.



5. Cao, C., Weng, Y., Zhou, S., Tong, Y., Zhou, K.: Facewarehouse: a 3d facial expres-
sion database for visual computing. Visualization and Computer Graphics, IEEE
Transactions on PP(99), 1–1 (2013)

6. Cootes, T.F., Edwards, G.J., Taylor, C.J., et al.: Active appearance models. PAMI
23(6), 681–685 (2001)

7. Cootes, T.F., Taylor, C.J.: Statistical models of appearance for computer vision
(2004)

8. De la Torre, F.: A least-squares framework for component analysis. PAMI 34(6),
1041–1055 (2012)

9. Dryden, I.L., Mardia, K.V.: Statistical shape analysis, vol. 4. John Wiley & Sons
New York (1998)

10. Frey, B.J., Jojic, N.: Transformation-invariant clustering using the em algorithm.
PAMI 25(1), 1–17 (2003)

11. Goodall, C.: Procrustes methods in the statistical analysis of shape. Journal of the
Royal Statistical Society. Series B (Methodological) pp. 285–339 (1991)

12. Gower, J.C., Dijksterhuis, G.B.: Procrustes problems, vol. 3. Oxford University
Press Oxford (2004)

13. Hartley, R., Zisserman, A.: Multiple view geometry in computer vision. Cambridge
university press (2003)

14. Igual, L., Perez-Sala, X., Escalera, S., Angulo, C., De la Torre, F.: Continuous
generalized procrustes analysis. PR 47(2), 659–671 (2014)

15. Jiang, H., Drew, M.S., Li, Z.N.: Matching by linear programming and successive
convexification. PAMI 29(6), 959–975 (2007)

16. Johnson, S., Everingham, M.: Clustered pose and nonlinear appearance models for
human pose estimation. In: Proceedings of the British Machine Vision Conference
(2010), doi:10.5244/C.24.12

17. Kokkinos, I., Yuille, A.: Unsupervised learning of object deformation models. In:
ICCV. pp. 1–8. IEEE (2007)

18. Learned-Miller, E.G.: Data driven image models through continuous joint align-
ment. PAMI 28(2), 236–250 (2006)

19. Li, H., Huang, X., He, L.: Object matching using a locally affine invariant and
linear programming techniques. PAMI 35(2), 411–424 (2013)

20. Marimont, D.H., Wandell, B.A.: Linear models of surface and illuminant spectra.
JOSA A 9(11), 1905–1913 (1992)

21. Marques, M., Stosić, M., Costeira, J.: Subspace matching: Unique solution to point
matching with geometric constraints. In: ICCV. pp. 1288–1294. IEEE (2009)

22. Matthews, I., Xiao, J., Baker, S.: 2d vs. 3d deformable face models: Representa-
tional power, construction, and real-time fitting. IJCV 75(1), 93–113 (2007)

23. Minka, T.P.: Old and new matrix algebra useful for statistics.
http://research.microsoft.com/ minka/papers/matrix/, 2000

24. Naimark, M.A.: Linear representatives of the Lorentz group (translated from Rus-
sian). New York, Macmillan (1964)

25. Park, D., Ramanan, D.: N-best maximal decoders for part models. In: ICCV. pp.
2627–2634. IEEE (2011)

26. Pearson, K.: On lines and planes of closest fit to systems of points in space. The
London, Edinburgh, and Dublin Philosophical Magazine and Journal of Science
2(11), 559–572 (1901)

27. Perez-Sala, X., De la Torre, F., Igual, L., Escalera, S., Angulo, C.: Subspace pro-
crustes analysis. In: ECCV Workshop on ChaLearn Looking at People (2014)

28. Pishchulin, L., Andriluka, M., Gehler, P., Schiele, B.: Poselet conditioned pictorial
structures. In: CVPR. pp. 588–595. IEEE (2013)



29. Pishchulin, L., Andriluka, M., Gehler, P., Schiele, B.: Strong appearance and ex-
pressive spatial models for human pose estimation. In: ICCV. pp. 3487–3494. IEEE
(2013)

30. Pizarro, D., Bartoli, A.: Global optimization for optimal generalized procrustes
analysis. In: CVPR. pp. 2409–2415. IEEE (2011)

31. Roig, G., Boix, X., De la Torre, F.: Optimal feature selection for subspace image
matching. In: ICCV Workshops. pp. 200–205. IEEE (2009)

32. De la Torre, F., Black, M.J.: Robust parameterized component analysis: theory
and applications to 2d facial appearance models. CVIU 91(1), 53–71 (2003)

33. Torresani, L., Hertzmann, A., Bregler, C.: Nonrigid structure-from-motion: Esti-
mating shape and motion with hierarchical priors. PAMI 30(5), 878–892 (2008)

34. Xiao, J., Chai, J., Kanade, T.: A closed-form solution to non-rigid shape and
motion recovery. IJCV 67(2), 233–246 (2006)

35. Yang, F., Shechtman, E., Wang, J., Bourdev, L., Metaxas, D.: Face morphing using
3d-aware appearance optimization. In: Graphics Interface. pp. 93–99. Canadian
Information Processing Society (2012)

36. Yang, Y., Ramanan, D.: Articulated human detection with flexible mixtures of
parts. PAMI 35(12), 2878–2890 (2013)

37. Yezzi, A.J., Soatto, S.: Deformotion: Deforming motion, shape average and the
joint registration and approximation of structures in images. IJCV 53(2), 153–167
(2003)

38. Zhou, F., Brandt, J., Lin, Z.: Exemplar-based graph matching for robust facial
landmark localization. In: ICCV. pp. 1025–1032. IEEE (2013)


