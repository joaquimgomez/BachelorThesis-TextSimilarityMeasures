

































































































































































The AXIOM software layers


See	discussions,	stats,	and	author	profiles	for	this	publication	at:	https://www.researchgate.net/publication/305111586

The	AXIOM	software	layers

Article		in		Microprocessors	and	Microsystems	·	July	2016

DOI:	10.1016/j.micpro.2016.07.002

CITATIONS

0

READS

56

25	authors,	including:

Some	of	the	authors	of	this	publication	are	also	working	on	these	related	projects:

Deep	Networks	for	Speaker	Recognition	View	project

AXIOM	http://www.axiom-project.eu	View	project

Antonio	Rizzo

Università	degli	Studi	di	Siena

90	PUBLICATIONS			632	CITATIONS			

SEE	PROFILE

Roberto	Giorgi

Università	degli	Studi	di	Siena

132	PUBLICATIONS			607	CITATIONS			

SEE	PROFILE

All	content	following	this	page	was	uploaded	by	Carles	Fernández	on	20	September	2016.

The	user	has	requested	enhancement	of	the	downloaded	file.	All	in-text	references	underlined	in	blue	are	added	to	the	original	document

and	are	linked	to	publications	on	ResearchGate,	letting	you	access	and	read	them	immediately.

https://www.researchgate.net/publication/305111586_The_AXIOM_software_layers?enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA%3D%3D&el=1_x_2&_esc=publicationCoverPdf
https://www.researchgate.net/publication/305111586_The_AXIOM_software_layers?enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA%3D%3D&el=1_x_3&_esc=publicationCoverPdf
https://www.researchgate.net/project/Deep-Networks-for-Speaker-Recognition?enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA%3D%3D&el=1_x_9&_esc=publicationCoverPdf
https://www.researchgate.net/project/AXIOM-http-wwwaxiom-projecteu?enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA%3D%3D&el=1_x_9&_esc=publicationCoverPdf
https://www.researchgate.net/?enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA%3D%3D&el=1_x_1&_esc=publicationCoverPdf
https://www.researchgate.net/profile/Antonio_Rizzo2?enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA%3D%3D&el=1_x_4&_esc=publicationCoverPdf
https://www.researchgate.net/profile/Antonio_Rizzo2?enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA%3D%3D&el=1_x_5&_esc=publicationCoverPdf
https://www.researchgate.net/institution/Universita_degli_Studi_di_Siena?enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA%3D%3D&el=1_x_6&_esc=publicationCoverPdf
https://www.researchgate.net/profile/Antonio_Rizzo2?enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA%3D%3D&el=1_x_7&_esc=publicationCoverPdf
https://www.researchgate.net/profile/Roberto_Giorgi?enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA%3D%3D&el=1_x_4&_esc=publicationCoverPdf
https://www.researchgate.net/profile/Roberto_Giorgi?enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA%3D%3D&el=1_x_5&_esc=publicationCoverPdf
https://www.researchgate.net/institution/Universita_degli_Studi_di_Siena?enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA%3D%3D&el=1_x_6&_esc=publicationCoverPdf
https://www.researchgate.net/profile/Roberto_Giorgi?enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA%3D%3D&el=1_x_7&_esc=publicationCoverPdf
https://www.researchgate.net/profile/Carles_Fernandez?enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA%3D%3D&el=1_x_10&_esc=publicationCoverPdf


ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

Microprocessors and Microsystems 0 0 0 (2016) 1–16 

Contents lists available at ScienceDirect 

Microprocessors and Microsystems 

journal homepage: www.elsevier.com/locate/micpro 

The AXIOM software layers 

Carlos Álvarez a , ∗, Eduard Ayguadé a , Jaume Bosch a , Javier Bueno a , Artem Cherkashin a , 
Antonio Filgueras a , Daniel Jiménez-González a , Xavier Martorell a , Nacho Navarro a , 
Miquel Vidal a , Dimitris Theodoropoulos b , Dionisios N. Pnevmatikatos b , Davide Catani c , 
David Oro d , Carles Fernández d , Carlos Segura d , Javier Rodríguez d , Javier Hernando e , 
Claudio Scordino f , Paolo Gai f , Pierluigi Passera g , Alberto Pomella g , Nicola Bettin g , 
Antonio Rizzo h , Roberto Giorgi h 

a Barcelona Supercomputing Center and Computer Architecture Dept., Universitat Politecnica de Catalunya, Barcelona, Spain 
b FORTH-ICS, Greece 
c SECO, Arezzo, Italy 
d Herta Security, Barcelona, Spain 
e Universitat Politecnica de Catalunya, Barcelona, Spain 
f Evidence Srl, Pisa, Italy 
g VIMAR SpA, Marostica, Italy 
h University of Siena, Siena, Italy 

a r t i c l e i n f o 

Article history: 

Received 18 January 2016 

Revised 1 June 2016 

Accepted 7 July 2016 

Available online xxx 

Keywords: 

Cyber-physical systems 

Ompss 

Cluster programming 

FPGA Programming 

Distributed shared memory 

Smart home 

Smart video-surveillance 

a b s t r a c t 

People and objects will soon share the same digital network for information exchange in a world named 

as the age of the cyber-physical systems. The general expectation is that people and systems will interact 

in real-time. This poses pressure onto systems design to support increasing demands on computational 

power, while keeping a low power envelop. Additionally, modular scaling and easy programmability are 

also important to ensure these systems to become widespread. The whole set of expectations impose 

scientific and technological challenges that need to be properly addressed. 

The AXIOM project (Agile, eXtensible, fast I/O Module) will research new hardware/software architec- 

tures for cyber-physical systems to meet such expectations. The technical approach aims at solving funda- 

mental problems to enable easy programmability of heterogeneous multi-core multi-board systems. AX- 

IOM proposes the use of the task-based OmpSs programming model, leveraging low-level communication 

interfaces provided by the hardware. Modular scalability will be possible thanks to a fast interconnect 

embedded into each module. To this aim, an innovative ARM and FPGA-based board will be designed, 

with enhanced capabilities for interfacing with the physical world. Its effectiveness will be demonstrated 

with key scenarios such as Smart Video-Surveillance and Smart Living/Home (domotics). 

© 2016 Published by Elsevier B.V. 

(

a

d

t

d

m

O

S

(

G

P

g

h

0

∗ Corresponding author. 
E-mail addresses: carlos.alvarez@bsc.es (C. Álvarez), eduard.ayguade@bsc.es 

E. Ayguadé), jaume.bosch@bsc.es (J. Bosch), javier.bueno@bsc.es (J. Bueno), 

rtem.cherkashin@bsc.es (A. Cherkashin), antonio.filgueras@bsc.es (A. Filgueras), 

aniel.jimenez@bsc.es (D. Jiménez-González), xavier.martorell@bsc.es (X. Mar- 

orell), nacho.navarro@bsc.es (N. Navarro), miquel.vidal@bsc.es (M. Vidal), 

theodor@ics.forth.gr (D. Theodoropoulos), pnevmati@ics.forth.gr (D.N. Pnev- 

atikatos), davide.catani@seco.com (D. Catani), david.oro@hertasecurity.com (D. 

ro), carles.fernandez@hertasecurity.com (C. Fernández), cseguramail@gmail.com (C. 

egura), javier.rodriguez@hertasecurity.com (J. Rodríguez), javier.hernando@upc.edu 

J. Hernando), claudio@evidence.eu.com (C. Scordino), pj@evidence.eu.com (P. 

ai), pierluigi.passera@vimar.com (P. Passera), alberto.pomella@vimar.com (A. 

omella), nicola.bettin@vimar.com (N. Bettin), antonioriz@gmail.com (A. Rizzo), 

iorgi@dii.unisi.it (R. Giorgi). 

1

 

a  

c  

s  

a  

s  

t  

l  

t  

t  

i  

m

ttp://dx.doi.org/10.1016/j.micpro.2016.07.002 

141-9331/© 2016 Published by Elsevier B.V. 

Please cite this article as: C. Álvarez et al., The AXIOM 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 
. Introduction 

We are entering the Cyber-Physical age, in which both objects

nd people will become nodes of the same digital network for ex-

hanging information. Therefore, the expectation is that “things” or

ystems will become somewhat smart as people, having to permit

 rapid and close interaction not only human-human and system-

ystem, but also human-system, and system-human. More scien-

ifically, we expect that such Cyber-Physical Systems (CPS) will at

east react in real time, provide enough computational power for

he assigned tasks, consume the least possible energy for such

asks (energy efficiency), allow for an easy programmability, scal-

ng through modularity and exploit at best existing standards at

inimal costs. 
software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.1016/j.micpro.2016.07.002
http://www.ScienceDirect.com
http://www.elsevier.com/locate/micpro
mailto:carlos.alvarez@bsc.es
mailto:eduard.ayguade@bsc.es
mailto:jaume.bosch@bsc.es
mailto:javier.bueno@bsc.es
mailto:artem.cherkashin@bsc.es
mailto:antonio.filgueras@bsc.es
mailto:daniel.jimenez@bsc.es
mailto:xavier.martorell@bsc.es
mailto:nacho.navarro@bsc.es
mailto:miquel.vidal@bsc.es
mailto:dtheodor@ics.forth.gr
mailto:pnevmati@ics.forth.gr
mailto:davide.catani@seco.com
mailto:david.oro@hertasecurity.com
mailto:carles.fernandez@hertasecurity.com
mailto:cseguramail@gmail.com
mailto:javier.rodriguez@hertasecurity.com
mailto:javier.hernando@upc.edu
mailto:claudio@evidence.eu.com
mailto:pj@evidence.eu.com
mailto:pierluigi.passera@vimar.com
mailto:alberto.pomella@vimar.com
mailto:nicola.bettin@vimar.com
mailto:antonioriz@gmail.com
mailto:giorgi@dii.unisi.it
http://dx.doi.org/10.1016/j.micpro.2016.07.002
http://dx.doi.org/10.1016/j.micpro.2016.07.002
ruben pocull
Texto escrito a máquina
© <2016>. This manuscript version is made available under the CC-BY-NC-ND 4.0 license http://creativecommons.org/licenses/by-nc-nd/4.0/ 

ruben pocull
Texto escrito a máquina

ruben pocull
Texto escrito a máquina
DOI 10.1016/j.micpro.2016.07.002



2 C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

Fig. 1. The AXIOM Software Layers. 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

t  

v  

e  

l  

p  

m

2

 

t  

t  

s  

r

 

t  

u  

o  

n  

f  

p  

a  

r  

t  

o  

S  

i  

o  

e

 

i  

a  

m  

T  

b  

m  

(  

t  

n  

m

 

m  

d  

i

2

 

t  

t

 

t  

l

 

a  

a  
The AXIOM project (Agile, eXtensible, fast I/O Module) aims at

researching new hardware/software architectures for CPSs in which

the above expectations are realized. The project, started on Febru-

ary 2015, will span over 3 years. The coordination of the project

is carried out by the University of Siena (UNISI). UNISI also takes

the evaluation part of the project. Foundation for Research and

Technology - Hellas (FORTH) develops the interconnection between

boards. Barcelona Supercomputing Center (BSC) is responsible of

the OmpSs (OpenMP+StarSs) programming model and software

toolchain. Partner EVIDENCE takes the lead on the development of

the runtime systems. Partner SECO designs and builds the proto-

type board. Partner HERTA Security provides a video-surveillance

use case. Partner VIMAR provides a smart-building use case. 

Fig. 1 shows the software layers used in this project. As it can

be seen the project addresses all the levels of the system, from

the application level, that includes two key application domains,

to the hardware level. That includes developing a specific runtime

software manager (OmpSs@FPGA), a fast interconnection link (Fast

Link) and even the AXIOM board itself. As can also be seen in

Fig. 1 the project aims to develop a board that can work well both

alone or as part of a larger system (i.e. a group of boards intercon-

nected by the AXIOM link). This modular capabilities are addressed

from both the hardware side (the implementation of the AXIOM

link) and the software side (the development of inter-node execu-

tion capabilities using the OmpSs programming model). From the

hardware point of view is one of the aims of the project to make

the board accessible in terms of cost (as cheap as possible, even

around one hundred euros) while making it powerful enough to

deal with the envisioned use cases. This holistic development is

what we call the AXIOM platform. 

The specific objectives of the AXIOM project are: 

• Realizing a small board that is flexible (suitable for a wide

range of applications), energy efficient and modularly scalable

(AXIOM Board in Fig. 1 ). We will use an ARM- and FPGA-based

chip with custom high-speed interconnects to build the AXIOM

prototype board. 
• Easy programmability of multi-core, multi-board, FPGA node,

with the OmpSs programming model (OmpSs@Cluster/OmpSs

over DSM, and OmpSs@FPGA in Fig. 1 ), and improved thread

management and real-time support from the operating system.

The software will be Open-Source. 
• Easy interfacing with the Cyber-Physical world, based on the

Arduino shields [1,2] , pluggable onto the board. This shields are

going allow the developed board to be extended with sensors

(e.g. a camera). They will provide new functionalities to the de-

veloped board to widen the scope of its applications. 
• Contribute to standards, in the context of the Standardization
Group for Embedded Systems (SGET) and OpenMP. s

Please cite this article as: C. Álvarez et al., The AXIOM 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 
The rest of the paper is organized as follows. Section 2 explains

he AXIOM software layers. Section 3 explains the AXIOM link de-

elopment. Section 4 explains the applications evaluated and the

xpected scenarios. Section 5 explains the experimental setup fol-

owed by Section 6 that presents the first results obtained by the

roject. Section 7 explains the related work. Finally, Section 8 sum-

arizes the conclusions and the envisioned future work. 

. The AXIOM software 

One of the problems when building a complex ecosystem like

he one described in Fig. 1 is how to easily program applications

hat should take advantage at the same time of both on-chip re-

ources (i.e. the FPGA and the multiple cores) and multiple board

esources (through fast link multiple board connection). 

Several solutions have been proposed during the last decades

o parallelize computations on multi-core systems. However, no

nanimous consensus on the best solution has been achieved. On

ne hand, some solutions are based on message-passing mecha-

isms (e.g., MPI), which are usually considered too difficult to use

or developers not accustomed to parallel programming. For exam-

le, parallelizing existing legacy serial codes, like face detection,

udio processing or search algorithms, with MPI need a large code

ewriting to add the communication primitives and synchroniza-

ion needed. Usually this means to rewrite the full application at

nce to take advantage of the cluster. Instead, models targeting

MPs, are usually based on code annotations, that allow introduc-

ng less changes in the original code, and also incrementally work

n the different parts of the applications, that can be tested much

arlier than when using message passing. 

Another possibility that is going to be explored in this project

s the use of a DSM system. Distributed shared memory (DSM) is

 form of memory architecture where actually physically separate

emories can be addressed as one logically shared address space.

he main advantage of this memory organization is that it can

e easily programmed as the program can access all the available

emory despite its real physical location being the DSM support

probably integrated with the OS) the one responsible of managing

he communication. On the other hand, this management when

ot properly handled can lead to unnecessary or inefficient com-

unication patterns. 

AXIOM will leverage OmpSs, a task dataflow programming

odel that includes heterogeneous execution support as well as

ata and task dependency management [3] and has significantly

nfluenced the recently appeared OpenMP 4.0 specification. 

.1. The OmpSs programming model 

In OmpSs, tasks are generated in the context of a team of

hreads that run in parallel. OmpSs provides an initial team of

hreads as specified by the user upon starting the application. 

Tasks are defined as portions of code enclosed in the task direc-

ive , or as user-defined functions, also annotated as tasks, as fol-

ows: 

# pragma omp task [ clause − list ] 
{ structured − work | 
function − declaration | 
function − definition } 

A task is created when the code reaches the task construct, or

 call is made to a function annotated as a task. The task construct

llows to specify, among others, the clauses in, out and inout . Their

yntax is: 
software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.1016/j.micpro.2016.07.002
https://www.researchgate.net/publication/220875714_A_Proposal_to_Extend_the_OpenMP_Tasking_Model_for_Heterogeneous_Architectures?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==


C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 3 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

Fig. 2. General view of OmpSs@FPGA and OmpSs@Cluster execution context. 

 

a  

w

 

d  

i  

i  

fi  

p  

a

 

c  

d  

p  

T  

t  

d  

t  

r

 

p  

i

 

 

 

 

 

 

 

O  

F  

m  

a

 

O  

O  

o

Fig. 3. General view of OmpSs over a DSM system. 

Fig. 4. OmpSs@FPGA ecosystem compilation flow. 

2

 

c  

t  

c  

b  

o  

t  

e  

t  

t  

a

 

o  

a

 

O  

s  

i  

F  

i  

t  

T  

t  

b  

t  

e

 

t  

t  

h  

m  

s  

g  

c  
in (data − reference − list ) 
out (data − reference − list ) 
inout (data − reference − list ) 

The information provided is used to derive dependencies

mong tasks at runtime, and schedule/fire a task. Tasks are fired

hen their inputs are ready and their outputs can be generated. 

Dependencies are expressed by means of data-reference-lists. A

ata-reference in such a list can contain either a single variable

dentifier, or also references to subobjects. References to subobjects

nclude array element references (e.g., a[4] ), array sections ( a[3:6] ),

eld references ( a.b ), and elaborated shaping expressions ( [10][20]

 ). The latter means the rectangular area starting at address p , with

 shape of 10 rows and 20 columns. 

OmpSs is based on two main components: i) The Mercurium

ompiler gets C/C ++ and FORTRAN code, annotated with the task
irectives presented above, and transforms the sequential code into

arallel code with calls to the Nanos ++ runtime system; and ii)
he Nanos ++ runtime system gets the information generated by
he compiler about the parallel tasks to be run, manages the task

ependences and schedules them on the available resources, when

hose tasks are ready. Nanos ++ supports the execution of tasks in
emote nodes, and heterogeneous accelerators. 

At the lower level, the AXIOM project will investigate and im-

lement the OmpSs programming model on top of the following

ntra- and inter-node technologies: 

• Intra-node: The most important target here is FPGA pro-

grammability support. 

- OmpSs@FPGA, for easy exploiting of the FPGA acceleration; 
• Inter-node: In this case two different approaches can be ad-

dressed based on the performance requirement, although they

can be integrated in the same scenarios, to work with different

memory address spaces. 

- OmpSs@cluster, for efficient parallel programming hiding

message-passing complexities; 

- OmpSs on a DSM-like paradigm, for easy parallelization of

legacy code. 

Fig. 2 shows the overall view of OmpSs@FPGA and

mpSs@cluster execution context in a multi-board system. Each

PGA-based node will be addressed by the OmpSs@FPGA support

eanwhile the OmpSs@cluster will help to transparently program

ll the multi-node system. 

Fig. 3 shows the overall view of a DSM system where

mpSs@FPGA would have the same intra-node influence and

mpSs@cluster will appear like a single intra-node OmpSs running

ver a transparent DSM system. 
Please cite this article as: C. Álvarez et al., The AXIOM 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 
.2. OmpSs@FPGA 

The OmpSs@FPGA ecosystem consists of the infrastructure for

ompilation instrumentation and execution from source code writ-

en in C/C ++ to ARM binary and FPGA bitstream for Zynq. The
ompilation infrastructure provides support to (1) generate ARM

inary code from OmpSs code, that can run in the ARM-based SMP

f the Zynq SoC, (2) extract the kernel of the part of the applica-

ion to be accelerated into the FPGA and (3) automatically gen-

rate a bitstream that includes the IP cores of the accelerator(s),

he DMA engine IPs, and the necessary interconnection. In addi-

ion, the ARM binary can be instrumented to generate traces to be

nalyzed offline with the Paraver tool [4] . 

The runtime infrastructure should allow heterogeneous tasking

n any combination of SMPs and accelerators, depending on the

vailability of the resources and the target devices. 

Fig. 4 shows the high level compilation flow using our

mpSs@FPGA ecosystem. The OmpSs code is passed through the

ource-to-source compiler Mercurium [5] , that includes a special-

zed FPGA compilation phase to process annotated FPGA tasks.
or each of those tasks, it generates two C codes. One of them

s a Vivado HLS (source to HDL Xilinx tool) annotated code for
he bitstream generation branch (“accelerator codes” box in Fig. 4 ).

he other is an intermediate host source code with OmpSs run-

ime (Nanos ++ ) calls that is generated for the software generation
ranch (“Host C code + Nanos ++ runtime call” box in Fig. 4 ). Both
he hardware and the software generation branches are transpar-

nt to the programmer. 

Fig. 5 shows a matrix multiply example that has been anno-

ated with OmpSs directives. This code shows a parallel tiled ma-

rix multiply where each of the tiles is a task. Each of those tasks

as two input dependences and an inout dependence that will be

anaged at runtime by Nanos ++ . Those tasks will be able to be
cheduled/fired to an SMP or FPGA , as it is annontated in the tar-
et device directive, depending on the resource availability. The

opy_deps clause associated to the target directive hints the
software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.1016/j.micpro.2016.07.002
https://www.researchgate.net/publication/2306226_PARAVER_A_tool_to_visualize_and_analyze_parallel_code?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/2306226_PARAVER_A_tool_to_visualize_and_analyze_parallel_code?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/307684523_An_Introduction_to_DF-Threads_and_their_Execution_Model?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==


4 C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

Fig. 5. OmpSs directives on matrix multiplication. 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Fig. 6. Nanos++ distributed memory management organization. 

T  

s  

m  

m  

w  

a  

e  

f

 

d  

o  

t  

o  

t  

t  

t

 

b  

t  

i  

2

 

e  

a

 

p  

a  

i  

m  

l  

t  

w  

e

2

 

t  

r  

s  

p  

t  

m

 

O  

s  

o  

i  

t

Nanos ++ runtime to copy the data associated with the input and
output dependences to/from the device when necessary. 

2.3. OmpSs@cluster 

OmpSs@cluster is the OmpSs flavor that provides support for a

single address space over a cluster of SMP nodes with accelera-

tors. In this environment, the Nanos ++ runtime system supports a
master-worker execution scheme. One of the nodes of the cluster

acts as the master node, where the application starts. In the rest

of nodes where the application is executed, worker processes just

wait for work to be provided by the master. 

In this environment, the data copies generated either by the in ,
out , inout task clauses are executed over the network connec-
tion across nodes, to bring data to the appropriated node where

the tasks are to be executed. 

Following the Nanos ++ design, cluster threads are the compo-
nents that allow the execution of tasks on worker nodes. These

threads do not execute tasks themselves. They are in charge of

sending work descriptors to their associated nodes and notifying

when these have completed their execution. One cluster thread can

take care of providing work to several worker nodes. In the current

implementation, cluster threads are created only on the master

node of the execution. Slave nodes cannot issue tasks for remote

execution and thus they do not need to spawn cluster threads. 

In Nanos ++ , the device specific code has to provide specific
methods to be able to transfer data from the host address space

to the device address space, and the other way around. The mem-

ory coherence model required by OmpSs is implemented by two

generic subsystems, the data directory and the data cache , ex-

plained below. 

Fig. 6 shows how the different Nanos ++ subsystems are or-
ganized to manage the memory of the whole cluster. The master

node is the responsible for keeping the memory coherent with

the OmpSs memory coherence model, and also for offering the

OmpSs single address space view. The master node memory is

what OmpSs considers the host memory or host address space , and

it is the only address space exposed to the application. The mem-

ory of each worker node is treated as a private device memory and

is managed by the master node. 

The data cache component manages the operations needed at

the master node to transfer data to and from worker memories.
Please cite this article as: C. Álvarez et al., The AXIOM 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 
here is one data cache for each address space present on the

ystem. Operations performed in a data cache include allocating

emory chunks, freeing them and transferring data from their

anaged address spaces to the host address space and the other

ay around. Data caches also keep the mapping of host memory

ddresses to their private memory addresses. Memory transfer op-

rations are implemented using network transfers. Allocation and

ree operations are handled locally at the master node. 

A memory reference may have several copies of its contents on

ifferent address spaces of the system. To maintain the coherence

f the memory, the master node uses the data directory . It con-

ains the information of where the last produced values of a mem-

ry reference are located. With it, the system can determine which

ransfer operations must perform to execute a task in any node of

he system. Also, each task execution updates the information of

he data directory to reflect the newly produced data. 

The implementation of the network subsystem is currently

ased on the active messages provided by the GASNet communica-

ions library. In the context of AXIOM, we will adapt the network-

ng on the communications library provided for the Zynq platform.

.4. OmpSs on DSM-like systems 

DSM is a well-known research topic, and it can be implemented

ither at software or at hardware level (with a full range of hybrid

pproaches). 

We will work on the performance analysis of current DSM im-

lementations. After that the project will decide upon the design

nd development of a proper, reliable and efficient mechanism to

mplement a DSM-like paradigm integrated in the Linux OS. The

echanism will run on the reference platform. It will allow to

everage the simplicity and scalability of the OmpSs framework on

op of the AXIOM platform. It will be released as Open-Source soft-

are, and it is expected to bring benefits to both the ICT and the

mbedded industries. 

.5. Operating system support 

The operating system used in the project will be Linux. One of

he advantages of using a SoC like the Zynq is that Linux can be

un on the ARM cores of the platform off-the-shelf. This kind of

ystem has the advantage of the easiness to program a standard

rocessor like the ARM along with the raw performance power of

he FPGA fabric that will be used through the OmpSs programming

odel. 

We will investigate the possibility of integrating features in the

S to load balance the work across the nodes through the high-

peed interconnection. Finding an efficient solution is an aimed

utcome of the project since current solutions for load balancing

n distributed systems may be expensive, too specific, or difficult

o program (with paradigms such as MPI). 
software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.1016/j.micpro.2016.07.002


C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 5 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

 

s  

a  

t

 

t  

(  

w  

e  

t

3

 

e  

d  

a  

l  

t  

d  

u  

n

 

c  

l  

p  

t  

i  

i  

(  

s  

n

 

t  

r  

3  

h  

n  

f

 

-  

t  

i  

p  

O  

t  

r  

t  

l

 

p  

w  

r  

s  

c  

w  

e  

/  

m

 

m  

s  

d  

t  

F  

Fig. 7. The Network Interface controller structure. 

d  

a  

(

 

a  

P  

s  

o  

n  

f  

s  

i

 

c  

w  

a  

m  

r  

u  

n  

i  

c

 

l  

t  

Z  

m

 

t  

w  

h  

D  

e  

t  

R  

t

 

m

4

 

V  

m  

p  

s  

p

Particular attention will be given to scalability and latency is-

ues, by implementing lock-free data structures. Another relevant

spect will be the necessity of properly managing events in real-

ime. 

The OS scheduler will be extended to enable it distributing

hreads across the different nodes. The low-level thread scheduler

LLTS [6–10] , discussed in Section 7 ) may be accelerated in hard-

are, by mapping its structure in the FPGA cards composing the

valuation platform. This will avoid bottlenecks from the scheduler,

hus increasing the performance of parallel applications. 

. The AXIOM link 

The AXIOM platform will be built around FPGA-based SoC, as

xemplified by the Zynq platform by Xilinx. Zynq devices feature a

ual- or quad-core ARM Cortex A9 processor closely connected to

n FPGA fabric. The closeness of the connection (and hence the low

atency) and the flexibility of the reconfigurable FPGA logic make

he combination very powerful in terms of customization. In ad-

ition, Zynq devices feature gigabit-rate transceivers that will be

sed to provide ample communication bandwidth between AXIOM

odes. 

In terms of connectivity, AXIOM -besides including classical

onnectivity (e.g., Internet)- will also bring modularity at the next

evel, allowing the construction of more compute intensive and

erformance systems through low-cost but scalable high-speed in-

erconnect. This interconnect, subject of research and design dur-

ng the project, will utilize relatively low cost SATA connectors to

nterconnect multiple boards. Such connectivity will allow to build

or upgrade at a later moment) flexible and low-cost systems with

implicity by re-using the same basic (small) module without the

eed of costly connectors and cables. 

We will provide three bi-directional links per board, so that

he nodes can be connected in many different ways, ranging from

ing, to the well-established 2D-mesh/torus, and up to arbitrary

-D topologies such as mesh/torus. The AXIOM interconnect will

ave customizable parameters (such as packet size, formats, etc) if

eeded by applications, further improving the efficiency and per-

ormance. 

In AXIOM we will provide a powerful network interface (NI)

implemented in the FPGA region- that will efficiently support

he communication protocols needed by the applications. Besides

mplementing a MPI-like communication library, we will sup-

ort a (distributed) Shared Memory model with support from the

mpSs programming model, the Operating System, and the Run-

ime. One such optimization is the efficient implementation of

emote direct memory access (RDMA) and remote-write opera-

ions as basic communication primitives visible at the application

evel. 

The AXIOM interconnection library will support two main

acket types, (a) RDMA, and (b) short messages. RDMA packets

ill be used to (a) request large data from a remote node (RDMA

equests), and (b) transmit large data (RDMA writes). Short mes-

ages will be used to exchange short data between nodes that will

ontain either raw data or acknowledgement packets (ACKs). To-

ards a balanced and efficient bandwidth network utilization, we

mploy a packet priority transmission scheme; ACKs, RDMA writes

 messages, and RDMA requests are classified with the highest,

iddle and lowest transmission priority respectively. 

Fig. 7 illustrates the NI internal structure for inter-node com-

unication. The “RDMA FIFOs” will be used to store descriptors for

ending / receiving RDMA packets to / from remote nodes. RDMA

escriptors contain the local and remote node id, source and des-

ination data address, and finally the payload size. The “Raw data

IFOs” will be used to store descriptors for exchanging either short
Please cite this article as: C. Álvarez et al., The AXIOM 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 
ata messages or ACKs. Such descriptors will contain the source

nd destination node id, and also encapsulate the payload data

raw data or an ACK). 

The “NI control registers” are memory mapped registers that

llow the local Zynq processing system (PS) to configure the NI

HY loopback mode or toggle local notifications when data are

uccessfully transmitted. The “NI Status registers” are also mem-

ry mapped registers that allow the PS to monitor certain NI inter-

al states, such as the DMA engine progress, queues status (empty,

ull, etc.), PHY channel and link states. In addition, when a FIFO

tate moves from empty to not empty the “IRQ” module raises an

nterrupt to inform the PS. 

The hardware counters module (“HW cnt”) provides a set of

ounters to monitor the progress of RDMA requests and RDMA

rites. Every new RDMA request / RDMA write that reads / writes

 large set of data from / to a remote node, is essentially served by

ultiple short RDMA responses (packets that fetch subsets of the

equested data). Moreover, each RDMA request / RDMA write gets a

nique id that is assigned to a HW counter. The latter is set to the

umber of RDMA responses required to transmit all data; its value

s decremented each time an RDMA response is finished. The PS

an access all HW counters for debugging purposes via software. 

The “DMA engine” is responsible for storing incoming payload /

oading requested data to / from the required SDRAM address via

he PS coherency port (ACP). The “Aurora PHY link” utilizes the

ynq MGT transceivers to serially send / receive data to / from re-

ote nodes. 

The “packetizer” assembles a complete packet that will be sent

o a remote node; short messages and RDMA requests / RDMA

rites are forwarded to the Aurora PHY link, while RDMA response

eaders are appended with the requested payload provided by the

MA engine. In contrast, the “unpacketizer” caches incoming pack-

ts. Simple messages / ACKs and RDMA response headers are even-

ually stored to the “Raw data FIFOs”. Trailing payload data from

DMA responses are forwarded to the DMA engine and stored to

he SDRAM via the ACP, ensuring the PS data coherency. 

Finally, the NI “internal controller” (NIC) orchestrates the overall

odule functionality. 

. Application domains and examples of use 

AXIOM will be applied in two real life application domains:

ideo-surveillance and Smart-home. They will operate as bench-

arks for assessing the potentialities and the limits of the pro-

osed architecture. The two application domains have been cho-

en for the different kind of challenges to process capabilities they

ose. 
software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.1016/j.micpro.2016.07.002
https://www.researchgate.net/publication/233730794_TERAFLUX_Exploiting_dataflow_parallelism_in_teradevices?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/276877507_Enhancing_an_x86_64_multi-core_architecture_with_data-flow_execution_support?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261718276_TERAFLUX_Harnessing_dataflow_in_next_generation_teradevices?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/305113561_Accelerating_haskell_on_a_dataflow_architecture_A_case_study_including_transactional_memory?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/307684523_An_Introduction_to_DF-Threads_and_their_Execution_Model?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/270595411_A_scalable_thread_scheduling_co-processor_based_on_data-flow_principles?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/305113740_Transactional_memory_on_a_dataflow_architecture_for_accelerating_haskell?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==


6 C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

F  

o  

w

 

s  

F  

o  

d

4

 

b  

d  

M  

S  

s  

a  

i  

e  

o  

t

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

4.1. Video-surveillance 

Intelligent multi-camera video surveillance is a multidisci-

plinary field related to computer vision, pattern recognition, signal

processing, communication, embedded computing and image sen-

sors. Smart video-surveillance has a wide variety of applications

both in public and private environments, such as homeland secu-

rity, crime prevention, facial marketing and traffic control, among

others. 

These applications are generally very computationally demand-

ing, since they require monitoring very diverse indoor and out-

door scenes including airports, hotels or shopping malls, which

usually involve highly varying environments. In many cases it is

also necessary to analyze multiple camera video streams, particu-

larly when object re-identification or tracking of individuals across

cameras is required. For instance, a scenario where runners may be

observed and recognized with different objectives: statistics, real-

time detection of people that want to be video recorded during

the race, TV reportage where the TV officer only has to say the

name of a runner and the corresponding camera becomes oper-

ative, etc. Another crowded scenario may be the case of a large

company with hundreds of employees that work in several differ-

ent places/buildings: an employee A in any room requests video-
conference with a person (in any place, any building) and AXIOM,

in real-time, detects where this person is and requests permission

to begin videoconference room-to-room by telling that person: “A
is requesting a videoconference”. Real-time recognition may also

help to track emergency vehicles to skip traffic jams by analyzing

the traffic camera images in real-time. 

The modular approach explored by AXIOM is particularly well-

suited for tackling such challenging scenarios as it addresses the is-

sues derived from their computational complexity, distributed na-

ture, and need for synchronization among processes. Furthermore,

the AXIOM platform makes it possible to execute compute inten-

sive tasks on ARM with FPGA processing nodes. This will enable

companies such as Herta Security to deploy their real-time face

recognition technology in crowded and changeable environments

using multiple cameras simultaneously. 

4.2. Smart-home 

Smart home means buildings empowered by ICT in the context

of the merging Ubiquitous Computing and the Internet of Things:

the generalization in instrumenting buildings with sensors, actu-

ators, cyber-physical systems allow to collect, filter and produce

more and more information locally, to be further consolidated and

managed globally according to business functions and services. A

smart home is one that uses operational and IT technologies and

processes to make it a better performing building - one that deliv-

ers lower operating costs, uses less energy, maximizes system and

equipment lifetime value, is cyber-secured and produces measur-

able value for multiple stake holders. 

Major challenges in such environments concern cryptography,

self-testing and first of all sensor-networks management. Sensor

data brings numerous computational challenges in the context of

data collection, storage, and mining. In particular, learning from

data produced from a sensor network poses several issues: sensors

are distributed; they produce a continuous flow of data, eventually

at high speeds; they act in dynamic, time-changing environments;

the number of sensors can be very large and dynamic. These is-

sues require the design of efficient solutions for processing data

produced by sensor-networks. 

AXIOM can help with preventive and interactive maintenance of

infrastructures, climate and temperature management. This man-

agement can be remotely controlled helping to improve the en-

ergy efficiency at home, apartments and company office buildings.
Please cite this article as: C. Álvarez et al., The AXIOM 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 
or instance, AXIOM may detect patterns of behavior in a company

ffice building to adapt climate and light switching to the working

ay of life of the workers. 

The two application domains pose also common challenges

uch as, board-to-board communication and easy programmability.

urthermore, the two scenarios shown can easily converge, offering

pportunities for synergies and emerging services in the respective

omains. 

.3. Examples of use 

We are currently considering a wide range of potential uses

oth for Video-surveillance and for Smart-home. They range from

ynamic retail demand forecasting in train/bus station to Smart

arketing in shopping malls for Video-surveillance; and from

mart home comfort to Autonomous drone for infrastructure and

mart-home control. Here a taste of the scenarios, where the goals

re expressed in terms of the final users of the enabling technology

s showed. A discussion of another scenario, part of our scenario

xploration, related to vehicle detection can also be found in an-

ther paper [11] . At the same time, these goals should match with

he challenges to AXIOM processing capabilities: 

• Dynamic retail demand forecasting. Due to the high fluctua-

tion of passengers departing and arriving at train stations, de-

mand for station retailers varies strongly over time. By forecast-

ing such demand through video analysis, better services can be

provided through more efficient staff utilization. The purpose of

this scenario is to provide retailers with a real-time forecast of

potential customers arriving at their outlets, to allow for better

task allocation and to increase business efficiency. 
• Smart marketing in shopping mall. Consumer behavior in a

shopping mall can be very eclectic yet the awareness of pat-

terns of behavior can be of help both to services providers and

to clients to meet their respective goals. Demographic analy-

ses is carried out over the captured facial snapshots, helping

to identify interesting facts such as the demographic profiles of

the customers, or how do they distribute into gender and age

segments. The visitors are tracked from one camera to another,

so as to discover the main paths they take through the mall and

how long they stay at different locations. The goal is to collect

statistical information about the visitors in order to define mar-

keting strategies both for service providers and for clients. 
• Smart home comfort. Comfort perception and necessities can

be different in respect of time of the day/week and to the char-

acteristics of the people actually living that space in that mo-

ment. The smart home is required to identify and manage the

different situations, and to react at the people indications in an

easy and smooth way. Networked sensors and actuators are dis-

tributed in each room embedded in ordinary appliances. The

appliances perform their primary normal function, but also col-

lect different kinds of information, ranging from presence de-

tection, temperature, humidity, window and door opening, air

quality, audio. The objective of the smart home comfort autopi-

lot is to minimize power consumption and to guarantee peo-

ple’s comfort and well being, without giving the impression of

reducing people freedom and capacity of control. 
• Autonomous rover/drone for infrastructure control. Preventive

maintenance is performed on equipment to keep it running

smoothly and efficiently and to help extend its life. Many types

of equipment should be put on a preventive maintenance pro-

gram: HVAC systems, pumps and air compressors, air con-

ditioning, chillers and absorption equipment, elevators, safety

showers, back-flow preventers, building exteriors, roofs, win-

dows, fire doors and generators. Autonomous rovers and drone

furnished with thermo camera and ambient sensors can move
software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.1016/j.micpro.2016.07.002
https://www.researchgate.net/publication/308861942_A_field_experience_for_a_vehicle_recognition_system_using_magnetic_sensors?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==


C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 7 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

 

 

 

 

 

 

 

 

s  

i  

n  

w  

t  

i

 

t  

p  

n  

H  

d  

t  

t  

l  

v  

s  

a  

a

 

w  

f  

t  

t  

a

5

 

u  

a

 

 

5

 

p  

C  

6  

o  

t  

v  

m  

a

5

 

h  

2  

a  

s  

T  

Table 1 

Total number of additional lines of code com- 

pared to a baseline C implementation. 

Application Pthread Accel OmpSs 

Cholesky 26 71 3 
Covariance 29 94 3 
MxM 64x64 39 95 3 
MxM 32x32 39 95 3 

w  

t  

t

 

N  

t  

T  

s  

b  

C  

(  

o  

t  

t

 

i  

l  

t  

c  

m  

w  

a

6

 

m  

g  

s

6

 

p  

q  

c  

t

 

p  

d  

p  

o  

t  

t

 

t  

v  

t  

t  

i  

t  

a

 

m  

t  

t  
inside and outside a building monitoring the energy flow, pro-

viding data for a multi-level energy flow models that can be

used for preventive maintenance. The goal is maintaining build-

ing infrastructure efficient, manage operating costs, and mini-

mizing potential downtime. It also ensures these components

perform within their originally designed operating parameters,

allowing data center managers the opportunity to replace com-

ponents before they fail. 

The software approach explored by AXIOM is particularly well-

uited for tackling such challenging scenarios, as it addresses the

ssues derived from their computational complexity, distributed

ature, and need for synchronization among processes. Moreover,

e are considering some representative benchmarks to test drive

he design of the software stack that two partners already explored

n the ERA project [12,13] . 

Finally, it is worth mentioning that this project doesn’t address

he problem of maintaining or securing “sensible” data. In princi-

le AXIOM is not collecting sensitive information, as per the defi-

ition of sensitive information provided by EU Directive 95/46/EC.

owever, according to the approved Commission Proposals on the

ata protection reform, biometric data has to be considered sensi-

ive by default. This Regulation shall apply from 25 May 2018 but

he project considers since the beginning that biometric data col-

ected deserve that highest protection, at the same level of data re-

ealing racial or ethnic origin, political opinions, religious or philo-

ophical beliefs. Accordingly, procedures compliant with national

nd EU legislation are followed to deal with data collection, stor-

ge, protection, retention and destruction and confirmation. 

Regarding the software developed in the presented scenarios, it

ill rely on the Linux OS security layers already developed. As a

ull Linux compliant architecture, the AXIOM architecture supports

he technical means to guarantee different privacy levels to pro-

ect the access to “sensible” plain data. Of course, it will also be

rchived and distributed following national and EU legislation. 

. Experimental setup 

In the first year of the AXIOM project we want to properly eval-

ate the potential of the proposed hardware/software platform to

chieve the following goals: 

• Easy programmability of multi-core, multi-board, FPGA nodes

using the OmpSs programming model. 
• Reasonable performance and improved energy efficiency com-

pared against state-of-the-art systems. 

.1. Benchmarks description 

Three benchmarks have been used for the analysis of easy

rogrammability when using the OmpSs@FPGA infrastructure: (1)

holesky matrix decomposition, working on a dense matrix of

 4x6 4 double-precision complex numbers; (2) Covariance, working

n arrays of 32-bit integer complex numbers; and (3) Matrix mul-

iplication, working on a matrix of single precision floating point

alues (32 × 32 and 64 × 64 sizes). On the order hand, for perfor-
ance results the same matrix multiplication has been used with

 larger matrix 2048 × 2048, and different block sizes. 

.2. Hardware and software 

To perform the FPGA experiments showed in this article we

ave used a Zynq 706 board. The board includes a Zynq 7045 with

 ARM cores running at 800MHz and an FPGA that run at 200MHz

nd features 350K logic cells, 19.1Mb of block RAM and 900 DSP

lices. The SoC was released at 2012 and used 28nm technology.

iming of the applications has been obtained by instrumenting
Please cite this article as: C. Álvarez et al., The AXIOM 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 
ith gettimeofday the part of the code that calls several times
he kernel code while the power consumption was computed using

he tools provided by Xilinx. 

The OmpSs implementation is based on Mercurium 1.99.4 and

anos ++ 0.8. For the hardware compilation branch we have used
he Xilinx ISE Design 14.7 and the Vivado HLS 2013.2 tools.

he #pragma HLS pipeline II = 1 was used to parallelize the
econd loop of the matrix multiplication. All OmpSs codes have

een compiled with the arm-xilinx-linux-gnueabi-g ++ (Sourcery
odeBench Lite 2011.09–50) 4.6.1 and arm-xilinx-linux-gnueabi-gcc

Sourcery CodeBench Lite 2011.09–50) 4.6.1 compilers, with -O3
ptimization flag. OmpSs runtime used an AXIOM premilinary pro-

otype of the NI interface. Results show the average elapsed execu-

ion time of 3 application executions. 

The machine used to obtain the GPP reference results was an
5-3470 with 4 cores running at 3.20GHz. The processor was se-

ected as it was released in Q2’12, close to the releasing time of

he Zynq 7045, and uses a 22nm technology. As with the ARM

odes, timing was measured with gettimeofday and power was
easured reading directly the processor hardware registers. Codes

ere compiled with gcc version 5.2.1 using -O3 optimization flag
nd MKL version 11.2.3. 

. Results 

We have done some experiments for coding a set of bench-

arks in the Zynq platform and an initial evaluation of pro-

rammability cost in terms of number of lines of code, as a mea-

ure of programmability complexity. 

.1. Programmability analysis 

In order to have a good programmability analysis we have im-

lemented four different versions of each benchmark code: se-

uential code, pthread code, FPGA-accelerated code and OmpSs

ode. All versions of the codes consider the full Matrix Multiply,

he full Cholesky, and the full Covariance as tasks. 

We want to remark the programmability facilities of our pro-

osal. With this objective, Table 1 shows the total number of ad-

itional lines of code for each of the different versions of the ap-

lications, compared to the sequential version: a pthread version

nly running tasks in one or two ARM cores ( Pthread ), a sequen-
ial version using one or two hardware accelerators ( Accel ), and
he OmpSs version ( OmpSs ). 

The Pthread and Accel versions require more additional lines

han the OmpSs version. This is especially high in the sequential

ersions using the hardware accelerators. For the Pthread version

his is due to the additional calls to the Pthreads library, in order

o create, manage and join the pthreads. For the Accel version, this

s because the application needs to call the low-level infrastructure

o setup the communications layer with the FPGA and perform the

ctual data transfers back and forth to the FPGA hardware. 

On the other hand, in the case of the OmpSs version, the thread

anagement, the setup of the communications and data transfers

o and from the FPGA are all done internally by the Nanos ++ run-
ime. This way, the programmer does not need to write any line
software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.1016/j.micpro.2016.07.002


8 C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

Fig. 8. Elapsed-time: 1/2 FPGA accelerators, up to 256 × 256. 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Fig. 9. Elapsed-time: FPGA MxM versus SMP MxM (MKL). 

Fig. 10. Energy consumption: FPGA MxM versus SMP MxM (MKL). 

a  

i  

t

 

a  

i  

b  

a  

b  

w  

i  

i  

S  

t  

t  

o  

t  

p

 

1  

o  

f  

w  

F  

c  

l  

w  

c  

n  

t  

M  

v  

u

of code related to low level management, but only the directives

triggering the communications. 

Indeed, the current compilation and runtime infrastructure of

the OmpSs programming model allows to exploit the heteroge-

neous characteristics of the Zynq All-Programmable SoC with the

only effort of two directive lines. Note however that Table 1 in-

dicates that the OmpSs version needs an additional third line. This

line is a taskwait before the program ends, as it can be observed
in Fig. 5 . Actually, the code showed in Fig. 5 is used to generate

both the 32 × 32 and the 64 × 64 versions of the matrix multi-
plication, using all the available resources (ARM cores and FPGA),

simply by redefining the BS variable as 32 or 64 elements. 

For the Pthreads and Accel versions however, different block

sizes need new scheduling schemes, adding more complexity to

the transformation of the code. Indeed, implementing a fourth ver-

sion of the code managing heterogeneous executions would require

more development time and additional lines that the ones showed

in Table 1 . 

6.2. Performance results 

In order to study the suitability of our approach to the High

Performance Computing (HPC) environment, it is necessary to

demonstrate that our systems is not only able to be easily pro-

grammed but also that it can achieve a reasonable performance

when compared to other current state-of-the-art approaches. 

First, an evaluation of the best accelerator size for the selected

FPGA was performed. Fig. 8 shows the elapsed time for a 2048 ×
2048 matrix multiplication using 1/2 accelerators of sizes (blocks)

6 4 × 6 4, 128 × 128 and 256 × 256. Results show that using 1/2
6 4 × 6 4 accelerators are the worst choice. This accelerator size is
too small for the problem since the data transfer to/from the FPGA

overcomes the computational benefits of using the FPGA. Indeed,

as the communication channel is shared, using two accelerators

does not improve the performance that is bounded by the DMA.

On the other hand, there is a significant improvement when mov-

ing to 128 × 128 accelerators. Those bigger accelerators compute
blocks of four times the size of 64 × 64 accelerators and conse-
quently the data movements are divided by four. Therefore, 128 ×
128 accelerators are also 8 times more time consuming than 64

× 64 accelerators since doubling the block size means eight times
more multiplications, and then, using two accelerators can help to

improve the performance. However, due to FPGA limited resources,

the compiler is not able to make the two accelerators, sharing re-

sources, as fast as only one, using all the resources. This limit ex-

plains why the largest accelerator (blocks of 256 × 256) is not able
to be as fast as two 128 × 128 ones. Although the data transfers
are again divided by four the accelerator is six times slower than

one 128 × 128 due to the limited resources and this results in
a worse overall performance. One not so obious, but nevertheless

important result of Fig. 8 is that all the accelerators were compiled
Please cite this article as: C. Álvarez et al., The AXIOM 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 
nd executed using the same source code (listed in Fig. 5 ) chang-

ng only the block size ( BS ). Both the compiler and the runtime
ake care of all the details. 

Fig. 9 shows the time in microseconds that takes to compute

 2048 × 2048 matrix multiplication, using the best block size,
n two different systems. Columns named i5 show the time used

y the Corei5 machine described in Section 5.2 when using 1, 2

nd 4 cores respectively with the sgemm function of the MKL li-
rary. Column 706 shows the time used by the same computation

hen it is performed in a Zynq 706 board using the code showed

n Fig. 5 and the OmpSs compilation and execution framework. As

t can be seen the FPGA board is competitive with the conventional

MP with a result between 1 and 2 Corei5 cores in performance

erms. Fig. 10 shows the energy consumption of the same compu-

ation in the same machines. As it shows the FPGA system clearly

utperforms the conventional SMPs in terms of energy consump-

ion which shows that our approach is promising for future com-

uting systems. 

What is more important from the results showed in Figs. 9 and

0 is not that an FPGA of an older technology process can clearly

utperform in terms of energy a conventional processor but the

act that writing the code for the FPGA was actually simpler than

riting the code for the SMP. Indeed, as mentioned above the

PGA code was directly the one showed in Fig. 5 while the SMP

ode was changed to call the parallel sgemm version of the MKL
ibrary instead of the original matrix multiply function. So, OmpSs

as not used for the Core i5 version. Arguably, the change was not

umbersome neither extensive but the fact is that the naive origi-

al version of the MxM code, although compiled with the -O3 op-
imization flag, performed much (36 × slowdown) worse than the

KL sgemm implementation forcing us to change the code to pro-
ide a fair evaluation. In our opinion this highlights the potential of

sing the OmpSs programming model for heterogeneous systems. 
software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.1016/j.micpro.2016.07.002


C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 9 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

7

 

t  

i

 

t  

s  

t  

b  

a  

t  

p  

p  

p  

b  

m  

a  

w  

a  

t  

n

 

a  

k  

O  

h  

p  

t  

t  

l  

p  

L  

S  

h  

r  

t

 

p  

o  

n  

t  

i  

O  

f  

o  

p

 

t  

G  

s  

t  

h  

a  

P  

t  

g  

w  

t  

a  

t

 

g  

h  

t  

t  

a  

l  

t  

i  

a

 

i  

w  

i  

O  

S  

n

v

o  

(  

l  

r  

p  

t  

m  

w  

t  

m  

l  

b

 

C  

p  

e  

i  

a  

i  

o  

a

 

a  

u  

p  

t  

t  

b  

v  

w

8

 

a  

o  

w  

i

a  

s  

o  

s

 

b  

i  

I  

c  

c  

w  

p  

s  

o  
. Related work 

The AXIOM project will exploit the OmpSs dataflow features in

he AXIOM heterogeneous architecture. OmpSs is the result of the

ntegration of StarSs [14] and OpenMP. 

In this section we discuss some work that has been fundamen-

al for the development of this project and provided the neces-

ary inspiration and vision to develop some basic concepts related

o the dataflow execution model. Dataflow execution model had

een studied since long time ago [15] as they provide a simple

n elegant way to efficiently move data from one computational

hread to another one [16,17] . In the context of the TERAFLUX

roject [9,18] such dataflow model had been extended to multi-

le nodes executing seamlessly thanks to the support of an ap-

ropriate memory model [7,10] . In such memory model a com-

ination of consumer-producer patterns [8,19] and transactional

emory [20,21] permits a novel combination of dataflow concepts

nd transactions in order to address the consistency across nodes,

here each node is assumed to be cache-coherent, i.e., like in

 classical multi-core. Dataflow models also allow the system to

ake care in a distributed way of faults that may compromise a

ode [22,23] . 

In order to integrate heterogeneous execution of the same

pplications over processors and FPGA fabric, OmpSs@FPGA is a

ey point in the project. Although to the best of our knowledge

mpSs@FPGA [24, 25] is the first successful attempt to implement

ardware accelerators from high-level directives in a total trans-

arent way, other approaches have been used in the past. Some

ools try to reduce the FPGA programmability problem by offering

he possibility of generating HDL code from C or C-like languages

ike ROCCC [26,27] or generating systems with an embedded soft

rocessor connected to the generated hardware accelerators like

egUp [28] and C2H tool [29] . However, with the new SMP/FPGA

oCs, new strategies are required in order to exploit those current

eterogeneous and parallel platforms. Our ecosystem also covers

untime support for parallel execution of heterogeneous tasks on

hose SoCs, unlike other. 

PGI [30] and HMPP [31] programming models are two other ap-

roaches quite related to OmpSs. PGI uses compiler technology to

ffload the execution of loops to the accelerators. HMPP also an-

otates functions as tasks to be offloaded to the accelerators. We

hink that OmpSs has higher potential in that it shifts part of the

ntelligence that HMPP and PGI delegate in the compiler to the

mpSs runtime system. Although these alternatives do support a

air amount of asynchronous computations expressed as futures

r continuations, the level of lookahead they support is limited in

ractice. 

To execute over several nodes, OmpSs@cluster [32] is one of

he alternatives explored in the project. As alternatives, Partitioned

lobal Address Space (PGAS) programming models expose an ab-

tracted shared address space to the programmer simplifying its

ask, while data and thread locality awareness is kept to en-

ance performance. Representative PGAS languages are UPC [33] ,

nd X10 [34] ; and Chapel [35] , which implement Asynchronous

GAS model, offering asynchronous parallelism. An alternative way

o provide asynchronous parallelism on clusters is a hybrid pro-

ramming model that composes SMPSs [36] , that inspired OmpSs,

ith MPI. The main idea is to encapsulate the communications in

asks so they are executed when the data is ready. This technique

chieves an asynchronous dataflow execution of both communica-

ion and computation. 

OpenCL [37] attempts to unify the programming models for

eneral-purpose multi-core architectures and the different types of

ardware accelerators (Cell B.E., GPUs, FPGAs, DSPs, etc.). The par-

icipation of silicon vendors (e.g., Intel, IBM, NVIDIA, and AMD) in

he definition of this open standard ensures portability, low-level
Please cite this article as: C. Álvarez et al., The AXIOM 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 
ccess to the hardware, and supposedly high performance. We be-

ieve, however, that OpenCL still exposes much of the low-level de-

ails (i.e. explicit platform and context management, kernel special

ntrinsic functions, explicit program, kernel and data transfer man-

gement, etc.), making it cumbersome to use by non-experts. 

Another alternative for mutli-node programming is DSM. DSM

s a recently revived topic [38] . Some attempts for creating Soft-

are DSM implementations for Linux have been carried out dur-

ng the last decades. Examples are Treadmarks (TMK), JIAJIA [39] ,

mni/SCASH [40,41] , Jump [42,43] , Parade [44,45] , NanosDSM [46] .

ome of these projects only supported very specific hardware, and

one of them has been maintained during the last decade. 

Regarding applications, state-of-the-art implementations of 

ideo-surveillance or voice-identification scenarios currently rely 

n machine learning techniques based on deep neural networks

DNNs). As recent studies have pointed out, DNNs are particu-

arly good for addressing computer vision image classification and

ecognition problems exhibiting highly non-linear properties. Ap-

lications ranging from face recognition [47] and age/gender es-

imation [48] to pedestrian detection [49] have experienced dra-

atic improvements in terms of accuracy just by training DNNs

ith huge amounts of data. Due to the architectural properties of

hese models and the advances in HPC, it is now cost-effective to

assively scale the infrastructure to train such networks with mil-

ions of sample images that have been previously manually tagged

y humans on the widely-available social networking services. 

The proliferation of frameworks and libraries such as

affe [50] and cuDNN [51] have democratized the usage of

arallelized DNN-based solutions on GPU architectures. How-

ver, there is a lack of ready-to-deploy implementations of DNN

nference engines for embedded platforms powered by FPGA

ccelerators. Since DNN evaluation is highly parallel in nature,

t is feasible to offload all the required SGEMM matrix multiply

perations to FPGAs, and also to execute forward propagation in

n efficient manner through the OmpSs programming model. 

Once DNN models are trained as a result of a process that usu-

lly takes several days on a GPU cluster, it is then possible to eval-

ate them on the AXIOM board. With this idea in mind, we aim to

roduce a generic easy-to-use, low-power hardware/software stack

o cheaply deploy machine learning solutions based on DNNs in-

eracting with the Cyber-Physical world. This ecosystem powered

y the AXIOM platform is expected to solve a myriad of computer

ision problems, and thus dramatically improve productivity on a

ide range of industries. 

. Conclusions and future work 

In this paper, we have presented the software layers that we

re developing on the AXIOM H2020 European Project. The main

bjective of the project is to bring to reality a novel small board

hich aims at becoming a very powerful basic brick of future

nterconnected and scalable embedded Cyber-physical systems, 

nd specifically we focus on the application domains of Video-

urveillance, deep learning and Smart-home. The module consists

f both hardware and software that will be designed and demon-

trated in the project. 

On one hand, the target board architecture will be a board

ased on a SoC with several ARM cores and an FPGA, like the Xil-

nx Zynq, and with the Arduino interface to be extensible. The AX-

OM system will comprise several of such boards linked through

ustom communication links, and providing application memory

oherence at software level. On the other hand, we will research

ays to easy programmability of the system, based on the OmpSs

rogramming model and DSM-like techniques to achieve a global

ystem image for applications. Currently, we are in the process

f designing a high-speed communications layer between boards.
software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.1016/j.micpro.2016.07.002
https://www.researchgate.net/publication/233730794_TERAFLUX_Exploiting_dataflow_parallelism_in_teradevices?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/276877507_Enhancing_an_x86_64_multi-core_architecture_with_data-flow_execution_support?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/220457354_Hierarchical_Task-Based_Programming_With_StarSs?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/262268980_Hybrid_Dataflowvon-Neumann_Architectures?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/257944928_The_TERAFLUX_project_Exploiting_the_dataflow_paradigm_in_next_generation_teradevices?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261718276_TERAFLUX_Harnessing_dataflow_in_next_generation_teradevices?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/300655707_A_matrix_multiplier_case_study_for_an_evaluation_of_a_configurable_dataflow-machine?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261847395_OmpSsZynq_all-programmable_SoC_ecosystem?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261021506_Heterogeneous_tasking_on_SMPFPGA_SoCs_The_case_of_OmpSs_and_the_Zynq?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/258139318_Parallel_Programmability_and_the_Chapel_Language?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221224896_LegUp_High-level_synthesis_for_FPGA-based_processoraccelerator_systems?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/277669226_Turning_Centralized_Coherence_and_Distributed_Critical-Section_Execution_on_their_Head_A_New_Approach_for_Scalable_Distributed_Shared_Memory?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221173032_Designing_Modular_Hardware_Accelerators_in_C_with_ROCCC_20?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221643570_Effective_Communication_and_Computation_Overlap_with_Hybrid_MPISMPSs?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/263564119_DeepFace_Closing_the_Gap_to_Human-Level_Performance_in_Face_Verification?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/264979485_Caffe_Convolutional_Architecture_for_Fast_Feature_Embedding?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/278743159_A_Deep_Analysis_on_Age_Estimation?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/266560893_cuDNN_Efficient_Primitives_for_Deep_Learning?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/241628213_A_Fault_Detection_and_Recovery_Architecture_for_a_Teradevice_Dataflow_System?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/305113561_Accelerating_haskell_on_a_dataflow_architecture_A_case_study_including_transactional_memory?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/220378348_Running_OpenMP_applications_efficiently_on_an_everything-shared_SDSM?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/273140198_A_Clockless_Computing_System_Based_on_the_Static_Dataflow_Paradigm?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261355859_Productive_Programming_of_GPU_Clusters_with_OmpSs?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/240064180_HMPP_A_hybrid_multi-core_parallel_programming_environment?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/2465694_JUMP-DP_A_Software_DSM_System_with_Low-Latency_Communication_Support?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/305113486_Simulating_a_multi-core_x86_64_architecture_with_hardware_isa_extension_supporting_a_data-flow_execution_model?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/4222097_ParADE_An_OpenMP_programming_environment_for_SMP_cluster_systems?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/260767373_FPGA_Code_Accelerators_-_the_Compiler_Perspective?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221321632_X10_An_object-oriented_approach_to_Non-Uniform_Cluster_Computing?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/307684523_An_Introduction_to_DF-Threads_and_their_Execution_Model?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/305113740_Transactional_memory_on_a_dataflow_architecture_for_accelerating_haskell?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/2482395_Experiences_using_OpenMP_based_on_Compiler_Directed_Software_DSM_On_a_PC_Cluster?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==


10 C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

These communication will be implemented using the transceivers

available in the Zynq SoC. We have also started looking at the ap-

plication requirements to ensure that our platform fits with their

needs. 

The expected impacts obtained from the AXIOM project include

a platform interfacing with the physical world through compatibil-

ity with Arduino shields. This platform will be aimed to become

the hardware and software platform for large scale production. In

this sense we want to develop an autonomous technology that is

able to break the Embedded Systems energy efficiency and pro-

grammability barriers. The same set of technologies are expected

to represent the base for future European industrial exploitation in

the HPC and Embedded Computing markets. Finally, it is expected

to provide the basis for a new European-level research at the fore-

front of the development of extreme-performance system software

and tools. 

Our preliminary experiments have shown that the OmpSs pro-

gramming model increases the expressiveness of serial or pthreads

programming, thus allowing developers to focus on solving the is-

sues related to the algorithms, instead of dealing with the low-

level details of the communications among boards or data transfers

between the cores and the embedded FPGA. Also we show that

this easiness in programmability is joined by competitive perfor-

mance and lower energy consumption when compared to standard

processors. 

The key features of the project presented in this paper are the

possibility to modularly enhance the capabilities of the board, im-

prove its interface with the physical world, flexibly reconfiguring

it for accelerating specific functions, while providing energy effi-

ciency and easy programmability. 

Acknowledgment 

We thankfully acknowledge the support of the European Union

H2020 program through the AXIOM project (grant ICT-01-2014 GA

645496 ), the Spanish Government, through the Severo Ochoa pro-

gram (grant SEV2015-0493) the Spanish Ministry of Science and

Technology ( TIN2015-65316-P ) and the Generalitat de Catalunya

( MPEXPAR, 2014-SGR-1051 and 2014-SGR-1272). 

References 

[1] A. Goransson , D.C. Ruiz , Professional Android Open Accessory Programming

with Arduino, John Willey & Sons, 2013 . 
[2] S. Monk , Programming Arduino Next Steps: Going Further with Sketches, 1st,

McGraw-Hill Professional, USA, 2013 . 

[3] E. Ayguadé, R.M. Badía , D. Cabrera , A. Durán , M. González , F. Igual , D. Jiménez ,
J. Labarta , X. Martorell , R. Mayo , J.M. Pérez , E.S. Quintana-Orti , A proposal to

extend the openMP tasking model for heterogeneous architectures, in: IWOMP,
5568, 2009, pp. 154–167 . 

[4] V. Pillet, J. Labarta, T. Cortes, S. Girona, PARAVER: a Tool to Visualize and An-
alyze Parallel Code Technical Report UPC-CEPBA-95-03, European Center for

Parallelism of Barcelona (CEPBA), Universitat Politècnica de Catalunya (UPC),

1995. 
[5] R. Ferrer, S. Royuela, D. Caballero, A. Durán, X. Martorell, E. Ayguadé, Mer-

curium: design decisions for a s2s compiler, Cetus Users and Compiler Infas-
tructure Workshop in conjunction with PACT 2011, 2011. 

[6] R. Giorgi, A. Scionti, A scalable thread scheduling co-processor based on data-
flow principles, ELSEVIER Future Gener. Comput. Syst. (0) (2015) 1–10, doi: 10.

1016/j.future.2014.12.014 . 

[7] R. Giorgi, iTERAFLUX: exploiting dataflow parallelism in teradevices, in: ACM
Computing Frontiers, 2012, pp. 303–304, doi: 10.1145/2212908.2212959 . 

[8] N. Ho, A. Mondelli, A. Scionti, M. Solinas, A. Portero, R. Giorgi, Enhancing
an x86_64 multi-core architecture with data-flow execution support, in: ACM

Proc. of Computing Frontiers, 2015, pp. 1–2, doi: 10.1145/2742854.2742896 . 
[9] R. Giorgi , et al. , TERAFLUX: harnessing dataflow in next generation teradevices,

Microprocess. Microsyst. 38 (8, Part B) (2014) 976–990 . 
[10] R. Giorgi, P. Faraboschi, An introduction to df-threads and their execution

model, in: IEEE MPP, 2014, pp. 60–65, doi: 10.1109/SBAC-PADW.2014.30 . 

[11] G. Burresi , R. Giorgi , A field experience for a vehicle recognition system using
magnetic sensors, in: IEEE MECO, 2015, pp. 1–6 . 

[12] N. Puzovic, S. McKee, R. Eres, A. Zaks, P. Gai, W. S., R. Giorgi, A multi-pronged
approach to benchmark characterization, in: IEEE CLUSTER, 2010, pp. 1–4,

doi: 10.1109/CLUSTERWKSP.2010.5613090 . 
Please cite this article as: C. Álvarez et al., The AXIOM 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 
[13] A. Scionti , S. Kavvadias , R. Giorgi , Dynamic power reduction in self-adap-
tive embedded systems through benchmark analysis, in: IEEE MECO, 2014,

pp. 62–65 . 
[14] J. Planas , R. Badía , E. Ayguadé, J. Labarta , Hierarchical task-based programming

with StarSs, Int. J. High Perform. Comput. Appl. 23 (3) (2009) 284–299 . 
[15] F. Yazdanpanah, C. Álvarez-Martínez, D. Jiménez-González, Y. Etsion, Hybrid

dataflow/von-neumann architectures, IEEE Trans. Parallel Distrib. Syst. 25 (6)
(2014) 1489–1509, doi: 10.1109/TPDS.2013.125 . 

[16] L. Verdoscia, R. Vaccaro, R. Giorgi, A clockless computing system based on

the static dataflow paradigm, in: Proc. IEEE Int.l Workshop on Data-Flow Ex-
ecution Models for Extreme Scale Computing (DFM-2014), 2014, pp. 30–37,

doi: 10.1109/DFM.2014.10 . 
[17] L. Verdoscia, R. Vaccaro, R. Giorgi, A matrix multiplier case study for an evalua-

tion of a configurable dataflow-machine, in: ACM CF’15 - LP-EMS, 2015, pp. 1–
6, doi: 10.1145/2742854.2747287 . 

[18] M. Solinas , et al. , The TERAFLUX project: Exploiting the dataflow paradigm in

next generation teradevices, in: DSD, 2013, pp. 272–279 . 
[19] N. Ho, A. Portero, M. Solinas, A . Scionti, A . Mondelli, P. Faraboschi, R. Giorgi,

Simulating a multi-core x86_64 architecture with hardware isa extension sup-
porting a data-flow execution model, in: IEEE Proceedings of the AIMS-2014,

Madrid, Spain, 2014, pp. 264–269, doi: 10.1109/AIMS.2014.41 . 
[20] R. Giorgi , Accelerating haskell on a dataflow architecture: a case study includ-

ing transactional memory, in: CEA, 2015a, pp. 91–100 . 

[21] R. Giorgi , Transactional memory on a dataflow architecture for accelerating
haskell, WSEAS Trans. Comput. 14 (2015b) 794–805 . 

[22] S. Weis , A. Garbade , J. Wolf , B. Fechner , A. Mendelson , R. Giorgi , T. Ungerer , A
fault detection and recovery architecture for a teradevice dataflow system, in:

IEEE DFM), 2011, pp. 38–44 . 
[23] S. Weis , et al. , Architectural support for fault tolerance in a teradevice dataflow

system, Springer Int’l J. Parallel Program. (2014) 1–25 . 

[24] A. Filgueras, E. Gil, D. Jiménez-González, C. Álvarez, X. Martorell, J. Langer,
J. Noguera, K. Vissers, Ompss@zynq all-programmable soc ecosystem, in:

Proceedings of the 2014 ACM/SIGDA International Symposium on Field-
programmable Gate Arrays, in: FPGA ’14, ACM, New York, NY, USA, 2014,

pp. 137–146, doi: 10.1145/2554688.2554777 . 
[25] A. Filgueras, E. Gil, C. Álvarez, D. Jiménez-González, X. Martorell, J. Langer,

J. Noguera, Heterogeneous tasking on smp/fpga socs: The case of ompss and

the zynq, in: 2013 IFIP/IEEE 21st International Conference on Very Large Scale
Integration (VLSI-SoC), 2013, pp. 290–291, doi: 10.1109/VLSI-SoC.2013.6673293 .

[26] J.R. Villarreal , A. Park , W.A. Najjar , R. Halstead , Designing modular hardware
accelerators in c with roccc 2.0., in: R. Sass, R. Tessier (Eds.), FCCM, IEEE Com-

puter Society, 2010, pp. 127–134 . 
[27] W.A. Najjar , J.R. Villarreal , Fpga code accelerators - the compiler perspective,

in: DAC, 2013, p. 141 . 

[28] A. Canis, J. Choi, M. Aldham, V. Zhang, A. Kammoona, J.H. Anderson, S. Brown,
T. Czajkowski, Legup: High-level synthesis for fpga-based processor/accelerator

systems, in: Proceedings of the 19th ACM/SIGDA International Symposium on
Field Programmable Gate Arrays, in: FPGA ’11, ACM, New York, NY, USA, 2011,

pp. 33–36, doi: 10.1145/1950413.1950423 . 
[29] Altera, Corp., Nios II C2H Compiler User Guide, 2009. URL: www.altera.com 

[30] PGI Accelerator Programming Model for Fortran & C, The Portland Group, 2010.
[31] R. Dolbeau , S. Bihan , F. Bodin , HMPP: a hybrid multi-core parallel program-

ming environment, First Workshop on General Purpose Processing on Graphics

Processing Units, 2007 . 
[32] J. Bueno , L. Martinell , A. Durán , M. Farreras , X. Martorell , R.M. Badía ,

E. Ayguadé, J. Labarta , Productive cluster programming with ompss, in: Pro-
ceedings of the 17th International Conference on Parallel Processing - Volume

Part I, Euro-Par’11, Springer-Verlag, Berlin, Heidelberg, 2011, pp. 555–566 . 
[33] UPC Consortium, UPC Language Specifications v1.2, Report Number: LBNL-

59208, 2005. 

[34] P. Charles, C. Grothoff, V. Saraswat, C. Donawa, A. Kielstra, K. Ebcioglu, C. von
Praun, V. Sarkar, X10: an object-oriented approach to non-uniform clus-

ter computing, SIGPLAN Not. 40 (10) (2005) 519–538, doi: 10.1145/1103845.
1094852 . 

[35] B. Chamberlain, D. Callahan, H. Zima, Parallel programmability and the chapel
language, Int. J. High Perform. Comput. Appl. 21 (3) (2007) 291–312, doi: 10.

1177/1094342007078442 . 

[36] V. Marjanovic, J. Labarta, E. Ayguadé, M. Valero, Effective communication and
computation overlap with hybrid mpi/smpss, SIGPLAN Not. 45 (5) (2010) 337–

338, doi: 10.1145/1837853.1693502 . 
[37] Khronos OpenCL Working Group, The OpenCL Specification, version 1.2, 2011.

URL https://www.khronos.org/registry/cl/specs/opencl-1.2.pdf 
[38] S. Kaxiras , D. Klaftenegger , M. Norgren , A. Ros , K.F. Sagonas , Turning central-

ized coherence and distributed critical-section execution on their head: A new

approach for scalable distributed shared memory, in: Proc. of HPDC, 2015,
pp. 3–14 . 

[39] Jiajia, http://www-users.cs.umn.edu/ ∼tiane/paper/dist.htm . 
[40] Omni/scash http://www.pcs.cs.tsukuba.ac.jp/omni-compiler/doc/omniscash.

html . 
[41] M. Hess , G. Jost , M. Müller , R. Rühle , Experiences using OpenMP based on

Compiler Directed Software DSM on a PC Cluster, Workshop on OpenMP Ap-

plications and Tools (WOMPAT’02, 2002 . 
[42] The jump software dsm system, http://www.snrg.cs.ku.hk/srg/html/jump.htm . 

[43] C.L.W.B. Cheung , K. Hwang , Jump-dp: A software dsm system with low-latency
communication support, PDPTA, 20 0 0 . 

[44] Parade, http://peace.snu.ac.kr/researc/parade/ . 
software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.13039/501100007601
http://dx.doi.org/10.13039/501100006280
http://dx.doi.org/10.13039/501100002809
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0001
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0001
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0001
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0002
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0002
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0003
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0003
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0003
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0003
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0003
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0003
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0003
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0003
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0003
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0003
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0003
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0003
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0003
http://dx.doi.org/10.1016/j.future.2014.12.014
http://dx.doi.org/10.1145/2212908.2212959
http://dx.doi.org/10.1145/2742854.2742896
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0007
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0007
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0007
http://dx.doi.org/10.1109/SBAC-PADW.2014.30
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0009
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0009
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0009
http://dx.doi.org/10.1109/CLUSTERWKSP.2010.5613090
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0011
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0011
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0011
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0011
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0012
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0012
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0012
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0012
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0012
http://dx.doi.org/10.1109/TPDS.2013.125
http://dx.doi.org/10.1109/DFM.2014.10
http://dx.doi.org/10.1145/2742854.2747287
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0016
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0016
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0016
http://dx.doi.org/10.1109/AIMS.2014.41
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0018
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0018
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0019
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0019
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0020
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0020
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0020
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0020
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0020
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0020
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0020
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0020
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0021
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0021
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0021
http://dx.doi.org/10.1145/2554688.2554777
http://dx.doi.org/10.1109/VLSI-SoC.2013.6673293
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0024
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0024
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0024
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0024
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0024
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0025
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0025
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0025
http://dx.doi.org/10.1145/1950413.1950423
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0027
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0027
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0027
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0027
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0028
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0028
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0028
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0028
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0028
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0028
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0028
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0028
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0028
http://dx.doi.org/10.1145/1103845.1094852
http://dx.doi.org/10.1177/1094342007078442
http://dx.doi.org/10.1145/1837853.1693502
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0032
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0032
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0032
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0032
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0032
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0032
http://www-users.cs.umn.edu/~tiane/paper/dist.htm
http://www.pcs.cs.tsukuba.ac.jp/omni-compiler/doc/omniscash.html
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0033
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0033
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0033
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0033
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0033
http://www.snrg.cs.ku.hk/srg/html/jump.htm
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0034
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0034
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0034
http://peace.snu.ac.kr/researc/parade/
http://dx.doi.org/10.1016/j.micpro.2016.07.002
https://www.researchgate.net/publication/233730794_TERAFLUX_Exploiting_dataflow_parallelism_in_teradevices?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/233730794_TERAFLUX_Exploiting_dataflow_parallelism_in_teradevices?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/276877507_Enhancing_an_x86_64_multi-core_architecture_with_data-flow_execution_support?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/276877507_Enhancing_an_x86_64_multi-core_architecture_with_data-flow_execution_support?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/276877507_Enhancing_an_x86_64_multi-core_architecture_with_data-flow_execution_support?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/220457354_Hierarchical_Task-Based_Programming_With_StarSs?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/220457354_Hierarchical_Task-Based_Programming_With_StarSs?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/262268980_Hybrid_Dataflowvon-Neumann_Architectures?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/262268980_Hybrid_Dataflowvon-Neumann_Architectures?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/262268980_Hybrid_Dataflowvon-Neumann_Architectures?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/257944928_The_TERAFLUX_project_Exploiting_the_dataflow_paradigm_in_next_generation_teradevices?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/257944928_The_TERAFLUX_project_Exploiting_the_dataflow_paradigm_in_next_generation_teradevices?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261718276_TERAFLUX_Harnessing_dataflow_in_next_generation_teradevices?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261718276_TERAFLUX_Harnessing_dataflow_in_next_generation_teradevices?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/300655707_A_matrix_multiplier_case_study_for_an_evaluation_of_a_configurable_dataflow-machine?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/300655707_A_matrix_multiplier_case_study_for_an_evaluation_of_a_configurable_dataflow-machine?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/300655707_A_matrix_multiplier_case_study_for_an_evaluation_of_a_configurable_dataflow-machine?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/220875714_A_Proposal_to_Extend_the_OpenMP_Tasking_Model_for_Heterogeneous_Architectures?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/220875714_A_Proposal_to_Extend_the_OpenMP_Tasking_Model_for_Heterogeneous_Architectures?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/220875714_A_Proposal_to_Extend_the_OpenMP_Tasking_Model_for_Heterogeneous_Architectures?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/220875714_A_Proposal_to_Extend_the_OpenMP_Tasking_Model_for_Heterogeneous_Architectures?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261847395_OmpSsZynq_all-programmable_SoC_ecosystem?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261847395_OmpSsZynq_all-programmable_SoC_ecosystem?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261847395_OmpSsZynq_all-programmable_SoC_ecosystem?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261847395_OmpSsZynq_all-programmable_SoC_ecosystem?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261847395_OmpSsZynq_all-programmable_SoC_ecosystem?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261021506_Heterogeneous_tasking_on_SMPFPGA_SoCs_The_case_of_OmpSs_and_the_Zynq?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261021506_Heterogeneous_tasking_on_SMPFPGA_SoCs_The_case_of_OmpSs_and_the_Zynq?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261021506_Heterogeneous_tasking_on_SMPFPGA_SoCs_The_case_of_OmpSs_and_the_Zynq?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261021506_Heterogeneous_tasking_on_SMPFPGA_SoCs_The_case_of_OmpSs_and_the_Zynq?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/258139318_Parallel_Programmability_and_the_Chapel_Language?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/258139318_Parallel_Programmability_and_the_Chapel_Language?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/258139318_Parallel_Programmability_and_the_Chapel_Language?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221224896_LegUp_High-level_synthesis_for_FPGA-based_processoraccelerator_systems?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221224896_LegUp_High-level_synthesis_for_FPGA-based_processoraccelerator_systems?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221224896_LegUp_High-level_synthesis_for_FPGA-based_processoraccelerator_systems?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221224896_LegUp_High-level_synthesis_for_FPGA-based_processoraccelerator_systems?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221224896_LegUp_High-level_synthesis_for_FPGA-based_processoraccelerator_systems?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/277669226_Turning_Centralized_Coherence_and_Distributed_Critical-Section_Execution_on_their_Head_A_New_Approach_for_Scalable_Distributed_Shared_Memory?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/277669226_Turning_Centralized_Coherence_and_Distributed_Critical-Section_Execution_on_their_Head_A_New_Approach_for_Scalable_Distributed_Shared_Memory?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/277669226_Turning_Centralized_Coherence_and_Distributed_Critical-Section_Execution_on_their_Head_A_New_Approach_for_Scalable_Distributed_Shared_Memory?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/277669226_Turning_Centralized_Coherence_and_Distributed_Critical-Section_Execution_on_their_Head_A_New_Approach_for_Scalable_Distributed_Shared_Memory?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/277669226_Turning_Centralized_Coherence_and_Distributed_Critical-Section_Execution_on_their_Head_A_New_Approach_for_Scalable_Distributed_Shared_Memory?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/277669226_Turning_Centralized_Coherence_and_Distributed_Critical-Section_Execution_on_their_Head_A_New_Approach_for_Scalable_Distributed_Shared_Memory?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221173032_Designing_Modular_Hardware_Accelerators_in_C_with_ROCCC_20?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221173032_Designing_Modular_Hardware_Accelerators_in_C_with_ROCCC_20?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221173032_Designing_Modular_Hardware_Accelerators_in_C_with_ROCCC_20?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221643570_Effective_Communication_and_Computation_Overlap_with_Hybrid_MPISMPSs?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221643570_Effective_Communication_and_Computation_Overlap_with_Hybrid_MPISMPSs?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221643570_Effective_Communication_and_Computation_Overlap_with_Hybrid_MPISMPSs?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/241628213_A_Fault_Detection_and_Recovery_Architecture_for_a_Teradevice_Dataflow_System?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/241628213_A_Fault_Detection_and_Recovery_Architecture_for_a_Teradevice_Dataflow_System?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/241628213_A_Fault_Detection_and_Recovery_Architecture_for_a_Teradevice_Dataflow_System?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/305113561_Accelerating_haskell_on_a_dataflow_architecture_A_case_study_including_transactional_memory?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/305113561_Accelerating_haskell_on_a_dataflow_architecture_A_case_study_including_transactional_memory?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/273140198_A_Clockless_Computing_System_Based_on_the_Static_Dataflow_Paradigm?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/273140198_A_Clockless_Computing_System_Based_on_the_Static_Dataflow_Paradigm?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/273140198_A_Clockless_Computing_System_Based_on_the_Static_Dataflow_Paradigm?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/273140198_A_Clockless_Computing_System_Based_on_the_Static_Dataflow_Paradigm?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261355859_Productive_Programming_of_GPU_Clusters_with_OmpSs?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261355859_Productive_Programming_of_GPU_Clusters_with_OmpSs?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261355859_Productive_Programming_of_GPU_Clusters_with_OmpSs?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/261355859_Productive_Programming_of_GPU_Clusters_with_OmpSs?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/240064180_HMPP_A_hybrid_multi-core_parallel_programming_environment?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/240064180_HMPP_A_hybrid_multi-core_parallel_programming_environment?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/240064180_HMPP_A_hybrid_multi-core_parallel_programming_environment?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/2306226_PARAVER_A_tool_to_visualize_and_analyze_parallel_code?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/2306226_PARAVER_A_tool_to_visualize_and_analyze_parallel_code?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/2306226_PARAVER_A_tool_to_visualize_and_analyze_parallel_code?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/2306226_PARAVER_A_tool_to_visualize_and_analyze_parallel_code?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/2465694_JUMP-DP_A_Software_DSM_System_with_Low-Latency_Communication_Support?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/2465694_JUMP-DP_A_Software_DSM_System_with_Low-Latency_Communication_Support?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/305113486_Simulating_a_multi-core_x86_64_architecture_with_hardware_isa_extension_supporting_a_data-flow_execution_model?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/305113486_Simulating_a_multi-core_x86_64_architecture_with_hardware_isa_extension_supporting_a_data-flow_execution_model?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/305113486_Simulating_a_multi-core_x86_64_architecture_with_hardware_isa_extension_supporting_a_data-flow_execution_model?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/305113486_Simulating_a_multi-core_x86_64_architecture_with_hardware_isa_extension_supporting_a_data-flow_execution_model?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/308861942_A_field_experience_for_a_vehicle_recognition_system_using_magnetic_sensors?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/308861942_A_field_experience_for_a_vehicle_recognition_system_using_magnetic_sensors?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/260767373_FPGA_Code_Accelerators_-_the_Compiler_Perspective?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/260767373_FPGA_Code_Accelerators_-_the_Compiler_Perspective?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221321632_X10_An_object-oriented_approach_to_Non-Uniform_Cluster_Computing?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221321632_X10_An_object-oriented_approach_to_Non-Uniform_Cluster_Computing?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221321632_X10_An_object-oriented_approach_to_Non-Uniform_Cluster_Computing?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/221321632_X10_An_object-oriented_approach_to_Non-Uniform_Cluster_Computing?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/307684523_An_Introduction_to_DF-Threads_and_their_Execution_Model?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/307684523_An_Introduction_to_DF-Threads_and_their_Execution_Model?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/270595411_A_scalable_thread_scheduling_co-processor_based_on_data-flow_principles?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/270595411_A_scalable_thread_scheduling_co-processor_based_on_data-flow_principles?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/270595411_A_scalable_thread_scheduling_co-processor_based_on_data-flow_principles?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/305113740_Transactional_memory_on_a_dataflow_architecture_for_accelerating_haskell?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/305113740_Transactional_memory_on_a_dataflow_architecture_for_accelerating_haskell?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/2482395_Experiences_using_OpenMP_based_on_Compiler_Directed_Software_DSM_On_a_PC_Cluster?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/2482395_Experiences_using_OpenMP_based_on_Compiler_Directed_Software_DSM_On_a_PC_Cluster?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/2482395_Experiences_using_OpenMP_based_on_Compiler_Directed_Software_DSM_On_a_PC_Cluster?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==


C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 11 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

[  

[  
 

 

 

[  

[  
 

[  

 

 

 

 

45] Y. Kee , J. Kim , S. Ha , ParADE: an OpenMP Programming Environment for SMP
Cluster Systems, Supercomputing 2003 (SC’03), 2003 . 

46] J.J. Costa , T. Cortes , X. Martorell , E. Ayguadé, J. Labarta , Paper running openmp
applications efficiently on an everything-shared sdsm, (JPDC) 6 (5) (2006)

647—658 . 
[47] Y. Taigman , M. Yang , M. Ranzato , L. Wolf , Deepface: Closing the gap to hu-

man-level performance in face verification, in: IEEE Conference on Computer
Vision and Pattern Recognition, IEEE, 2014, pp. 1701–1708 . 

48] I. Huerta , C. Fernández , C. Segura , J. Hernando , A. Prati , A deep analysis on age

estimation, Pattern Recognit. Lett. 68 (2015) 239–249 . 
Please cite this article as: C. Álvarez et al., The AXIOM 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 
49] A . Angelova , A . Krizhevsky , V. Vanhoucke , A . Ogale , D. Ferguson , Real-time
pedestrian detection with deep network cascades, in: Proceedings of BMVC

2015, 2015 . 
50] Y. Jia , E. Shelhamer , J. Donahue , S. Karayev , J. Long , R. Girshick , S. Guadar-

rama , T. Darrell , Caffe: convolutional architecture for fast feature embedding,
in: Proceedings of the ACM International Conference on Multimedia, ACM,

2014, pp. 675–678 . 
[51] S. Chetlur, C. Woolley, P. Vandermersch, J. Cohen, J. Tran, B. Catanzaro,

E. Shelhamer, cuDNN: efficient primitives for deep learning, arXiv preprint

arXiv:1410.0759, 2014. URL http://arxiv.org/abs/1410.0759 
software layers, Microprocessors and Microsystems (2016), 

http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0035
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0035
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0035
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0035
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0036
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0036
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0036
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0036
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0036
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0036
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0037
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0037
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0037
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0037
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0037
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0038
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0038
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0038
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0038
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0038
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0038
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0039
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0039
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0039
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0039
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0039
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0039
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0040
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0040
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0040
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0040
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0040
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0040
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0040
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0040
http://refhub.elsevier.com/S0141-9331(16)30085-0/sbref0040
http://dx.doi.org/10.1016/j.micpro.2016.07.002
https://www.researchgate.net/publication/263564119_DeepFace_Closing_the_Gap_to_Human-Level_Performance_in_Face_Verification?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/263564119_DeepFace_Closing_the_Gap_to_Human-Level_Performance_in_Face_Verification?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/263564119_DeepFace_Closing_the_Gap_to_Human-Level_Performance_in_Face_Verification?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/264979485_Caffe_Convolutional_Architecture_for_Fast_Feature_Embedding?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/264979485_Caffe_Convolutional_Architecture_for_Fast_Feature_Embedding?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/264979485_Caffe_Convolutional_Architecture_for_Fast_Feature_Embedding?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/264979485_Caffe_Convolutional_Architecture_for_Fast_Feature_Embedding?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/278743159_A_Deep_Analysis_on_Age_Estimation?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/278743159_A_Deep_Analysis_on_Age_Estimation?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/266560893_cuDNN_Efficient_Primitives_for_Deep_Learning?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/266560893_cuDNN_Efficient_Primitives_for_Deep_Learning?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/266560893_cuDNN_Efficient_Primitives_for_Deep_Learning?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/220378348_Running_OpenMP_applications_efficiently_on_an_everything-shared_SDSM?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/220378348_Running_OpenMP_applications_efficiently_on_an_everything-shared_SDSM?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/220378348_Running_OpenMP_applications_efficiently_on_an_everything-shared_SDSM?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/4222097_ParADE_An_OpenMP_programming_environment_for_SMP_cluster_systems?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==
https://www.researchgate.net/publication/4222097_ParADE_An_OpenMP_programming_environment_for_SMP_cluster_systems?el=1_x_8&enrichId=rgreq-f62192b4e239e67274de139d923f0175-XXX&enrichSource=Y292ZXJQYWdlOzMwNTExMTU4NjtBUzo0MDgzNDcxMzczMzEyMDJAMTQ3NDM2ODk1MjgwOA==


12 C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

mputer Science from the Technical University of Catalunya (UPC) in 1998 and 2007, re- 
stant Professor in the Computer Architecture Department at UPC, BarcelonaTech, and is 

mming Models Department at BSC-CNS. His research interests cover the areas of paral- 

utions for high-performance multiprocessor systems. He has co-authored more than 40 
e is currently advising 1 PhD student and has co-advised 2 PhD theses. He has been 

the TERAFLUX and AXIOM European projects. 

ommunications in 1986 and the Ph.D. degree in Computer Science in 1989, both from the 

987 Prof. Ayguad has been lecturing at the Computer Science School (FIB) and Telecom- 
rently, and since 1997, he is full professor of the Computer Architecture Department at 

ate and graduate) courses related with computer organization and architecture, parallel 
uad is also involved in the Computer Architecture and Technology PhD Program at UPC, 

topics related with his research interests: multicore architectures, parallel programming 
 HPC architectures. In these research topics, Prof. Ayguad has published more than 300 

e framework of the European Union and research collaborations with companies related 

 Samsung). Currently Prof. Ayguad is associated director for research on the Computer 
nter (BSC-CNS), the National Center for Supercomputing in Spain located in Barcelona. 

ience at the Barcelona School of Informatics (FIB) of Universitat Politècnica de Catalunya 

r in High Performance Computing from the same School. Currently, he is working at the 
 Center - Centro Nacional de Supercomputacin (BSC-CNS). 

ience from the Technical University of Catalonia (UPC). He became involved in research 
European Center of Parallelism of Barcelona (CEPBA) working with Software Distributed 

 researcher at the Barcelona Supercomputing Center (BSC) and continued his work on 

is thesis, which provided the OmpSs programming model with support for clusters of 
en applied to different research projects such as the Mont-Blanc2 project. His current 

ools to ease the complexity of developing applications for modern HPC systems. 

uter science at the Barcelona School of Informatics (FIB) of Universitat Politècnica de 

 studying a Master degree in High Performance Computing at the same school, while is 
upercomputing Center - Centro Nacional de Supercomputacin (BSC-CNS). 

at Universitat Politècnica de Catalunya - BarcelonaTech (UPC) in 2012. Currently working 
puting Center and particimating in the AXIOM European project. His research interests 

s for high performance computing and programmability of those. 
Carlos Álvarez received the M.S. and Ph.D. degrees in Co
spectively. He currently holds a position as Tenured Assi

a associated researcher at the Computer Sciences -Progra

lel architectures, runtime systems and reconfigurable sol
publications in international journals and conferences. H

participating in the HiPEAC Network of Excellence and in 

Eduard Ayguadé received the Engineering degree in Telec

Universitat Politècnica de Catalunya (UPC), Spain. Since 1
munications Engineering (ETSETB) both in Barcelona. Cur

UPC. Prof. Ayguad has lectured a number of (undergradu
programming models and their implementation. Prof. Ayg

where he has (co-)advised more than 20 PhD thesis, in 
models and their architectural support and compilers for

papers and participated in several research projects in th

with HPC technologies (IBM, Intel, Nvidia, Microsoft and
Sciences Department at the Barcelona Supercomputing Ce

Jaume Bosch completed engineers degree in computer sc

- BarcelonaTech (UPC) in 2015 and he is studding a Maste
Programming Models Group of Barcelona Supercomputing

Javier Bueno Hedo holds a PhD. degree in Computer Sc
in 2004, when he started as a part-time student in the 

Memory Systems. In 2006 he became a full-time junior

distributed systems. From 2010 to 2015 he worked on h
multi-cores and clusters of GPUs. This work has also be

research aims to produce new programming models and t

Artem Cherkashin completed engineers degree in comp

Catalunya - BarcelonaTech (UPC) in 2015. Currently, he is
working at the Programming Models Group of Barcelona S

Antonio Filgueras received a degree in computer science 
at the Programming Models group of Barcelona Supercom

are focused on heterogeneous and reconfigurable solution
Please cite this article as: C. Álvarez et al., The AXIOM software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 

http://dx.doi.org/10.1016/j.micpro.2016.07.002


C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 13 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

rees in Computer Science from the Technical University of Catalunya (UPC) in 1997 and 

ed Assistant Professor in the Computer Architecture Department at UPC, BarcelonaTech, 
Programming Models Department at BSC-CNS. His research interests cover the areas of 

onfigurable solutions for high-performance multiprocessor systems. Dr. Jimenez-Gonzalez 

 journals and conferences. He is currently co-advising 1 PhD students and has co-advised 
etwork of Excellence and in the SARC, ACOTES, TERAFLUX, AXIOM and PRACE European 

 Computer Science from the Technical University of Catalunya (UPC) in 1991 and 1999, 

ems, parallel runtime systems and OS administration. He has been an associate professor 
1. His research interests cover the areas of operating systems, runtime systems, compilers 

stems. Dr. Martorell has participated in several long-term research projects with other 
 the European Union ESPRIT, IST and FET programs. He spent one year working with the 

oauthored more than 60 publications in international journals and conferences. He has 

 3 PhD students. He is currently the Manager of the Parallel Programming Models team 
icipating in the HiPEAC Network of Excellence and in the SARC, ACOTES, and Intone, POP, 

OM European projects. 

Professor at the Universitat Politecnica de Catalunya (UPC), Barcelona, Spain, and Senior 

), serving as manager of the Accelerators for High Performance Computing group. He 
urrent interests include: GPGPU computing, multi-core computer architectures, hardware 

ry management and runtime optimizations. He is also doing research on massively par- 
versity of Illinois (IMPACT Research Group). Prof. Navarro is a member of IEEE, the IEEE 

ce in 2015 from the Technical University of Catalunya (UPC). Currently he is studying a 

e Programming Models group at Barcelona Supercomputing Center (BSC-CNS) within the 
d on parallel architectures, multiprocessor systems, and heterogeneous and reconfigurable 

ir use on bioinformatics applications. 

egree) and M.Sc degree respectively from the Electronic and Computer Engineering de- 

2007, he joined the Computer Engineering department of the Delft University of Tech- 
011, he joined the Computer Architecture and VLSI Systems group at the Foundation for 

re he is working as a post-doc researcher for national and international research projects. 
stems, Computer Architecture, and Reconfigurable computing. 

 of the Electronic and Computing Engineering Department, Technical University of Crete 
 Systems (CARV) Laboratory of the Institute of Computer Science, FORTH in Greece. He 

epartment of Computer Science, University of Crete in 1989 and M.Sc. and Ph.D. degrees 
 Science, University of Wisconsin-Madison in 1991 and 1995 respectively. His research 

e, where he investigates the Design and Implementation of High-Performance and Cost- 

ble Computing. 
Daniel Jiménez-González received the M.S. and Ph.D. deg

2004, respectively. He currently holds a position as Tenur
and is a associated researcher at the Computer Sciences-

parallel architectures, runtime systems, compilers and rec

has coauthored more than 40 publications in international
2 PhD student. He has been participating in the HiPEAC N

projects. 

Xavier Martorell received the M.S. and Ph.D. degrees in

respectively. Since 1992 he has lectured on operating syst
in the Computer Architecture Department at UPC since 200

and applications for high-performance multiprocessor sy
universities and industries, primarily in the framework of

BG/L team in the IBM Watson Research Center. He has c

co-advised three Ph.D. theses and he is currently advising
at the Barcelona Supercomputing Center. He has been part

ENCORE, MontBlanc (I and II), DEEP/DEEP-ER and the AXI

Nacho Navarro (1958–2016, in memoriam) is Associate 

Researcher at the Barcelona Supercomputing Center (BSC
holds a Ph.D. degree in Computer Science from UPC. His c

accelerators, dynamic reconfigurable logic support, memo
allel accelerators like GPUs in collaboration with the Uni

Computer Society, the ACM and the HiPEAC NoE. 

Miquel Vidal received the B.S. degree in Computer Scien

M.S. in High-Performance Computing while working at th
AXIOM European project. His research interests are focuse

solutions for high-performance computing; as well as the

Dimitris Theodoropoulos obtained his Diploma (5-year d

partment at the Technical University of Crete, Greece. In 
nology, the Netherlands, where he received his PhD. In 2

Research and Technology - Hellas (FORTH) in Greece, whe
His research interests are in the domains of Embedded Sy

Dionisios Pnevmatikatos is a Professor and former Chair
and a Researcher at the Computer Architecture and VLSI

received his B.Sc. degree in Computer Science from the D
in Computer Science from the Department of Computer

interests are in the broader area of Computer Architectur

Effective Systems, Reliable System Design, and Reconfigura
Please cite this article as: C. Álvarez et al., The AXIOM software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 

http://dx.doi.org/10.1016/j.micpro.2016.07.002


14 C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

at SECO. He graduated in electronic engineering at University of Florence in 2006 with a 

used on the implementation of an USB macrocell on FPGA. He joined SECO in 2006 and is 
g on industrial applications. Davide contributed to hardware development of the systems 

s at BSC and to CARMA and Kayla platforms aimed to develop CUDA based applications 

er Science from Universitat Politècnica de Catalunya (UPC) in 2006, and an M.S. degree 
ted his professional career in 2005 working as a consultant in performance monitoring 

logy Centre where he held a research position on online banking cybercrime mitigation 
ading the GPU parallelization of several products. He has published several papers in 

tents. His research interests include computer architecture, GPU computing and malware 

 Eng. and M.S. in Language and Speech from the Technical University of Catalonia (UPC) 

I from the Autonomous University of Barcelona (UAB) in 2008, where he obtained his 

 Ph.D. Award. He has published more than 40 scientific articles in international journals 
 Herta Security. His research interests include biometrics, computer vision, and machine 

e and video. 

communication Engineering at the Universitat Politècnica de Catalunya (UPC) in 2003, 

-Berlin) in 2003 and the Ph.D. cum laude degree in Computer Science from the UPC 
n in 2003 and in UPC from 2005 to 2011. Later he joined the company Herta Security 

novation until 2015. Currently he is working in Telefnica I+D as a speech scientist. He 

ree EU research projects, and has published more than twenty scientific papers in peer- 
nces. His research interests include speaker localization and tracking, multimedia signal 

 degrees in Telecommunication Engineering from the Technical University of Catalonia, 
e has also received the B.A. degree in Business Administration by the Open University of 

In 20 0 0 he worked for Robert Bosch, GmbH, in Hildesheim (Germany). In 2001, he joined 
e was the R&D Manager. He founded Herta Security in 2009 and became the CEO of the 

rent magazines and workshops, and he holds three patents. His main research interests 

etric systems and applications. 

lecommunication engineering from the Technical University of Catalonia (UPC), Barcelona, 
 been with the Department of Signal Theory and Communications, UPC, where he is a 

uage and Speech (TALP). He was a Visiting Researcher at the Panasonic Speech Technol- 
ear 20 0220 03. His research interests include robust speech analysis, speech recognition, 

ultimodal interfaces. He is the author or coauthor of about two hundred publications in 
these topics. He has led the UPC team in several European, Spanish and Catalan projects. 

rd of UPC. 
Davide Catani is R&D manager for ARM-based platforms 

graduation thesis developed at Cesvit Microelettronica foc
developing ARM-based systems since 2010, mainly focusin

used to build Tibidabo and Pedraforca ARM-based cluster

on ARM-based systems. 

David Oro received the B.S, and M.S. degrees in Comput
in Computer Architecture in 2011, also from UPC. He star

solutions. In 2009, he joined the Barcelona Digital Techno
for CaixaBank. Currently, he works for Herta Security le

international peer-reviewed conferences and holds two pa
analysis. 

Carles Fernández received his B.S. in Telecommunication

in 2005. He received an M.S. in Computer Vision and A

Ph.D. cum laude in 2010, receiving the 2010 Extraordinary
and conferences. Currently he leads the research team at

learning, particularly unconstrained facial analysis in imag

Carlos Segura received the B.S. and M.S. degrees in Tele

the M.S. degree at the Technical University of Berlin (TU
in 2011. He worked as a research fellow at the TU-Berli

under the Torres Quevedo program as the Director of In

has participated in three national research projects and th
reviewed international journals and international confere

processing, computer vision and machine learning. 

Javier Rodríguez Saeta received the B.S., M.S. and Ph.D.
UPC, Barcelona (Spain), in 20 0 0 and 20 05, respectively. H

Catalonia (UOC), and the MBA by ESADE Business School. 
Biometric Technologies, S.L., in Barcelona (Spain), where h

company. He has published more than 20 papers in diffe

include all issues related to innovation, security and biom

Javier Hernando received the M.S. and Ph.D. degrees in te
Spain, in 1988 and 1993, respectively. Since 1988, he has

Professor and a member of the Research Center for Lang
ogy Laboratory, Santa Barbara, CA, during the academic y

speaker verification and localization, oral dialogue, and m
book chapters, review articles, and conference papers on 

Prof. Hernando received the 1993 Extraordinary Ph.D. Awa
Please cite this article as: C. Álvarez et al., The AXIOM software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 

http://dx.doi.org/10.1016/j.micpro.2016.07.002


C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 15 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

r Engineering from the University of Pisa in 2003. In 2007 he received the PhD from the 

time scheduling, operating systems and programming models. He has collaborated with 
tches integrated in the official Linux kernel. 

eering at University of Pisa in 20 0 0 with a graduation thesis developed at the ReTiS Lab- 

ent of the modular real-time kernel SHaRK. He obtained the PhD from Scuola Superiore 
erprise project, an open-source RTOS which recently reached the OSEK/VDX certification, 

versities. Since 2002 he is CEO and founder of Evidence Srl, a SME working on operating 
industrial products in the automotive and white goods market. Since 2011 he is President 

ons for the white goods market. His research interests include development of hard real- 

rocessor systems, object-oriented programming, real-time operating systems, scheduling 

es, Home&Building Automation (present). EMEAS industrial Deployment within Schneider 

ous Schneider Electrics units (2010-2001). Gewiss SPA laboratory Manager (20 0 0-1996). 

 of Vimar S.p.A., Standalone and Home and Building Automation products (present). R&D 
UX and embedded PC development group at SELCA S.p.A. (1992–2001); Project Validation 

lectronic Engineering from Politecnico of Torino in 1990, with specialization in software 

ing at University of Padua and in 2011 he obtained his M.S degree in Electronic Engineer- 
ogy Transfert Team T3LAB, in Bologna, and co-founded the FPGA Group. He did research 

hine vision and developed commercial solutions for processing multimedia data stream 
tions and heterogenic multi-core system-on-chip solutions. He joined the electronic R&D 

mainly focused on human interaction with smart home systems. 

ersit di Siena and Co-founder UDOO (Present). Director ’Academy of Digital Arts and 

 Association of Cognitive Ergonomics (20 0 0 - 20 06). Member di WG30 NATO Human 

er of the Programme Incitatif de Recherche sur lEducation et la Formation (PIREF) of the 
actor Group of the Italian National Railways (1996–1999). Liaison for Apple Inc. for the 
Claudio Scordino received the Master Degree in Compute

same university. His main research interests include real-
the Linux kernel community since 2008 having several pa

Paolo Gai , CEO, graduated (cum laude) in Computer Engin

oratory of the Scuola Superiore SantAnna on the developm
Sant’Anna in 2004. Since 2000, he founded the ERIKA Ent

and which is currently used by various industries and uni
systems and code generation for Linux- and ERIKA- based 

and founder of SSG Srl, providing hardware turnkey soluti

time architectures for embedded control systems, multi-p
algorithms and multimedia applications. 

Pierluigi Passera , R&D Director of Vimar SPA, wiring devic

Electric (2012-2010). R&D and Production Director in vari
ABB SACE basic research department. 

Alberto A. Pomella , Electronics & Software R&D Manager
Director at CRS (20 01–20 03), Home automation Products; 

Group for consumer PC at ASEM (1991–1992). Degree in E

development and industrial automation. 

Nicola Bettin earned his B.S degree in Electronic Engineer
ing at University of Bologna. In 2012 he joined the Tecnol

in the design of a standard HW/SW architecture for mac
in embedded systems. His main interests were FPGA solu

dept. at Vimar Group in 2015 and his research activity is 

Antonio Rizzo Full Professor of Interaction Design, Univ

Science’ - ArsNova (20 0 0 - 20 09). Chair of the European

Factors and Human Reliability Group (1999 2002). Memb
French Government (20 02 - 20 03). Head of the Human F

Apple Design Project (1996 - 1997). 
Please cite this article as: C. Álvarez et al., The AXIOM software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 

http://dx.doi.org/10.1016/j.micpro.2016.07.002


16 C. Álvarez et al. / Microprocessors and Microsystems 0 0 0 (2016) 1–16 

ARTICLE IN PRESS 
JID: MICPRO [m5G; July 12, 2016;20:2 ] 

 Information Engineering, University of Siena, Italy. He was Research Associate at the Uni- 

 in Computer Engineering and his Master in Electronics Engineering, Summa cum Laude 
 the European Project AXIOM. He coordinated the TERAFLUX project in the area of Future 

 is participating in the European projects HiPEAC (High Performance Embedded-system 

le Architectures). He contributed to SARC (Scalable ARChitectures), ChARM (performance 
His current interests include Computer Architecture themes such as Embedded Systems, 

Characterization. 
Roberto Giorgi is an Associate Professor at Department of

versity of Alabama in Huntsville, USA. He received his PhD
both from University of Pisa, Italy. He is the coordinator of

and Emerging Technologies for Teradevice Computing. He

Architecture and Compiler), ERA (Embedded Reconfigurab
evaluation of ARM-processor based embedded systems). 

Multiprocessors, Memory System Performance, Workload 
Please cite this article as: C. Álvarez et al., The AXIOM software layers, Microprocessors and Microsystems (2016), 

http://dx.doi.org/10.1016/j.micpro.2016.07.002 
View publication statsView publication stats

http://dx.doi.org/10.1016/j.micpro.2016.07.002
https://www.researchgate.net/publication/305111586

	The AXIOM software layers
	1 Introduction
	2 The AXIOM software
	2.1 The OmpSs programming model
	2.2 OmpSs@FPGA
	2.3 OmpSs@cluster
	2.4 OmpSs on DSM-like systems
	2.5 Operating system support

	3 The AXIOM link
	4 Application domains and examples of use
	4.1 Video-surveillance
	4.2 Smart-home
	4.3 Examples of use

	5 Experimental setup
	5.1 Benchmarks description
	5.2 Hardware and software

	6 Results
	6.1 Programmability analysis
	6.2 Performance results

	7 Related work
	8 Conclusions and future work
	 Acknowledgment
	 References




